{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"\u534e\u5357\u751f\u8ba1\u6f14\u53d8\u6a21\u578b","text":""},{"location":"#_2","title":"\u6a21\u578b\u529f\u80fd","text":"<p>\u672c\u6a21\u578b\u76ee\u524d\u5305\u542b\u4ee5\u4e0b\u4e3b\u8981\u529f\u80fd\uff1a</p> <ol> <li>\u6a21\u62df\u72e9\u730e\u91c7\u96c6\u8005\u3001\u666e\u901a\u519c\u6c11\u548c\u6c34\u7a3b\u519c\u6c11\u4e09\u7c7b\u4eba\u7fa4\u7684\u4e92\u52a8\u3002</li> <li>\u8003\u8651\u5730\u5f62\u56e0\u7d20(\u5982\u6d77\u62d4\u3001\u5761\u5ea6)\u5bf9\u4eba\u7fa4\u5206\u5e03\u7684\u5f71\u54cd\u3002</li> <li>\u652f\u6301\u4eba\u53e3\u589e\u957f\u3001\u8fc1\u79fb\u548c\u8f6c\u5316\u7b49\u52a8\u6001\u8fc7\u7a0b\u3002</li> <li>\u63d0\u4f9b\u591a\u79cd\u6570\u636e\u53ef\u89c6\u5316\u65b9\u6cd5\uff0c\u5982\u4eba\u53e3\u5206\u5e03\u70ed\u529b\u56fe\u3001\u4eba\u53e3\u53d8\u5316\u8d8b\u52bf\u56fe\u7b49\u3002</li> <li>\u7075\u6d3b\u7684\u8f6c\u5316\u673a\u5236\u63a7\u5236\uff0c\u53ef\u72ec\u7acb\u5f00\u5173\u4e0d\u540c\u7c7b\u578b\u7684\u8f6c\u5316\u3002</li> <li>\u4e25\u683c\u7684\u4eba\u53e3\u5b88\u6052\u673a\u5236\uff0c\u786e\u4fdd\u6269\u6563\u548c\u5408\u5e76\u8fc7\u7a0b\u7684\u51c6\u786e\u6027\u3002</li> </ol> <p>\u6700\u65b0\u66f4\u65b0 (v2.0)\uff1a\u6a21\u578b\u7ecf\u8fc7\u5927\u5e45\u5ea6\u91cd\u6784\uff0c\u5220\u9664\u4e86\u7ade\u4e89\u673a\u5236\uff0c\u589e\u52a0\u4e86\u8f6c\u5316\u63a7\u5236\u5f00\u5173\uff0c\u4f18\u5316\u4e86\u521d\u59cb\u5316\u6d41\u7a0b\u3002\u8be6\u89c1 \u53d8\u66f4\u65e5\u5fd7\u3002</p>"},{"location":"#_3","title":"\u5f00\u59cb\u4f7f\u7528","text":"<ul> <li>\u9996\u5148\u53c2\u7167\u5feb\u901f\u5f00\u59cb\u5b89\u88c5\u5e76\u4f7f\u7528\u6a21\u578b</li> <li>\u63a5\u4e0b\u6765\u4ed4\u7ec6\u9605\u8bfb\u6a21\u578b\u5de5\u4f5c\u6d41\u786e\u8ba4\u6a21\u578b\u8fd0\u884c\u903b\u8f91</li> <li>\u7136\u540e\u53c2\u8003\u53c2\u6570\u914d\u7f6e\u8c03\u8bd5\u6a21\u578b\u53c2\u6570\uff0c\u8fd0\u884c\u81ea\u5df1\u7684\u5b9e\u9a8c</li> <li>\u6700\u540e\u4f7f\u7528\u6570\u636e\u8f93\u51fa\u4e0e\u5206\u6790\u4e2d\u7684\u65b9\u6cd5\u5206\u6790\u5b9e\u9a8c\u7ed3\u679c</li> </ul>"},{"location":"#_4","title":"\u65b9\u6cd5\u8bf4\u660e","text":"<ul> <li>\u6a21\u578b\u5de5\u4f5c\u6d41</li> <li>\u6a21\u578b\u65f6\u5e8f\u56fe - \ud83c\udd95 \u53ef\u89c6\u5316\u6d41\u7a0b\u56fe</li> <li>\u519c\u6c11\u4e3b\u4f53\u65b9\u6cd5</li> <li>\u72e9\u730e\u91c7\u96c6\u8005\u4e3b\u4f53\u65b9\u6cd5</li> <li>\u6591\u5757\u4e0e\u73af\u5883</li> </ul>"},{"location":"#_5","title":"\u5173\u4e8e\u4f5c\u8005","text":"<ul> <li>\u4f5c\u8005\uff1a\u5b8b\u723d</li> <li>\u90ae\u7bb1\uff1asongshgeo[at]gmail.com</li> </ul>"},{"location":"UPDATES/","title":"\u6a21\u578b\u66f4\u65b0\u8bf4\u660e","text":""},{"location":"UPDATES/#v20","title":"\u6a21\u578b\u66f4\u65b0\u8bf4\u660e (v2.0)","text":""},{"location":"UPDATES/#_1","title":"\u5feb\u901f\u6982\u89c8","text":"<p>\u672c\u6b21\u66f4\u65b0\u662f\u6a21\u578b\u7684\u91cd\u5927\u91cd\u6784\uff0c\u4e3b\u8981\u76ee\u6807\u662f\u7b80\u5316\u903b\u8f91\u3001\u589e\u5f3a\u7075\u6d3b\u6027\u3001\u786e\u4fdd\u51c6\u786e\u6027\u3002</p>"},{"location":"UPDATES/#_2","title":"\ud83c\udfaf \u6838\u5fc3\u53d8\u66f4","text":"\u53d8\u66f4\u7c7b\u578b \u63cf\u8ff0 \u5f71\u54cd \u2705 \u521d\u59cb\u5316\u4f18\u5316 \u6240\u6709\u4e3b\u4f53\u7c7b\u578b\u4ece\u5f00\u59cb\u5c31\u5b58\u5728 \u66f4\u7b26\u5408\u5b9e\u9645\u60c5\u51b5 \u2705 \u8f6c\u5316\u5f00\u5173 \u53ef\u72ec\u7acb\u63a7\u52366\u79cd\u8f6c\u5316\u8def\u5f84 \u4fbf\u4e8e\u5bf9\u6bd4\u5b9e\u9a8c \u274c \u5220\u9664\u7ade\u4e89 \u79fb\u9664\u4e3b\u4f53\u95f4\u7ade\u4e89\u673a\u5236 \u903b\u8f91\u66f4\u6e05\u6670 \u2705 \u4eba\u53e3\u5b88\u6052 \u4e25\u683c\u4fdd\u8bc1\u6269\u6563/\u5408\u5e76\u5b88\u6052 \u6570\u503c\u66f4\u51c6\u786e \u2705 Hunter \u6539\u8fdb \u65b0\u7684\u4eba\u53e3\u4e0a\u9650\u89c4\u5219 + \u635f\u5931\u673a\u5236 \u884c\u4e3a\u66f4\u5408\u7406 \u2705 \u6bcf\u683c\u552f\u4e00 \u4e00\u4e2a\u683c\u5b50\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53 \u7a7a\u95f4\u89c4\u5219\u660e\u786e"},{"location":"UPDATES/#_3","title":"\u26a0\ufe0f \u91cd\u8981\uff1a\u5fc5\u987b\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6","text":"<p>\u5982\u679c\u60a8\u4e4b\u524d\u4f7f\u7528\u8fc7\u672c\u6a21\u578b\uff0c\u5fc5\u987b\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u624d\u80fd\u8fd0\u884c\u65b0\u7248\u672c\uff01</p>"},{"location":"UPDATES/#_4","title":"\u5fc5\u987b\u6dfb\u52a0\u7684\u65b0\u914d\u7f6e","text":"<pre><code># 1. \u6dfb\u52a0\u8f6c\u5316\u5f00\u5173\uff08\u6839\u7ea7\u522b\uff09\nconvert:\n  enabled: true\n  hunter_to_farmer: true\n  hunter_to_rice: true\n  farmer_to_hunter: true\n  farmer_to_rice: true\n  rice_to_farmer: true\n\n# 2. \u66f4\u65b0 env \u914d\u7f6e\nenv:\n  init_farmers: 80  # \u65b0\u589e\n  init_rice_farmers: 350  # \u65b0\u589e\n  tick_farmer: 0  # \u4fee\u6539\u4e3a 0\n  tick_ricefarmer: 0  # \u4fee\u6539\u4e3a 0\n\n# 3. \u66f4\u65b0 Hunter \u914d\u7f6e\nHunter:\n  # \u5220\u9664: intensified_coefficient\n  max_size: 100  # \u65b0\u589e\n  max_size_water: 500  # \u65b0\u589e\n  loss:  # \u65b0\u589e\n    prob: 0.05\n    rate: 0.1\n\n# 4. \u6dfb\u52a0\u521d\u59cb\u4eba\u53e3\u89c4\u6a21\nFarmer:\n  init_size: [60, 100]  # \u65b0\u589e\n\nRiceFarmer:\n  init_size: [300, 400]  # \u65b0\u589e\n</code></pre>"},{"location":"UPDATES/#_5","title":"\ud83d\udcdd \u914d\u7f6e\u6587\u4ef6\u8fc1\u79fb\u6b65\u9aa4","text":"<ol> <li>\u5907\u4efd\u60a8\u7684\u65e7\u914d\u7f6e\u6587\u4ef6</li> <li>\u590d\u5236 <code>config/config.yaml</code> \u4f5c\u4e3a\u6a21\u677f</li> <li>\u6839\u636e\u4e0a\u8ff0\u53d8\u66f4\u66f4\u65b0\u60a8\u7684\u914d\u7f6e</li> <li>\u8fd0\u884c\u6d4b\u8bd5\u786e\u4fdd\u914d\u7f6e\u6b63\u786e</li> </ol>"},{"location":"UPDATES/#_6","title":"\ud83e\uddea \u9a8c\u8bc1","text":"<p>\u6240\u6709\u4fee\u6539\u5df2\u901a\u8fc7\u5168\u9762\u6d4b\u8bd5\uff1a</p> <pre><code># \u8fd0\u884c\u6d4b\u8bd5\u5957\u4ef6\npoetry run pytest tests/ -v\n\n# \u8fd0\u884c\u6a21\u578b\npoetry run python -m src time.end=20 exp.repeats=1\n</code></pre> <p>\u9884\u671f\u7ed3\u679c\uff1a - \u2705 84 \u4e2a\u5355\u5143\u6d4b\u8bd5\u5168\u90e8\u901a\u8fc7 - \u2705 \u6a21\u578b\u6b63\u5e38\u8fd0\u884c\u5e76\u751f\u6210\u8f93\u51fa - \u2705 \u751f\u6210\u8f6c\u5316\u6570\u636e\u3001\u52a8\u6001\u56fe\u3001\u70ed\u56fe</p>"},{"location":"UPDATES/#_7","title":"\ud83d\udcda \u8be6\u7ec6\u6587\u6863","text":"<ul> <li>\u53d8\u66f4\u65e5\u5fd7\uff1achangelog_v2.md - \u8be6\u7ec6\u7684\u53d8\u66f4\u8bf4\u660e</li> <li>\u914d\u7f6e\u8bf4\u660e\uff1aconfig.md - \u5b8c\u6574\u7684\u53c2\u6570\u6587\u6863</li> <li>\u5de5\u4f5c\u6d41\u7a0b\uff1aworkflow.md - \u66f4\u65b0\u7684\u6a21\u578b\u6d41\u7a0b</li> </ul>"},{"location":"UPDATES/#api","title":"\ud83d\udd04 \u4e3b\u8981 API \u53d8\u66f4","text":""},{"location":"UPDATES/#_8","title":"\u5220\u9664\u7684\u65b9\u6cd5","text":"<pre><code># \u274c \u4ee5\u4e0b\u65b9\u6cd5\u5df2\u5220\u9664\nHunter.compete()\nHunter.loss_in_competition()\nHunter.moving()\n</code></pre>"},{"location":"UPDATES/#_9","title":"\u4fee\u6539\u7684\u65b9\u6cd5","text":"<pre><code># \u2705 \u73b0\u5728\u7684\u5b9e\u73b0\nHunter.max_size  # \u8fd4\u56de 100 \u6216 500\uff08\u4e34\u8fd1\u6c34\u4f53\uff09\nHunter.loss()  # \u65b0\u589e\u635f\u5931\u673a\u5236\nHunter.merge()  # \u4e25\u683c\u4eba\u53e3\u5b88\u6052\n\nSiteGroup.diffuse()  # \u4e25\u683c\u4eba\u53e3\u5b88\u6052\n</code></pre>"},{"location":"UPDATES/#_10","title":"\u65b0\u589e\u7684\u65b9\u6cd5","text":"<pre><code># \u2705 \u65b0\u589e\u65b9\u6cd5\nHunter.is_near_water()  # \u68c0\u67e5\u662f\u5426\u4e34\u8fd1\u6c34\u4f53\nEnv.add_initial_farmers()  # \u521d\u59cb\u5316\u519c\u6c11\n</code></pre>"},{"location":"UPDATES/#_11","title":"\ud83d\udca1 \u4f7f\u7528\u5efa\u8bae","text":""},{"location":"UPDATES/#_12","title":"\u5bf9\u6bd4\u5b9e\u9a8c\u8bbe\u8ba1","text":"<p>\u5229\u7528\u65b0\u7684\u8f6c\u5316\u5f00\u5173\u529f\u80fd\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u8bbe\u8ba1\u5bf9\u6bd4\u5b9e\u9a8c\uff1a</p> <pre><code># \u5b9e\u9a8c1\uff1a\u6709\u8f6c\u5316\u673a\u5236\nconvert:\n  enabled: true\n\n# \u5b9e\u9a8c2\uff1a\u65e0\u8f6c\u5316\u673a\u5236\nconvert:\n  enabled: false\n</code></pre>"},{"location":"UPDATES/#_13","title":"\u53c2\u6570\u8c03\u6574\u5efa\u8bae","text":"<p>\u57fa\u4e8e\u6d4b\u8bd5\u7ed3\u679c\uff0c\u4ee5\u4e0b\u53c2\u6570\u7ec4\u5408\u8868\u73b0\u826f\u597d\uff1a</p> <pre><code>env:\n  init_hunters: 0.05\n  init_farmers: 80\n  init_rice_farmers: 350\n\nHunter:\n  max_size: 100\n  max_size_water: 500\n  loss:\n    prob: 0.05\n    rate: 0.1\n</code></pre>"},{"location":"UPDATES/#_14","title":"\ud83d\udc1b \u5df2\u77e5\u95ee\u9898","text":"<p>\u76ee\u524d\u6ca1\u6709\u5df2\u77e5\u7684\u4e25\u91cd\u95ee\u9898\u3002\u5982\u679c\u9047\u5230\u95ee\u9898\uff0c\u8bf7\uff1a</p> <ol> <li>\u786e\u8ba4\u914d\u7f6e\u6587\u4ef6\u5df2\u6b63\u786e\u66f4\u65b0</li> <li>\u68c0\u67e5\u6240\u6709\u6d4b\u8bd5\u662f\u5426\u901a\u8fc7</li> <li>\u67e5\u770b\u65e5\u5fd7\u6587\u4ef6\u4e2d\u7684\u9519\u8bef\u4fe1\u606f</li> </ol>"},{"location":"UPDATES/#_15","title":"\ud83d\udcde \u83b7\u53d6\u5e2e\u52a9","text":"<p>\u5982\u6709\u95ee\u9898\uff0c\u8bf7\u53c2\u8003\uff1a</p> <ol> <li>\u5b8c\u6574\u6587\u6863</li> <li>\u914d\u7f6e\u8bf4\u660e</li> <li>\u53d8\u66f4\u65e5\u5fd7</li> </ol> <p>\u6216\u8054\u7cfb\uff1asongshgeo[at]gmail.com</p>"},{"location":"api/env/","title":"\u72e9\u730e\u91c7\u96c6\u8005\u4e0e\u519c\u6c11\u7684\u4ea4\u4e92\u73af\u5883","text":"<p>\u73af\u5883\u5305\u62ec\u4e86\u4e24\u4e2a\u7c7b\uff0c\u5373\u6591\u5757\uff08CompetingCell\uff09\u548c\u73af\u5883\uff08Env\uff09\u3002\u73af\u5883\u4f1a\u81ea\u52a8\u6839\u636e\u8f93\u5165\u7684\u6805\u683c\u6587\u4ef6\u521b\u5efa\u8db3\u591f\u6570\u91cf\u7684\u6591\u5757\uff0c\u6bcf\u4e00\u4e2a\u6591\u5757\u662f\u4e3b\u4f53\u5177\u4f53\u6240\u5728\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"api/env/#_1","title":"\u6591\u5757","text":"<p>               Bases: <code>PatchCell</code></p> <p>\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7ade\u4e89\u7684\u821e\u53f0</p> Source code in <code>src/api/env.py</code> <pre><code>class CompetingCell(PatchCell):\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7ade\u4e89\u7684\u821e\u53f0\"\"\"\n\n    max_agents = 1  # \u4e00\u4e2a\u6591\u5757\u4e0a\u6700\u591a\u6709\u591a\u5c11\u4e2a\u4e3b\u4f53\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.lim_h: float = 0.0\n        self.slope: float = np.random.uniform(0, 30)\n        self.elevation: float = np.random.uniform(0, 300)\n        self._is_water: Optional[bool] = None\n\n    def _count(self, breed: str) -&gt; int:\n        \"\"\"\u7edf\u8ba1\u6b64\u5904\u7684\u519c\u6c11\u6216\u8005\u72e9\u730e\u91c7\u96c6\u8005\u7684\u6570\u91cf\"\"\"\n        return self.agents.select(agent_type=breed).array(\"size\").sum()\n\n    @raster_attribute\n    def farmers(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        return self._count(Farmer)\n\n    @raster_attribute\n    def hunters(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        return self._count(Hunter)\n\n    @raster_attribute\n    def rice_farmers(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        return self._count(RiceFarmer)\n\n    @raster_attribute\n    def is_water(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u6c34\u4f53\"\"\"\n        if self._is_water is None:\n            return self.elevation &lt;= 0 or np.isnan(self.elevation)\n        return bool(self._is_water)\n\n    @is_water.setter\n    def is_water(self, value: bool) -&gt; None:\n        if not isinstance(value, (bool, np.bool_)):\n            raise TypeError(f\"Can only be bool type, got {type(value)}.\")\n        self._is_water = bool(value)\n\n    @raster_attribute\n    def is_arable(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730:\n        1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002\n        2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002\n        3. \u4e0d\u662f\u6c34\u4f53\u3002\n\n        &gt;  1. \u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09\n        &gt; 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b\n        &gt; 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f\n\n        returns:\n            \u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n        \"\"\"\n        # \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\n        cond1 = self.slope &lt;= 10\n        # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n        cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n        # \u4e0d\u662f\u6c34\u4f53\n        cond3 = not self.is_water\n        # \u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u53ef\u8015\u5730\n        return cond1 and cond2 and cond3\n\n    @raster_attribute\n    def dem_suitable(self) -&gt; int:\n        \"\"\"\u6d77\u62d4\u9ad8\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n        # 0-100: 2\n        # 100-200: 1\n        # 200+: 0\n        dem = self.elevation\n        if dem &lt; 100:\n            return 2\n        return 1 if dem &lt; 200 else 0\n\n    @raster_attribute\n    def slope_suitable(self) -&gt; int:\n        \"\"\"\u5761\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n        # 0-2: 5\n        # 2-4: 4\n        # 4-6: 3\n        # 6-8: 2\n        # 8-10: 1\n        # 10+: 0\n        if self.slope &lt; 2:\n            return 5\n        if self.slope &lt; 4:\n            return 4\n        if self.slope &lt; 6:\n            return 3\n        if self.slope &lt; 8:\n            return 2\n        return 1 if self.slope &lt; 10 else 0\n\n    @raster_attribute\n    def is_rice_arable(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u6c34\u7a3b\u7684\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u6c34\u7a3b\u53ef\u8015\u5730:\n        1. \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\u5ea6\u3002\n        2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u4e14\u5927\u4e8e0\u3002\n        3. \u4e0d\u662f\u6c34\u4f53\u3002\n\n        returns:\n            \u662f\u5426\u662f\u6c34\u7a3b\u53ef\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n        \"\"\"\n        # \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\u5ea6\n        cond1 = self.slope &lt;= 0.5\n        # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u4e14\u5927\u4e8e0\n        cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n        # \u4e0d\u662f\u6c34\u4f53\n        cond3 = not self.is_water\n        # \u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u6c34\u7a3b\u53ef\u8015\u5730\n        return cond1 and cond2 and cond3\n\n    @raster_attribute\n    def is_only_arable(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u53ea\u662f\u666e\u901a\u53ef\u8015\u5730\u800c\u4e0d\u662f\u6c34\u7a3b\u53ef\u8015\u5730\"\"\"\n        return self.is_arable and not self.is_rice_arable\n\n    def able_to_live(self, agent: SiteGroup) -&gt; None:\n        \"\"\"\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9:\n        1. \u683c\u5b50\u91cc\u5fc5\u987b\u6ca1\u6709\u5176\u4ed6\u4e3b\u4f53\uff08\u6bcf\u683c\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53\uff09\n        2. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df\n        3. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730\n\n        Args:\n            agent (SiteGroup): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002\n\n        Returns:\n            \u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n        \"\"\"\n        # \u9996\u5148\u68c0\u67e5\u662f\u5426\u5df2\u6709\u5176\u4ed6\u4e3b\u4f53\uff08\u6240\u6709\u7c7b\u578b\u90fd\u4e0d\u80fd\u91cd\u53e0\uff09\n        if self.agents.has() &gt; 0:\n            # \u552f\u4e00\u7684\u4f8b\u5916\uff1a\u540c\u4e00\u4e2a\u4e3b\u4f53\u68c0\u67e5\u81ea\u5df1\u7684\u4f4d\u7f6e\n            existing = self.agents.select().item(\"item\")\n            if existing is not None and existing is not agent:\n                return False\n\n        # \u7136\u540e\u68c0\u67e5\u7279\u5b9a\u7c7b\u578b\u7684\u8981\u6c42\n        if agent.breed == \"Hunter\":\n            return not self.is_water\n        if agent.breed == \"RiceFarmer\":\n            return self.is_rice_arable\n        if agent.breed == \"Farmer\":\n            return self.is_arable\n        if agent.breed == \"SiteGroup\":\n            return True\n        raise TypeError(\"Agent must be a valid People.\")\n\n    def suitable_level(self, breed: SiteGroup | str) -&gt; float:\n        \"\"\"\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002\n\n        Args:\n            breed (SiteGroup | str): \u4e3b\u4f53\u6216\u4e3b\u4f53\u7c7b\u578b\u540d\u79f0\u3002\n\n        Returns:\n            \u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002\n\n        Raises:\n            TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n        \"\"\"\n        if not isinstance(breed, str):\n            breed = breed.breed\n        if breed == \"Hunter\":\n            return 1.0\n        if breed == \"RiceFarmer\":\n            return self.dem_suitable\n        if breed == \"Farmer\":\n            return self.dem_suitable * 0.5 + self.slope_suitable * 0.2\n        if breed == \"SiteGroup\":\n            return 1.0\n        raise TypeError(\"Agent must be Farmer or Hunter.\")\n\n    def convert(self, agent: Farmer | Hunter, to: str) -&gt; SiteGroup:\n        \"\"\"\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002\n\n        Args:\n            agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\n            to (str): \u8f6c\u5316\u6210\u7684\u4e3b\u4f53\u7c7b\u578b\u540d\u79f0\u3002\n\n        Returns:\n            \u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002\n            \u5982\u679c\u8f6c\u5316\u5f00\u5173\u5173\u95ed\uff0c\u8fd4\u56de\u539f\u4e3b\u4f53\u3002\n\n        Raises:\n            TypeError:\n                \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u6216\u8005\u60f3\u8f6c\u5316\u6210\u7684\u7c7b\u578b\u4e0d\u4ece\u57fa\u7840\u4e3b\u4f53\u7ee7\u627f\u800c\u6765\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n        \"\"\"\n        # \u68c0\u67e5\u5168\u5c40\u8f6c\u5316\u5f00\u5173\n        try:\n            convert_config = self.layer.model.params.get(\"convert\", {})\n            if not convert_config.get(\"enabled\", True):\n                return agent\n\n            # \u68c0\u67e5\u5177\u4f53\u8f6c\u5316\u7c7b\u578b\u7684\u5f00\u5173\n            convert_type = f\"{agent.breed.lower()}_to_{to.lower()}\"\n            if not convert_config.get(convert_type, True):\n                return agent\n        except (AttributeError, KeyError):\n            # \u5982\u679c\u914d\u7f6e\u4e2d\u6ca1\u6709 convert \u90e8\u5206\uff0c\u9ed8\u8ba4\u5141\u8bb8\u8f6c\u5316\n            pass\n\n        to = {\"Farmer\": Farmer, \"RiceFarmer\": RiceFarmer, \"Hunter\": Hunter}.get(to)\n        if not isinstance(agent, SiteGroup):\n            raise TypeError(f\"Agent must be inherited from SiteGroup, not {agent}.\")\n        if to is None:\n            raise TypeError(\"Agent must be inherited from SiteGroup.\")\n        # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u4f53\n        # print(f\"Going to create size {agent.size} {convert_to}\")\n        converted = self.layer.model.agents.new(to, size=agent.size, singleton=True)\n        converted.source = agent.source  # \u8bb0\u5f55\u539f\u6765\u662f\u4ec0\u4e48\u4e3b\u4f53\n        agent.die()  # \u65e7\u7684\u4e3b\u4f53\u6b7b\u4ea1\n        converted.move.to(self)\n        return converted\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.able_to_live","title":"<code>able_to_live(agent)</code>","text":"<p>\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9: 1. \u683c\u5b50\u91cc\u5fc5\u987b\u6ca1\u6709\u5176\u4ed6\u4e3b\u4f53\uff08\u6bcf\u683c\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53\uff09 2. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df 3. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>agent</code> <code>SiteGroup</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>None</code> <p>\u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def able_to_live(self, agent: SiteGroup) -&gt; None:\n    \"\"\"\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9:\n    1. \u683c\u5b50\u91cc\u5fc5\u987b\u6ca1\u6709\u5176\u4ed6\u4e3b\u4f53\uff08\u6bcf\u683c\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53\uff09\n    2. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df\n    3. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730\n\n    Args:\n        agent (SiteGroup): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002\n\n    Returns:\n        \u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    # \u9996\u5148\u68c0\u67e5\u662f\u5426\u5df2\u6709\u5176\u4ed6\u4e3b\u4f53\uff08\u6240\u6709\u7c7b\u578b\u90fd\u4e0d\u80fd\u91cd\u53e0\uff09\n    if self.agents.has() &gt; 0:\n        # \u552f\u4e00\u7684\u4f8b\u5916\uff1a\u540c\u4e00\u4e2a\u4e3b\u4f53\u68c0\u67e5\u81ea\u5df1\u7684\u4f4d\u7f6e\n        existing = self.agents.select().item(\"item\")\n        if existing is not None and existing is not agent:\n            return False\n\n    # \u7136\u540e\u68c0\u67e5\u7279\u5b9a\u7c7b\u578b\u7684\u8981\u6c42\n    if agent.breed == \"Hunter\":\n        return not self.is_water\n    if agent.breed == \"RiceFarmer\":\n        return self.is_rice_arable\n    if agent.breed == \"Farmer\":\n        return self.is_arable\n    if agent.breed == \"SiteGroup\":\n        return True\n    raise TypeError(\"Agent must be a valid People.\")\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.convert","title":"<code>convert(agent, to)</code>","text":"<p>\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>agent</code> <code>Farmer | Hunter</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002</p> \u5fc5\u9700 <code>to</code> <code>str</code> <p>\u8f6c\u5316\u6210\u7684\u4e3b\u4f53\u7c7b\u578b\u540d\u79f0\u3002</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>SiteGroup</code> <p>\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002</p> <code>SiteGroup</code> <p>\u5982\u679c\u8f6c\u5316\u5f00\u5173\u5173\u95ed\uff0c\u8fd4\u56de\u539f\u4e3b\u4f53\u3002</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>TypeError</code> <p>\u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u6216\u8005\u60f3\u8f6c\u5316\u6210\u7684\u7c7b\u578b\u4e0d\u4ece\u57fa\u7840\u4e3b\u4f53\u7ee7\u627f\u800c\u6765\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def convert(self, agent: Farmer | Hunter, to: str) -&gt; SiteGroup:\n    \"\"\"\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002\n\n    Args:\n        agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\n        to (str): \u8f6c\u5316\u6210\u7684\u4e3b\u4f53\u7c7b\u578b\u540d\u79f0\u3002\n\n    Returns:\n        \u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002\n        \u5982\u679c\u8f6c\u5316\u5f00\u5173\u5173\u95ed\uff0c\u8fd4\u56de\u539f\u4e3b\u4f53\u3002\n\n    Raises:\n        TypeError:\n            \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u6216\u8005\u60f3\u8f6c\u5316\u6210\u7684\u7c7b\u578b\u4e0d\u4ece\u57fa\u7840\u4e3b\u4f53\u7ee7\u627f\u800c\u6765\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n    \"\"\"\n    # \u68c0\u67e5\u5168\u5c40\u8f6c\u5316\u5f00\u5173\n    try:\n        convert_config = self.layer.model.params.get(\"convert\", {})\n        if not convert_config.get(\"enabled\", True):\n            return agent\n\n        # \u68c0\u67e5\u5177\u4f53\u8f6c\u5316\u7c7b\u578b\u7684\u5f00\u5173\n        convert_type = f\"{agent.breed.lower()}_to_{to.lower()}\"\n        if not convert_config.get(convert_type, True):\n            return agent\n    except (AttributeError, KeyError):\n        # \u5982\u679c\u914d\u7f6e\u4e2d\u6ca1\u6709 convert \u90e8\u5206\uff0c\u9ed8\u8ba4\u5141\u8bb8\u8f6c\u5316\n        pass\n\n    to = {\"Farmer\": Farmer, \"RiceFarmer\": RiceFarmer, \"Hunter\": Hunter}.get(to)\n    if not isinstance(agent, SiteGroup):\n        raise TypeError(f\"Agent must be inherited from SiteGroup, not {agent}.\")\n    if to is None:\n        raise TypeError(\"Agent must be inherited from SiteGroup.\")\n    # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u4f53\n    # print(f\"Going to create size {agent.size} {convert_to}\")\n    converted = self.layer.model.agents.new(to, size=agent.size, singleton=True)\n    converted.source = agent.source  # \u8bb0\u5f55\u539f\u6765\u662f\u4ec0\u4e48\u4e3b\u4f53\n    agent.die()  # \u65e7\u7684\u4e3b\u4f53\u6b7b\u4ea1\n    converted.move.to(self)\n    return converted\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.dem_suitable","title":"<code>dem_suitable()</code>","text":"<p>\u6d77\u62d4\u9ad8\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef dem_suitable(self) -&gt; int:\n    \"\"\"\u6d77\u62d4\u9ad8\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n    # 0-100: 2\n    # 100-200: 1\n    # 200+: 0\n    dem = self.elevation\n    if dem &lt; 100:\n        return 2\n    return 1 if dem &lt; 200 else 0\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.farmers","title":"<code>farmers()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef farmers(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    return self._count(Farmer)\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.hunters","title":"<code>hunters()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef hunters(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    return self._count(Hunter)\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.is_arable","title":"<code>is_arable()</code>","text":"<p>\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730: 1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002 2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002 3. \u4e0d\u662f\u6c34\u4f53\u3002</p> <ol> <li>\u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f</li> </ol> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef is_arable(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730:\n    1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002\n    2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002\n    3. \u4e0d\u662f\u6c34\u4f53\u3002\n\n    &gt;  1. \u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09\n    &gt; 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b\n    &gt; 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f\n\n    returns:\n        \u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n    \"\"\"\n    # \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\n    cond1 = self.slope &lt;= 10\n    # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n    cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n    # \u4e0d\u662f\u6c34\u4f53\n    cond3 = not self.is_water\n    # \u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u53ef\u8015\u5730\n    return cond1 and cond2 and cond3\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.is_only_arable","title":"<code>is_only_arable()</code>","text":"<p>\u662f\u5426\u53ea\u662f\u666e\u901a\u53ef\u8015\u5730\u800c\u4e0d\u662f\u6c34\u7a3b\u53ef\u8015\u5730</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef is_only_arable(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u53ea\u662f\u666e\u901a\u53ef\u8015\u5730\u800c\u4e0d\u662f\u6c34\u7a3b\u53ef\u8015\u5730\"\"\"\n    return self.is_arable and not self.is_rice_arable\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.is_rice_arable","title":"<code>is_rice_arable()</code>","text":"<p>\u662f\u5426\u662f\u6c34\u7a3b\u7684\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u6c34\u7a3b\u53ef\u8015\u5730: 1. \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\u5ea6\u3002 2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u4e14\u5927\u4e8e0\u3002 3. \u4e0d\u662f\u6c34\u4f53\u3002</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u662f\u6c34\u7a3b\u53ef\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef is_rice_arable(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u662f\u6c34\u7a3b\u7684\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u6c34\u7a3b\u53ef\u8015\u5730:\n    1. \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\u5ea6\u3002\n    2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u4e14\u5927\u4e8e0\u3002\n    3. \u4e0d\u662f\u6c34\u4f53\u3002\n\n    returns:\n        \u662f\u5426\u662f\u6c34\u7a3b\u53ef\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n    \"\"\"\n    # \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\u5ea6\n    cond1 = self.slope &lt;= 0.5\n    # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u4e14\u5927\u4e8e0\n    cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n    # \u4e0d\u662f\u6c34\u4f53\n    cond3 = not self.is_water\n    # \u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u6c34\u7a3b\u53ef\u8015\u5730\n    return cond1 and cond2 and cond3\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.rice_farmers","title":"<code>rice_farmers()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef rice_farmers(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    return self._count(RiceFarmer)\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.slope_suitable","title":"<code>slope_suitable()</code>","text":"<p>\u5761\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef slope_suitable(self) -&gt; int:\n    \"\"\"\u5761\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n    # 0-2: 5\n    # 2-4: 4\n    # 4-6: 3\n    # 6-8: 2\n    # 8-10: 1\n    # 10+: 0\n    if self.slope &lt; 2:\n        return 5\n    if self.slope &lt; 4:\n        return 4\n    if self.slope &lt; 6:\n        return 3\n    if self.slope &lt; 8:\n        return 2\n    return 1 if self.slope &lt; 10 else 0\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.suitable_level","title":"<code>suitable_level(breed)</code>","text":"<p>\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>breed</code> <code>SiteGroup | str</code> <p>\u4e3b\u4f53\u6216\u4e3b\u4f53\u7c7b\u578b\u540d\u79f0\u3002</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>float</code> <p>\u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002</p> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>TypeError</code> <p>\u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def suitable_level(self, breed: SiteGroup | str) -&gt; float:\n    \"\"\"\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002\n\n    Args:\n        breed (SiteGroup | str): \u4e3b\u4f53\u6216\u4e3b\u4f53\u7c7b\u578b\u540d\u79f0\u3002\n\n    Returns:\n        \u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002\n\n    Raises:\n        TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n    \"\"\"\n    if not isinstance(breed, str):\n        breed = breed.breed\n    if breed == \"Hunter\":\n        return 1.0\n    if breed == \"RiceFarmer\":\n        return self.dem_suitable\n    if breed == \"Farmer\":\n        return self.dem_suitable * 0.5 + self.slope_suitable * 0.2\n    if breed == \"SiteGroup\":\n        return 1.0\n    raise TypeError(\"Agent must be Farmer or Hunter.\")\n</code></pre>"},{"location":"api/env/#_2","title":"\u73af\u5883","text":"<p>               Bases: <code>BaseNature</code></p> <p>\u73af\u5883\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6a21\u578b\u4e2d\u7684\u73af\u5883\u4fe1\u606f\u3002</p> \u5c5e\u6027 <p>dem (BaseRaster): \u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u3002 slope (BaseRaster): \u5761\u5ea6\u3002 lim_h (BaseRaster): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u9650\u5236\u3002</p> \u65b9\u6cd5 <p>setup(): \u521d\u59cb\u5316\u73af\u5883\u3002 step(): \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a     1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf     2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316     3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09 add_hunters(): \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u3002 add_farmers(): \u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>class Env(BaseNature):\n    \"\"\"\n    \u73af\u5883\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6a21\u578b\u4e2d\u7684\u73af\u5883\u4fe1\u606f\u3002\n\n    \u5c5e\u6027:\n        dem (BaseRaster): \u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u3002\n        slope (BaseRaster): \u5761\u5ea6\u3002\n        lim_h (BaseRaster): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u9650\u5236\u3002\n\n    \u65b9\u6cd5:\n        setup(): \u521d\u59cb\u5316\u73af\u5883\u3002\n        step(): \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n            1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n            2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n            3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n        add_hunters(): \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u3002\n        add_farmers(): \u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\u3002\n    \"\"\"\n\n    @property\n    def agents(self):\n        \"\"\"\u660e\u786e\u91cd\u5199agents\u5c5e\u6027\"\"\"\n        try:\n            # \u9996\u5148\u5c1d\u8bd5\u83b7\u53d6BaseNature\u7684agents\n            return super().agents\n        except AttributeError:\n            # \u5982\u679c\u5931\u8d25\uff0c\u8fd4\u56deGeoSpace\u7684agents\n            return self._agent_layer.agents if hasattr(self, \"_agent_layer\") else []\n\n    def __init__(self, model, name=\"env\"):\n        super().__init__(model, name)\n\n    def initialize(self):\n        \"\"\"Initialize environment: setup DEM and add initial hunters and farmers.\"\"\"\n        self.setup_dem()\n        self.add_hunters(self.p.init_hunters)\n        self.add_initial_farmers(Farmer, self.p.get(\"init_farmers\", 0))\n        self.add_initial_farmers(RiceFarmer, self.p.get(\"init_rice_farmers\", 0))\n\n    def setup_dem(self):\n        \"\"\"\u521b\u5efa\u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u5e76\u8bbe\u7f6e\u4e3a\u4e3b\u56fe\u5c42\"\"\"\n        self.dem = self.create_module(\n            raster_file=self.ds.dem,\n            cell_cls=CompetingCell,\n            attr_name=\"elevation\",\n            major_layer=True,\n            apply_raster=True,\n        )\n        arr = self._open_rasterio(self.ds.slope)\n        self.dem.apply_raster(arr, attr_name=\"slope\")\n        arr = self._open_rasterio(self.ds.lim_h)\n        self.dem.apply_raster(arr, attr_name=\"lim_h\")\n\n    def _open_rasterio(self, source: str) -&gt; np.ndarray:\n        with rasterio.open(source) as dataset:\n            arr = dataset.read(1)\n            arr = np.where(arr &lt; 0, np.nan, arr)\n        return arr.reshape((1, arr.shape[0], arr.shape[1]))\n\n    def step(self) -&gt; None:\n        \"\"\"\n        \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n        1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n        2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n        3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n        \"\"\"\n        self.add_farmers(Farmer)\n        self.add_farmers(RiceFarmer)\n\n    def add_hunters(self, ratio: Optional[float | str] = 0.05) -&gt; ActorsList[Hunter]:\n        \"\"\"\n        \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\u3002\n\n        Args:\n            ratio (float | None): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u6bd4\u4f8b\u3002\u9ed8\u8ba4\u4e3a0.05\u3002\n\n        Returns:\n            \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\u3002\n        \"\"\"\n        available_cells = self.major_layer.cells_lst.select({\"is_water\": False})\n        ratio = float(ratio)\n        if ratio.is_integer():\n            num = int(ratio)\n        else:\n            num = int(len(available_cells) * ratio)\n        hunters = available_cells.random.new(Hunter, size=num, replace=False)\n        init_min, init_max = hunters[0].params.init_size\n        hunters.apply(lambda h: h.random_size(init_min, init_max))\n        return hunters\n\n    def add_initial_farmers(\n        self, farmer_cls: type = Farmer, num: int = 0\n    ) -&gt; ActorsList[Farmer | RiceFarmer]:\n        \"\"\"\n        \u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e9b\u53ef\u8015\u5730\uff0c\u5c06\u521d\u59cb\u7684\u519c\u6c11\u653e\u4e0a\u53bb\u3002\n\n        Args:\n            farmer_cls (type): \u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002\n            num (int): \u8981\u6dfb\u52a0\u7684\u519c\u6c11\u6570\u91cf\u3002\n\n        Returns:\n            \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n        \"\"\"\n        if num &lt;= 0:\n            return ActorsList(self.model, [])\n\n        # \u6839\u636e\u519c\u6c11\u7c7b\u578b\u9009\u62e9\u5408\u9002\u7684\u53ef\u8015\u5730\n        if farmer_cls == RiceFarmer:\n            arable = self.dem.get_raster(\"is_rice_arable\").reshape(self.dem.shape2d)\n        else:\n            arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n\n        arable_cells = ActorsList(self.model, self.dem.array_cells[arable.astype(bool)])\n        # \u8fc7\u6ee4\u51fa\u6ca1\u6709\u4e3b\u4f53\u7684\u683c\u5b50\n        valid_cells = arable_cells.select(lambda c: c.agents.has() == 0)\n\n        # \u5982\u679c\u53ef\u8015\u5730\u6570\u91cf\u4e0d\u591f\uff0c\u5219\u51cf\u5c11\u519c\u6c11\u6570\u91cf\n        farmers_num = min(num, len(valid_cells))\n        if farmers_num == 0:\n            return ActorsList(self.model, [])\n\n        # \u968f\u673a\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6591\u5757\u4e0a\u521b\u5efa\u519c\u6c11\n        farmers = valid_cells.random.new(\n            farmer_cls,\n            size=farmers_num,\n            replace=False,\n        )\n        # \u6839\u636e init_size \u53c2\u6570\u968f\u673a\u5206\u914d\u521d\u59cb\u4eba\u53e3\u89c4\u6a21\n        init_min, init_max = farmers[0].params.init_size\n        farmers.apply(lambda f: f.random_size(init_min, init_max))\n        return farmers\n\n    def add_farmers(self, farmer_cls: type = Farmer) -&gt; ActorsList[Farmer | RiceFarmer]:\n        \"\"\"\n        \u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u94fe\u63a5](https://zhuanlan.zhihu.com/p/373751245)\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002\n\n        Args:\n            farmer_cls (type): \u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002\n\n        Returns:\n            \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n        \"\"\"\n        lam_key = f\"lam_{farmer_cls.breed}\".lower()\n        tick_key = f\"tick_{farmer_cls.breed}\".lower()\n        if self.time.tick &lt; self.params.get(tick_key, 0):\n            farmers_num = 0\n        else:\n            farmers_num = np.random.poisson(self.params.get(lam_key, 0))\n        # \u4ece\u53ef\u8015\u5730\u3001\u6ca1\u6709\u4e3b\u4f53\u7684\u91cc\u9762\u9009\n        arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n        arable_cells = ActorsList(self.model, self.dem.array_cells[arable.astype(bool)])\n        # Use lambda function to filter cells with no agents\n        valid_cells = arable_cells.select(lambda c: c.agents.has() == 0)\n        # \u5982\u679c\u53ef\u8015\u5730\u6570\u91cf\u4e0d\u591f\uff0c\u5219\u51cf\u5c11\u519c\u6c11\u6570\u91cf\n        farmers_num = min(farmers_num, len(valid_cells))\n        if farmers_num == 0:\n            return ActorsList(self.model, [])\n        # \u968f\u673a\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6591\u5757\u4e0a\u521b\u5efa\u519c\u6c11\n        farmers = valid_cells.random.new(\n            farmer_cls,\n            size=farmers_num,\n            replace=False,\n        )\n        # \u968f\u673a\u5206\u914d\u5927\u5c0f\n        for farmer in farmers:\n            min_size, max_size = farmer.params.new_group_size\n            farmer.size = farmer.random.randint(int(min_size), int(max_size))\n        return farmers\n</code></pre>"},{"location":"api/env/#src.api.env.Env.agents","title":"<code>agents</code>  <code>property</code>","text":"<p>\u660e\u786e\u91cd\u5199agents\u5c5e\u6027</p>"},{"location":"api/env/#src.api.env.Env.add_farmers","title":"<code>add_farmers(farmer_cls=Farmer)</code>","text":"<p>\u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b\u8fd9\u4e2a\u94fe\u63a5\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>farmer_cls</code> <code>type</code> <p>\u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002</p> <code>Farmer</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ActorsList[Farmer | RiceFarmer]</code> <p>\u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def add_farmers(self, farmer_cls: type = Farmer) -&gt; ActorsList[Farmer | RiceFarmer]:\n    \"\"\"\n    \u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u94fe\u63a5](https://zhuanlan.zhihu.com/p/373751245)\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002\n\n    Args:\n        farmer_cls (type): \u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002\n\n    Returns:\n        \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n    \"\"\"\n    lam_key = f\"lam_{farmer_cls.breed}\".lower()\n    tick_key = f\"tick_{farmer_cls.breed}\".lower()\n    if self.time.tick &lt; self.params.get(tick_key, 0):\n        farmers_num = 0\n    else:\n        farmers_num = np.random.poisson(self.params.get(lam_key, 0))\n    # \u4ece\u53ef\u8015\u5730\u3001\u6ca1\u6709\u4e3b\u4f53\u7684\u91cc\u9762\u9009\n    arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n    arable_cells = ActorsList(self.model, self.dem.array_cells[arable.astype(bool)])\n    # Use lambda function to filter cells with no agents\n    valid_cells = arable_cells.select(lambda c: c.agents.has() == 0)\n    # \u5982\u679c\u53ef\u8015\u5730\u6570\u91cf\u4e0d\u591f\uff0c\u5219\u51cf\u5c11\u519c\u6c11\u6570\u91cf\n    farmers_num = min(farmers_num, len(valid_cells))\n    if farmers_num == 0:\n        return ActorsList(self.model, [])\n    # \u968f\u673a\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6591\u5757\u4e0a\u521b\u5efa\u519c\u6c11\n    farmers = valid_cells.random.new(\n        farmer_cls,\n        size=farmers_num,\n        replace=False,\n    )\n    # \u968f\u673a\u5206\u914d\u5927\u5c0f\n    for farmer in farmers:\n        min_size, max_size = farmer.params.new_group_size\n        farmer.size = farmer.random.randint(int(min_size), int(max_size))\n    return farmers\n</code></pre>"},{"location":"api/env/#src.api.env.Env.add_hunters","title":"<code>add_hunters(ratio=0.05)</code>","text":"<p>\u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>ratio</code> <code>float | None</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u7684\u6bd4\u4f8b\u3002\u9ed8\u8ba4\u4e3a0.05\u3002</p> <code>0.05</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ActorsList[Hunter]</code> <p>\u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def add_hunters(self, ratio: Optional[float | str] = 0.05) -&gt; ActorsList[Hunter]:\n    \"\"\"\n    \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\u3002\n\n    Args:\n        ratio (float | None): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u6bd4\u4f8b\u3002\u9ed8\u8ba4\u4e3a0.05\u3002\n\n    Returns:\n        \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\u3002\n    \"\"\"\n    available_cells = self.major_layer.cells_lst.select({\"is_water\": False})\n    ratio = float(ratio)\n    if ratio.is_integer():\n        num = int(ratio)\n    else:\n        num = int(len(available_cells) * ratio)\n    hunters = available_cells.random.new(Hunter, size=num, replace=False)\n    init_min, init_max = hunters[0].params.init_size\n    hunters.apply(lambda h: h.random_size(init_min, init_max))\n    return hunters\n</code></pre>"},{"location":"api/env/#src.api.env.Env.add_initial_farmers","title":"<code>add_initial_farmers(farmer_cls=Farmer, num=0)</code>","text":"<p>\u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e9b\u53ef\u8015\u5730\uff0c\u5c06\u521d\u59cb\u7684\u519c\u6c11\u653e\u4e0a\u53bb\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>farmer_cls</code> <code>type</code> <p>\u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002</p> <code>Farmer</code> <code>num</code> <code>int</code> <p>\u8981\u6dfb\u52a0\u7684\u519c\u6c11\u6570\u91cf\u3002</p> <code>0</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ActorsList[Farmer | RiceFarmer]</code> <p>\u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def add_initial_farmers(\n    self, farmer_cls: type = Farmer, num: int = 0\n) -&gt; ActorsList[Farmer | RiceFarmer]:\n    \"\"\"\n    \u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\uff0c\u968f\u673a\u9009\u62e9\u4e00\u4e9b\u53ef\u8015\u5730\uff0c\u5c06\u521d\u59cb\u7684\u519c\u6c11\u653e\u4e0a\u53bb\u3002\n\n    Args:\n        farmer_cls (type): \u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002\n        num (int): \u8981\u6dfb\u52a0\u7684\u519c\u6c11\u6570\u91cf\u3002\n\n    Returns:\n        \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n    \"\"\"\n    if num &lt;= 0:\n        return ActorsList(self.model, [])\n\n    # \u6839\u636e\u519c\u6c11\u7c7b\u578b\u9009\u62e9\u5408\u9002\u7684\u53ef\u8015\u5730\n    if farmer_cls == RiceFarmer:\n        arable = self.dem.get_raster(\"is_rice_arable\").reshape(self.dem.shape2d)\n    else:\n        arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n\n    arable_cells = ActorsList(self.model, self.dem.array_cells[arable.astype(bool)])\n    # \u8fc7\u6ee4\u51fa\u6ca1\u6709\u4e3b\u4f53\u7684\u683c\u5b50\n    valid_cells = arable_cells.select(lambda c: c.agents.has() == 0)\n\n    # \u5982\u679c\u53ef\u8015\u5730\u6570\u91cf\u4e0d\u591f\uff0c\u5219\u51cf\u5c11\u519c\u6c11\u6570\u91cf\n    farmers_num = min(num, len(valid_cells))\n    if farmers_num == 0:\n        return ActorsList(self.model, [])\n\n    # \u968f\u673a\u5728\u6ee1\u8db3\u6761\u4ef6\u7684\u6591\u5757\u4e0a\u521b\u5efa\u519c\u6c11\n    farmers = valid_cells.random.new(\n        farmer_cls,\n        size=farmers_num,\n        replace=False,\n    )\n    # \u6839\u636e init_size \u53c2\u6570\u968f\u673a\u5206\u914d\u521d\u59cb\u4eba\u53e3\u89c4\u6a21\n    init_min, init_max = farmers[0].params.init_size\n    farmers.apply(lambda f: f.random_size(init_min, init_max))\n    return farmers\n</code></pre>"},{"location":"api/env/#src.api.env.Env.initialize","title":"<code>initialize()</code>","text":"<p>Initialize environment: setup DEM and add initial hunters and farmers.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def initialize(self):\n    \"\"\"Initialize environment: setup DEM and add initial hunters and farmers.\"\"\"\n    self.setup_dem()\n    self.add_hunters(self.p.init_hunters)\n    self.add_initial_farmers(Farmer, self.p.get(\"init_farmers\", 0))\n    self.add_initial_farmers(RiceFarmer, self.p.get(\"init_rice_farmers\", 0))\n</code></pre>"},{"location":"api/env/#src.api.env.Env.setup_dem","title":"<code>setup_dem()</code>","text":"<p>\u521b\u5efa\u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u5e76\u8bbe\u7f6e\u4e3a\u4e3b\u56fe\u5c42</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def setup_dem(self):\n    \"\"\"\u521b\u5efa\u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u5e76\u8bbe\u7f6e\u4e3a\u4e3b\u56fe\u5c42\"\"\"\n    self.dem = self.create_module(\n        raster_file=self.ds.dem,\n        cell_cls=CompetingCell,\n        attr_name=\"elevation\",\n        major_layer=True,\n        apply_raster=True,\n    )\n    arr = self._open_rasterio(self.ds.slope)\n    self.dem.apply_raster(arr, attr_name=\"slope\")\n    arr = self._open_rasterio(self.ds.lim_h)\n    self.dem.apply_raster(arr, attr_name=\"lim_h\")\n</code></pre>"},{"location":"api/env/#src.api.env.Env.step","title":"<code>step()</code>","text":"<p>\u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a 1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf 2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316 3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/env.py</code> <pre><code>def step(self) -&gt; None:\n    \"\"\"\n    \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n    1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n    2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n    3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n    \"\"\"\n    self.add_farmers(Farmer)\n    self.add_farmers(RiceFarmer)\n</code></pre>"},{"location":"api/farmer/","title":"\u519c\u6c11","text":""},{"location":"api/farmer/#_1","title":"\u519c\u6c11","text":"<p>               Bases: <code>SiteGroup</code></p> <p>\u519c\u6c11</p> Source code in <code>src/api/farmer.py</code> <pre><code>class Farmer(SiteGroup):\n    \"\"\"\n    \u519c\u6c11\n    \"\"\"\n\n    def __init__(self, *arg, **kwargs) -&gt; None:\n        super().__init__(*arg, **kwargs)\n        self._area = self.params.area\n        self._growth_rate = self.params.growth_rate\n        self.size = kwargs.get(\"size\", self.min_size)\n\n    @property\n    def growth_rate(self) -&gt; float:\n        \"\"\"\u4eba\u53e3\u589e\u957f\u7387\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u7684`growth_rate`\u4e2d\u8c03\u8282\uff0c\u4e5f\u53ef\u4ee5\u56e0\u590d\u6742\u5316\u800c\u4e0b\u964d\u3002\u8bbe\u7f6e\u65b0\u7684\u4eba\u53e3\u589e\u957f\u7387\u65f6\u4e0d\u80fd\u4e0b\u964d\u5230\u8d1f\u589e\u957f\u3002\"\"\"\n        return getattr(self, \"_growth_rate\", 0.0)\n\n    @growth_rate.setter\n    def growth_rate(self, growth_rate) -&gt; None:\n        \"\"\"\u4eba\u53e3\u589e\u957f\u7387\u53d8\u5316\"\"\"\n        growth_rate = max(growth_rate, 0.0)\n        self._growth_rate = float(growth_rate)\n\n    @property\n    def area(self) -&gt; float:\n        \"\"\"\u8015\u5730\u9762\u79ef\u3002\u5f53\u53d1\u751f\u590d\u6742\u5316\u65f6\uff0c\u7406\u8bba\u4e0a\u8015\u5730\u9762\u79ef\u4f1a\u589e\u52a0\u4e00\u5757\uff082km * 2km\uff09\u7684\u571f\u5730\uff0c\u4f46\u8fd9\u5757\u571f\u5730\u4f1a\u56e0\u4e3a\u590d\u6742\u5316\u800c\u53d8\u7684\u7565\u5c0f\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n\n        $area = init_area * (2 - complexity)$\n\n        \u5176\u4e2dcomplexity\u4e3a\u590d\u6742\u5316\u65f6\u7684\u635f\u5931\u7cfb\u6570\uff0c\u5e94\u8be5\u57280-1\u4e4b\u95f4\u3002\n        \"\"\"\n        return getattr(self, \"_area\", 0.0)\n\n    @area.setter\n    def area(self, area: float) -&gt; None:\n        \"\"\"\u8015\u5730\u9762\u79ef\u53d8\u5316\uff0c\u4f1a\u4e0d\u65ad\u589e\u52a0\"\"\"\n        area = max(self.area, area)\n        self._area = float(area)\n\n    @SiteGroup.size.setter\n    def size(self, size: Number) -&gt; None:\n        \"\"\"\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236\"\"\"\n        SiteGroup.size.fset(self, size)\n        if size &gt; self.max_size:\n            self.complicate()\n\n    @property\n    def max_size(self) -&gt; float:\n        \"\"\"\u6700\u5927\u4eba\u53e3\u6570\u91cf\n\n        Note:\n            \u53c2\u8003\u88f4\u674e\u5c97\u65f6\u671f\uff089000-7000 BP\uff09\uff0c\u4eba\u5747\u8015\u5730\u4e3a0.008\u5e73\u65b9\u516c\u91cc\uff08\u4e54\u7389 2010\uff09\uff0c\n            \u7ed3\u5408\u534e\u5357\u6c14\u5019\u6761\u4ef6\u4e0b\u8f83\u9ad8\u7684\u751f\u4ea7\u529b\u548c\u66f4\u5145\u6c9b\u7684\u81ea\u7136\u8d44\u6e90\uff0c\u5c06\u6240\u9700\u4eba\u5747\u8015\u5730\u8bbe\u7f6e\u4e3a0.004\u5e73\u65b9\u516c\u91cc\uff0c\n            \u90a3\u4e48\u8be5\u5355\u4f4d\u4eba\u53e3\u4e0a\u9650\u5373\u03c0 * 2 * 2 / 0.004=3142\u4eba\u3002\n        \"\"\"\n        capital_area = self.params.get(\"capital_area\")\n        if not capital_area:\n            raise ValueError(\"Capital area is not set in params.\")\n        max_size = np.pi * self.area**2 / capital_area\n        return np.ceil(max_size)\n\n    def _convert_to_hunter(self) -&gt; Hunter | Self:\n        # \u5982\u679c\u4eba\u6570\u5927\u4e8e\u4e0d\u80fd\u8f6c\u5316\u7684\u9608\u503c\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u81ea\u8eab\n        cond1 = self.size &lt;= self.params.convert_threshold.get(\"to_hunter\")\n        # \u6982\u7387\u5c0f\u4e8e\u8f6c\u5316\u6982\u7387\n        cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_hunter\", 0.0)\n        # \u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u5c31\u8f6c\u5316\n        return self._cell.convert(self, to=\"Hunter\") if cond1 &amp; cond2 else self\n\n    def _convert_to_rice(self) -&gt; RiceFarmer | Self:\n        \"\"\"\u8f6c\u5316\u6210\u6c34\u7a3b\u519c\u6c11\"\"\"\n        # \u4eba\u6570\u5927\u4e8e\u6c34\u7a3b\u6240\u9700\u6700\u5c0f\u4eba\u6570\n        cond1 = self.size &gt;= self.params.convert_threshold.get(\"to_rice\", 0)\n        # \u6982\u7387\u5c0f\u4e8e\u8f6c\u5316\u6982\u7387\n        cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_rice\", 0.0)\n        # \u6240\u5904\u5730\u5757\u9002\u5b9c\u6c34\u7a3b\u751f\u5b58\n        cond3 = self._cell.is_rice_arable\n        return (\n            self._cell.convert(self, to=\"RiceFarmer\") if cond1 &amp; cond2 &amp; cond3 else self\n        )\n\n    @alive_required\n    def convert(self) -&gt; Self | Hunter | RiceFarmer:\n        \"\"\"\u8f6c\u6362\uff0c\u5148\u5224\u65ad\u662f\u5426\u8f6c\u5316\u6210\u72e9\u730e\u91c7\u96c6\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u518d\u770b\u770b\u662f\u5426\u8f6c\u6362\u6210\u6c34\u7a3b\u519c\u6c11\"\"\"\n        agent = self._convert_to_hunter()\n        return agent if agent is not self else self._convert_to_rice()\n\n    @alive_required\n    def diffuse(\n        self, group_range: Tuple[Number] | None = None, diffuse_prob: Number = None\n    ) -&gt; Self:\n        \"\"\"\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002\n        \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002\n        \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc`diffuse_prob`\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002\n        \"\"\"\n        # \u68c0\u6d4b\u6982\u7387\u662f\u5426\u591f\u4ea7\u751f\u5c0f\u961f\n        if diffuse_prob is None:\n            diffuse_prob = self.params.get(\"diffuse_prob\", 0.0)\n        if self.random.random() &lt; diffuse_prob:\n            return super().diffuse(group_range=group_range)\n        return None\n\n    @alive_required\n    def complicate(self, complexity: float | None = None) -&gt; Self:\n        \"\"\"\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002\"\"\"\n        if complexity is None:\n            complexity = self.params.get(\"complexity\", 0.0)\n        self.growth_rate *= 1 - complexity\n        self.area += self.params.area * (1 - complexity)\n\n    def loss(self) -&gt; None:\n        \"\"\"\u519c\u6c11\u7684\u635f\u5931\uff0c\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\"\"\"\n        if self.random.random() &lt; self.params.loss.prob:\n            self.size *= 1 - self.params.loss.rate\n\n    def step(self):\n        super().step()\n        self.loss()\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.area","title":"<code>area</code>  <code>property</code> <code>writable</code>","text":"<p>\u8015\u5730\u9762\u79ef\u3002\u5f53\u53d1\u751f\u590d\u6742\u5316\u65f6\uff0c\u7406\u8bba\u4e0a\u8015\u5730\u9762\u79ef\u4f1a\u589e\u52a0\u4e00\u5757\uff082km * 2km\uff09\u7684\u571f\u5730\uff0c\u4f46\u8fd9\u5757\u571f\u5730\u4f1a\u56e0\u4e3a\u590d\u6742\u5316\u800c\u53d8\u7684\u7565\u5c0f\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a</p> <p>$area = init_area * (2 - complexity)$</p> <p>\u5176\u4e2dcomplexity\u4e3a\u590d\u6742\u5316\u65f6\u7684\u635f\u5931\u7cfb\u6570\uff0c\u5e94\u8be5\u57280-1\u4e4b\u95f4\u3002</p>"},{"location":"api/farmer/#src.api.farmer.Farmer.growth_rate","title":"<code>growth_rate</code>  <code>property</code> <code>writable</code>","text":"<p>\u4eba\u53e3\u589e\u957f\u7387\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u7684<code>growth_rate</code>\u4e2d\u8c03\u8282\uff0c\u4e5f\u53ef\u4ee5\u56e0\u590d\u6742\u5316\u800c\u4e0b\u964d\u3002\u8bbe\u7f6e\u65b0\u7684\u4eba\u53e3\u589e\u957f\u7387\u65f6\u4e0d\u80fd\u4e0b\u964d\u5230\u8d1f\u589e\u957f\u3002</p>"},{"location":"api/farmer/#src.api.farmer.Farmer.max_size","title":"<code>max_size</code>  <code>property</code>","text":"<p>\u6700\u5927\u4eba\u53e3\u6570\u91cf</p> Note <p>\u53c2\u8003\u88f4\u674e\u5c97\u65f6\u671f\uff089000-7000 BP\uff09\uff0c\u4eba\u5747\u8015\u5730\u4e3a0.008\u5e73\u65b9\u516c\u91cc\uff08\u4e54\u7389 2010\uff09\uff0c \u7ed3\u5408\u534e\u5357\u6c14\u5019\u6761\u4ef6\u4e0b\u8f83\u9ad8\u7684\u751f\u4ea7\u529b\u548c\u66f4\u5145\u6c9b\u7684\u81ea\u7136\u8d44\u6e90\uff0c\u5c06\u6240\u9700\u4eba\u5747\u8015\u5730\u8bbe\u7f6e\u4e3a0.004\u5e73\u65b9\u516c\u91cc\uff0c \u90a3\u4e48\u8be5\u5355\u4f4d\u4eba\u53e3\u4e0a\u9650\u5373\u03c0 * 2 * 2 / 0.004=3142\u4eba\u3002</p>"},{"location":"api/farmer/#src.api.farmer.Farmer.complicate","title":"<code>complicate(complexity=None)</code>","text":"<p>\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/farmer.py</code> <pre><code>@alive_required\ndef complicate(self, complexity: float | None = None) -&gt; Self:\n    \"\"\"\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002\"\"\"\n    if complexity is None:\n        complexity = self.params.get(\"complexity\", 0.0)\n    self.growth_rate *= 1 - complexity\n    self.area += self.params.area * (1 - complexity)\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.convert","title":"<code>convert()</code>","text":"<p>\u8f6c\u6362\uff0c\u5148\u5224\u65ad\u662f\u5426\u8f6c\u5316\u6210\u72e9\u730e\u91c7\u96c6\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u518d\u770b\u770b\u662f\u5426\u8f6c\u6362\u6210\u6c34\u7a3b\u519c\u6c11</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/farmer.py</code> <pre><code>@alive_required\ndef convert(self) -&gt; Self | Hunter | RiceFarmer:\n    \"\"\"\u8f6c\u6362\uff0c\u5148\u5224\u65ad\u662f\u5426\u8f6c\u5316\u6210\u72e9\u730e\u91c7\u96c6\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u518d\u770b\u770b\u662f\u5426\u8f6c\u6362\u6210\u6c34\u7a3b\u519c\u6c11\"\"\"\n    agent = self._convert_to_hunter()\n    return agent if agent is not self else self._convert_to_rice()\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.diffuse","title":"<code>diffuse(group_range=None, diffuse_prob=None)</code>","text":"<p>\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002 \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002 \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc<code>diffuse_prob</code>\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/farmer.py</code> <pre><code>@alive_required\ndef diffuse(\n    self, group_range: Tuple[Number] | None = None, diffuse_prob: Number = None\n) -&gt; Self:\n    \"\"\"\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002\n    \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002\n    \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc`diffuse_prob`\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002\n    \"\"\"\n    # \u68c0\u6d4b\u6982\u7387\u662f\u5426\u591f\u4ea7\u751f\u5c0f\u961f\n    if diffuse_prob is None:\n        diffuse_prob = self.params.get(\"diffuse_prob\", 0.0)\n    if self.random.random() &lt; diffuse_prob:\n        return super().diffuse(group_range=group_range)\n    return None\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.loss","title":"<code>loss()</code>","text":"<p>\u519c\u6c11\u7684\u635f\u5931\uff0c\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/farmer.py</code> <pre><code>def loss(self) -&gt; None:\n    \"\"\"\u519c\u6c11\u7684\u635f\u5931\uff0c\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\"\"\"\n    if self.random.random() &lt; self.params.loss.prob:\n        self.size *= 1 - self.params.loss.rate\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.size","title":"<code>size(size)</code>","text":"<p>\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/farmer.py</code> <pre><code>@SiteGroup.size.setter\ndef size(self, size: Number) -&gt; None:\n    \"\"\"\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236\"\"\"\n    SiteGroup.size.fset(self, size)\n    if size &gt; self.max_size:\n        self.complicate()\n</code></pre>"},{"location":"api/farmer/#_2","title":"\u6c34\u7a3b\u519c\u6c11","text":"<p>               Bases: <code>Farmer</code></p> <p>\u79cd\u690d\u6c34\u7a3b\u7684\u519c\u6c11</p> Source code in <code>src/api/rice_farmer.py</code> <pre><code>class RiceFarmer(Farmer):\n    \"\"\"\u79cd\u690d\u6c34\u7a3b\u7684\u519c\u6c11\"\"\"\n\n    def convert(self) -&gt; Farmer | Self:\n        \"\"\"\u53ef\u4ee5\u8f6c\u5316\u4f1a\u79cd\u690d\u666e\u901a\u6c34\u7a3b\u7684\u519c\u6c11\"\"\"\n        cond1 = self.size &lt; self.params.convert_threshold.get(\"to_farmer\")\n        cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_farmer\", 0.0)\n        return self._cell.convert(self, to=\"Farmer\") if cond1 &amp; cond2 else self\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.RiceFarmer.convert","title":"<code>convert()</code>","text":"<p>\u53ef\u4ee5\u8f6c\u5316\u4f1a\u79cd\u690d\u666e\u901a\u6c34\u7a3b\u7684\u519c\u6c11</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/rice_farmer.py</code> <pre><code>def convert(self) -&gt; Farmer | Self:\n    \"\"\"\u53ef\u4ee5\u8f6c\u5316\u4f1a\u79cd\u690d\u666e\u901a\u6c34\u7a3b\u7684\u519c\u6c11\"\"\"\n    cond1 = self.size &lt; self.params.convert_threshold.get(\"to_farmer\")\n    cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_farmer\", 0.0)\n    return self._cell.convert(self, to=\"Farmer\") if cond1 &amp; cond2 else self\n</code></pre>"},{"location":"api/hunter/","title":"\u72e9\u730e\u91c7\u96c6\u8005","text":"<p>               Bases: <code>SiteGroup</code></p> <p>\u72e9\u730e\u91c7\u96c6\u8005</p> Source code in <code>src/api/hunter.py</code> <pre><code>class Hunter(SiteGroup):\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\"\"\"\n\n    @property\n    def max_size(self) -&gt; int:\n        \"\"\"\u5355\u4f4d\u4e3b\u4f53\u4eba\u53e3\u6700\u5927\u503c\uff1a\u666e\u901a\u60c5\u51b5100\uff0c\u4e34\u8fd1\u6c34\u4f53500\"\"\"\n        if not self.on_earth:\n            return 100_000_000\n\n        # \u68c0\u67e5\u662f\u5426\u4e34\u8fd1\u6c34\u4f53\n        if self.is_near_water():\n            return self.params.max_size_water\n        return self.params.max_size\n\n    def is_near_water(self) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u662f\u5426\u4e34\u8fd1\u6c34\u4f53\uff08\u76f8\u90bb\u683c\u5b50\u6709\u6c34\u4f53\uff09\n\n        Returns:\n            \u5982\u679c\u76f8\u90bb\u683c\u5b50\uff08\u5305\u62ec\u5bf9\u89d2\u7ebf\uff09\u6709\u6c34\u4f53\uff0c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n        \"\"\"\n        if not self.on_earth:\n            return False\n        cells = self.at.neighboring(radius=1, moore=True, include_center=False)\n        return any(cells.apply(lambda c: c.is_water))\n\n    @property\n    def is_complex(self) -&gt; bool:\n        \"\"\"\u8d85\u8fc7\u5b9a\u5c45\u89c4\u6a21\u7684\u9608\u503c\uff0c\u4f1a\u53d8\u6210\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\u3002\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\u91cc\u7684`is_complex`\u53ef\u4ee5\u8c03\u8282\u8be5\u9608\u503c\u3002\n\n        returns:\n            \u662f\u5426\u662f\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\n        \"\"\"\n        return self.size &gt; self.params.is_complex if self.on_earth else False\n\n    @alive_required\n    def merge(self, other_hunter: Hunter) -&gt; bool:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5408\u5e76\uff0c\u4fdd\u8bc1\u4eba\u53e3\u5b88\u6052\u3002\n\n        Parameters:\n            other_hunter: \u53e6\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u3002\n\n        Returns:\n            \u662f\u5426\u88ab\u5408\u5e76\u4e86\u3002\n        \"\"\"\n        # \u5408\u5e76\u540e\u603b\u4eba\u53e3 = \u4e24\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u4e4b\u548c\uff08\u786e\u4fdd\u4eba\u53e3\u5b88\u6052\uff09\n        other_hunter.size = other_hunter.size + self.size\n        self.die()\n\n    def diffuse(self, group_range: Tuple[Number] | None = None) -&gt; Self:\n        \"\"\"\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb\n\n        Args:\n            group_range (Tuple[Number, Number] | None):\n                \u65b0\u4e3b\u4f53\u7684\u89c4\u6a21\u8303\u56f4\uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u4e3b\u4f53\u7684\u89c4\u6a21\u53c2\u6570\u3002\n\n        returns:\n            \u5206\u6563\u540e\u7684\u7ed3\u679c\u3002\n            - \u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002\n            - \u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002\n        \"\"\"\n        if self.size &gt;= self.max_size:\n            return super().diffuse(group_range=group_range)\n        return None\n\n    @alive_required\n    def convert(self, radius: int = 1, moore: bool = False) -&gt; Self:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5411\u519c\u6c11\u8f6c\u5316\uff1a\n        1. \u4f18\u5148\u8f6c\u5316\u6210\u666e\u901a\u519c\u6c11\n        2. \u5176\u6b21\u8003\u8651\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\n        \"\"\"\n        agent = self._convert_to_farmer(radius=radius, moore=moore)\n        # agent \u4e0d\u662f\u81ea\u5df1\u8bf4\u660e\u8f6c\u5316\u6210\u529f\n        if agent is not self:\n            return agent\n        # \u6ca1\u6210\u529f\u518d\u770b\u8f6c\u5316\u6c34\u7a3b\u519c\u6c11\u7684\u7ed3\u679c\n        return self._convert_to_rice(radius=radius, moore=moore)\n\n    def _convert_to_farmer(self, radius: int = 1, moore: bool = False) -&gt; Self | Farmer:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n        1. \u5468\u56f4\u6709\u519c\u6c11\n        2. \u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        3. \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002\n            moore (bool): \u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c\n            \u5373\u641c\u7d228\u4e34\u57df\uff0c\u5305\u62ec\u5bf9\u89d2\u7ebf\u7684\u56db\u4e2a\u683c\u5b50\u3002\n            \u9ed8\u8ba4\u4e0d\u542f\u7528\uff08\u5373\u4ec5\u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u3002\n\n        returns:\n            \u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002\n            \u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002\n        \"\"\"\n        # \u5468\u56f4\u6709\u519c\u6c11\n        cells = self.at.neighboring(radius=radius, moore=moore)\n        cond1 = any(cells.apply(lambda c: c.agents.has(Farmer)))\n        # \u4e14\u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        cond2 = self.at.is_arable\n        # \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n        convert_prob = self.params.convert_prob.get(\"to_farmer\", 0.0)\n        cond3 = self.random.random() &lt; convert_prob\n        # \u540c\u65f6\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u5316\u4e3a\u519c\u6c11\n        return self.at.convert(self, \"Farmer\") if cond1 and cond2 and cond3 else self\n\n    def _convert_to_rice(\n        self, radius: int = 1, moore: bool = False\n    ) -&gt; Self | RiceFarmer:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n        1. \u5468\u56f4\u6709\u6c34\u7a3b\u519c\u6c11\n        2. \u76ee\u524d\u7684\u571f\u5730\u662f\u6ee1\u8db3\u6c34\u7a3b\u751f\u957f\u6761\u4ef6\u7684\u53ef\u8015\u5730\n        3. \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002\n            moore (bool): \u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c\n            \u5373\u641c\u7d228\u4e34\u57df\uff0c\u5305\u62ec\u5bf9\u89d2\u7ebf\u7684\u56db\u4e2a\u683c\u5b50\u3002\n            \u9ed8\u8ba4\u4e0d\u542f\u7528\uff08\u5373\u4ec5\u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u3002\n\n        returns:\n            \u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002\n            \u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002\n        \"\"\"\n        # \u5468\u56f4\u6709\u6c34\u7a3b\u519c\u6c11\n        cells = self.at.neighboring(radius=radius, moore=moore)\n        cond1 = any(cells.apply(lambda c: c.agents.has(RiceFarmer)))\n        # \u4e14\u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        cond2 = self.at.is_rice_arable\n        # \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n        convert_prob = self.params.convert_prob.get(\"to_rice\", 0.0)\n        cond3 = self.random.random() &lt; convert_prob\n        # \u540c\u65f6\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u5316\u4e3a\u519c\u6c11\n        return (\n            self.at.convert(self, \"RiceFarmer\") if cond1 and cond2 and cond3 else self\n        )\n\n    @alive_required\n    def move_one(self, radius: int = 1, cell_now: Optional[PatchCell] = None) -&gt; None:\n        \"\"\"\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002\n\n        Note:\n            *\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002\n            \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002\n            \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002*\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c\n\n        returns:\n            \u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n        \"\"\"\n        if self.is_complex:\n            return False\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5f53\u524d\u7684\u683c\u5b50\uff0c\u5c31\u4f7f\u7528\u5f53\u524d\u7684\u683c\u5b50\n        if cell_now is None:\n            cell_now = self.at\n        if new_cell := search_cell(self, cell_now, radius=radius):\n            self.move.to(new_cell)\n            return True\n        return False\n\n    def loss(self) -&gt; None:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u7684\u635f\u5931\uff0c\u6309\u6982\u7387\u51cf\u5c11\u4eba\u53e3\u3002\"\"\"\n        if self.random.random() &lt; self.params.loss.prob:\n            self.size *= 1 - self.params.loss.rate\n\n    def step(self):\n        \"\"\"step of a hunter.\"\"\"\n        super().step()\n        self.loss()\n        self.move_one()\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.is_complex","title":"<code>is_complex</code>  <code>property</code>","text":"<p>\u8d85\u8fc7\u5b9a\u5c45\u89c4\u6a21\u7684\u9608\u503c\uff0c\u4f1a\u53d8\u6210\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\u3002\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\u91cc\u7684<code>is_complex</code>\u53ef\u4ee5\u8c03\u8282\u8be5\u9608\u503c\u3002</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u662f\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005</p>"},{"location":"api/hunter/#src.api.hunter.Hunter.max_size","title":"<code>max_size</code>  <code>property</code>","text":"<p>\u5355\u4f4d\u4e3b\u4f53\u4eba\u53e3\u6700\u5927\u503c\uff1a\u666e\u901a\u60c5\u51b5100\uff0c\u4e34\u8fd1\u6c34\u4f53500</p>"},{"location":"api/hunter/#src.api.hunter.Hunter.convert","title":"<code>convert(radius=1, moore=False)</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5411\u519c\u6c11\u8f6c\u5316\uff1a 1. \u4f18\u5148\u8f6c\u5316\u6210\u666e\u901a\u519c\u6c11 2. \u5176\u6b21\u8003\u8651\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef convert(self, radius: int = 1, moore: bool = False) -&gt; Self:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5411\u519c\u6c11\u8f6c\u5316\uff1a\n    1. \u4f18\u5148\u8f6c\u5316\u6210\u666e\u901a\u519c\u6c11\n    2. \u5176\u6b21\u8003\u8651\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\n    \"\"\"\n    agent = self._convert_to_farmer(radius=radius, moore=moore)\n    # agent \u4e0d\u662f\u81ea\u5df1\u8bf4\u660e\u8f6c\u5316\u6210\u529f\n    if agent is not self:\n        return agent\n    # \u6ca1\u6210\u529f\u518d\u770b\u8f6c\u5316\u6c34\u7a3b\u519c\u6c11\u7684\u7ed3\u679c\n    return self._convert_to_rice(radius=radius, moore=moore)\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.diffuse","title":"<code>diffuse(group_range=None)</code>","text":"<p>\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>group_range</code> <code>Tuple[Number, Number] | None</code> <p>\u65b0\u4e3b\u4f53\u7684\u89c4\u6a21\u8303\u56f4\uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u4e3b\u4f53\u7684\u89c4\u6a21\u53c2\u6570\u3002</p> <code>None</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>Self</code> <p>\u5206\u6563\u540e\u7684\u7ed3\u679c\u3002</p> <code>Self</code> <ul> <li>\u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002</li> </ul> <code>Self</code> <ul> <li>\u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002</li> </ul> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>def diffuse(self, group_range: Tuple[Number] | None = None) -&gt; Self:\n    \"\"\"\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb\n\n    Args:\n        group_range (Tuple[Number, Number] | None):\n            \u65b0\u4e3b\u4f53\u7684\u89c4\u6a21\u8303\u56f4\uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u4e3b\u4f53\u7684\u89c4\u6a21\u53c2\u6570\u3002\n\n    returns:\n        \u5206\u6563\u540e\u7684\u7ed3\u679c\u3002\n        - \u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002\n        - \u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002\n    \"\"\"\n    if self.size &gt;= self.max_size:\n        return super().diffuse(group_range=group_range)\n    return None\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.is_near_water","title":"<code>is_near_water()</code>","text":"<p>\u68c0\u67e5\u662f\u5426\u4e34\u8fd1\u6c34\u4f53\uff08\u76f8\u90bb\u683c\u5b50\u6709\u6c34\u4f53\uff09</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u5982\u679c\u76f8\u90bb\u683c\u5b50\uff08\u5305\u62ec\u5bf9\u89d2\u7ebf\uff09\u6709\u6c34\u4f53\uff0c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>def is_near_water(self) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u662f\u5426\u4e34\u8fd1\u6c34\u4f53\uff08\u76f8\u90bb\u683c\u5b50\u6709\u6c34\u4f53\uff09\n\n    Returns:\n        \u5982\u679c\u76f8\u90bb\u683c\u5b50\uff08\u5305\u62ec\u5bf9\u89d2\u7ebf\uff09\u6709\u6c34\u4f53\uff0c\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\n    \"\"\"\n    if not self.on_earth:\n        return False\n    cells = self.at.neighboring(radius=1, moore=True, include_center=False)\n    return any(cells.apply(lambda c: c.is_water))\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.loss","title":"<code>loss()</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u7684\u635f\u5931\uff0c\u6309\u6982\u7387\u51cf\u5c11\u4eba\u53e3\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>def loss(self) -&gt; None:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u7684\u635f\u5931\uff0c\u6309\u6982\u7387\u51cf\u5c11\u4eba\u53e3\u3002\"\"\"\n    if self.random.random() &lt; self.params.loss.prob:\n        self.size *= 1 - self.params.loss.rate\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.merge","title":"<code>merge(other_hunter)</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5408\u5e76\uff0c\u4fdd\u8bc1\u4eba\u53e3\u5b88\u6052\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>other_hunter</code> <code>Hunter</code> <p>\u53e6\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u3002</p> \u5fc5\u9700 <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>bool</code> <p>\u662f\u5426\u88ab\u5408\u5e76\u4e86\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef merge(self, other_hunter: Hunter) -&gt; bool:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5408\u5e76\uff0c\u4fdd\u8bc1\u4eba\u53e3\u5b88\u6052\u3002\n\n    Parameters:\n        other_hunter: \u53e6\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u3002\n\n    Returns:\n        \u662f\u5426\u88ab\u5408\u5e76\u4e86\u3002\n    \"\"\"\n    # \u5408\u5e76\u540e\u603b\u4eba\u53e3 = \u4e24\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u4e4b\u548c\uff08\u786e\u4fdd\u4eba\u53e3\u5b88\u6052\uff09\n    other_hunter.size = other_hunter.size + self.size\n    self.die()\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.move_one","title":"<code>move_one(radius=1, cell_now=None)</code>","text":"<p>\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002</p> Note <p>\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002 \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002 \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>radius</code> <code>int</code> <p>\u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c</p> <code>1</code> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>None</code> <p>\u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef move_one(self, radius: int = 1, cell_now: Optional[PatchCell] = None) -&gt; None:\n    \"\"\"\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002\n\n    Note:\n        *\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002\n        \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002\n        \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002*\n\n    Args:\n        radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c\n\n    returns:\n        \u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n    \"\"\"\n    if self.is_complex:\n        return False\n    # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5f53\u524d\u7684\u683c\u5b50\uff0c\u5c31\u4f7f\u7528\u5f53\u524d\u7684\u683c\u5b50\n    if cell_now is None:\n        cell_now = self.at\n    if new_cell := search_cell(self, cell_now, radius=radius):\n        self.move.to(new_cell)\n        return True\n    return False\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.step","title":"<code>step()</code>","text":"<p>step of a hunter.</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/api/hunter.py</code> <pre><code>def step(self):\n    \"\"\"step of a hunter.\"\"\"\n    super().step()\n    self.loss()\n    self.move_one()\n</code></pre>"},{"location":"api/model/","title":"\u6a21\u578b\u5de5\u4f5c\u6d41","text":"<p>               Bases: <code>MainModel</code></p> <p>\u8fd0\u884c\u7684\u6a21\u578b</p> Source code in <code>src/core/model.py</code> <pre><code>class Model(MainModel):\n    \"\"\"\u8fd0\u884c\u7684\u6a21\u578b\"\"\"\n\n    def __deepcopy__(self, memo):\n        return self\n\n    def __getattr__(self, name: str):\n        # \u65ad\u70b9\u8bc6\u522b\n        if re.match(BKP, name):\n            return self.detect_breakpoints(name.replace(\"bkp_\", \"\"))\n        # \u8ba1\u7b97\u65ad\u70b9\u4e4b\u524d\u7684\u589e\u957f\u7387\n        if re.match(PRE, name):\n            return self.calc_rate(name.replace(\"pre_\", \"\"))[0]\n        # \u8ba1\u7b97\u65ad\u70b9\u4e4b\u540e\u7684\u589e\u957f\u7387\n        if re.match(POST, name):\n            return self.calc_rate(name.replace(\"post_\", \"\"))[1]\n        # \u8ba1\u6570\n        if kwargs := clean_name(name):\n            return counting(model=self, **kwargs)\n        return super().__getattribute__(name)\n\n    @property\n    def grid(self):\n        \"\"\"\u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\"\"\"\n        return self.nature.dem\n\n    @property\n    def farmers(self) -&gt; ActorsList:\n        \"\"\"\u519c\u6c11\u5217\u8868\"\"\"\n        return self.agents[Farmer]\n\n    @property\n    def hunters(self) -&gt; ActorsList:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\"\"\"\n        return self.agents[Hunter]\n\n    @property\n    def rice(self) -&gt; ActorsList:\n        \"\"\"\u79cd\u6c34\u7a3b\u7684\u519c\u6c11\u5217\u8868\"\"\"\n        return self.agents[RiceFarmer]\n\n    @lru_cache\n    def get_data_col(self, actor: ActorType) -&gt; pd.Series:\n        \"\"\"\u83b7\u53d6\u4e3b\u4f53\u7684\u6570\u636e\u5217\"\"\"\n        data = self.datacollector.get_model_vars_dataframe()\n        col_by = self.p.get(\"detect_bkp_by\", \"size\")\n        col = COL_NAMES[col_by].replace(\"breed\", actor)\n        return data[col]\n\n    @lru_cache\n    def detect_breakpoints(self, actor: ActorType) -&gt; int:\n        \"\"\"\u68c0\u6d4b\u67d0\u4e2a\u4e3b\u4f53\u6570\u91cf\u53d1\u5c55\u4e2d\u7684\u62d0\u70b9\u3002\n        Parameters:\n            actor: str\n                \u4e3b\u4f53\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f \"farmers\", \"hunters\", \"rice\" \u4e4b\u4e00\n\n        Returns:\n            int\n                \u62d0\u70b9\u7684\u7d22\u5f15\u3002\n        \"\"\"\n        n_bkps = self.p.get(\"n_bkps\", 1)\n        if n_bkps != 1:\n            raise NotImplementedError(\"Only support one breakpoint detection so far.\")\n        data = self.get_data_col(actor)\n        return detect_breakpoints(data, n_bkps=n_bkps)\n\n    @lru_cache\n    def calc_rate(self, actor: ActorType) -&gt; Tuple[float, float]:\n        \"\"\"\u8ba1\u7b97\u67d0\u4e2a\u4e3b\u4f53\u5728\u65ad\u70b9\u524d\u540e\u7684\u7ebf\u6027\u589e\u957f\u7387\uff08\u659c\u7387\uff09\u3002\"\"\"\n        data = self.get_data_col(actor)\n        bkp = self.detect_breakpoints(actor)\n\n        def calculate_slope(series: pd.Series) -&gt; float:\n            if len(series) &lt;= 1:\n                return 0\n            x = np.arange(len(series))\n            slope, _, _, _, _ = stats.linregress(x, series)\n            return slope\n\n        before_rate = calculate_slope(data[: bkp + 1])\n        after_rate = calculate_slope(data[bkp:])\n\n        return before_rate, after_rate\n\n    def _inspect_sources(self, breed_cls) -&gt; Dict[str, int]:\n        \"\"\"\u83b7\u53d6\u6765\u6e90\u4e8e\u67d0\u79cd\u4eba\u7684\u8f6c\u6362\u7ed3\u679c\n\n        Args:\n            breed_cls: Agent class (Farmer, Hunter, or RiceFarmer)\n        \"\"\"\n        if breed_cls not in {Farmer, Hunter, RiceFarmer}:\n            raise TypeError(f\"Invalid breed {breed_cls}.\")\n        # Use breed name (class.__name__) for source attribute\n        breed_name = breed_cls.__name__\n        total = self.agents.select({\"source\": breed_name})\n        # Use agent_type parameter to filter by class type\n        farmers = total.select(agent_type=Farmer)\n        hunters = total.select(agent_type=Hunter)\n        rice = total.select(agent_type=RiceFarmer)\n        return {\n            \"farmers_end\": len(farmers),\n            \"hunters_end\": len(hunters),\n            \"rice_end\": len(rice),\n            \"total_end\": len(total),\n        }\n\n    def export_conversion_data(self) -&gt; None:\n        \"\"\"\u5bfc\u51fa\u8f6c\u6362\u8fc7\u7a0b\"\"\"\n        # Ensure output directory exists\n        self.outpath.mkdir(parents=True, exist_ok=True)\n        return pd.DataFrame(\n            {\n                \"farmer_init\": self._inspect_sources(Farmer),\n                \"hunter_init\": self._inspect_sources(Hunter),\n                \"rice_init\": self._inspect_sources(RiceFarmer),\n            }\n        ).to_csv(self.outpath / f\"repeat_{self.run_id}_conversion.csv\")\n\n    def step(self) -&gt; None:\n        \"\"\"\u6bcf\u4e00\u6b65\u8fd0\u884c\u540e\uff0c\u6536\u96c6\u6570\u636e\"\"\"\n        self.do_each(\"step\", order=(\"nature\", \"human\"))\n        self.agents.shuffle_do(\"step\")\n        self.datacollector.collect(self)\n\n    def end(self):\n        \"\"\"\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n        self.plot.dynamic()\n        self.plot.heatmap()\n        # self.actors.plot.hist(\n        #     attr=\"size\", savefig=self.outpath / f\"repeat_{self.run_id}_hist.jpg\"\n        # )\n        self.export_conversion_data()\n\n    @property\n    def plot(self) -&gt; ModelViz:\n        \"\"\"\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n        save_fig = self.params.get(\"save_plots\", False)\n        path = self.outpath if save_fig else None\n        return ModelViz(model=self, save_path=path)\n</code></pre>"},{"location":"api/model/#src.core.model.Model.farmers","title":"<code>farmers</code>  <code>property</code>","text":"<p>\u519c\u6c11\u5217\u8868</p>"},{"location":"api/model/#src.core.model.Model.grid","title":"<code>grid</code>  <code>property</code>","text":"<p>\u6570\u5b57\u9ad8\u7a0b\u6a21\u578b</p>"},{"location":"api/model/#src.core.model.Model.hunters","title":"<code>hunters</code>  <code>property</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868</p>"},{"location":"api/model/#src.core.model.Model.plot","title":"<code>plot</code>  <code>property</code>","text":"<p>\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316</p>"},{"location":"api/model/#src.core.model.Model.rice","title":"<code>rice</code>  <code>property</code>","text":"<p>\u79cd\u6c34\u7a3b\u7684\u519c\u6c11\u5217\u8868</p>"},{"location":"api/model/#src.core.model.Model.calc_rate","title":"<code>calc_rate(actor)</code>  <code>cached</code>","text":"<p>\u8ba1\u7b97\u67d0\u4e2a\u4e3b\u4f53\u5728\u65ad\u70b9\u524d\u540e\u7684\u7ebf\u6027\u589e\u957f\u7387\uff08\u659c\u7387\uff09\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/core/model.py</code> <pre><code>@lru_cache\ndef calc_rate(self, actor: ActorType) -&gt; Tuple[float, float]:\n    \"\"\"\u8ba1\u7b97\u67d0\u4e2a\u4e3b\u4f53\u5728\u65ad\u70b9\u524d\u540e\u7684\u7ebf\u6027\u589e\u957f\u7387\uff08\u659c\u7387\uff09\u3002\"\"\"\n    data = self.get_data_col(actor)\n    bkp = self.detect_breakpoints(actor)\n\n    def calculate_slope(series: pd.Series) -&gt; float:\n        if len(series) &lt;= 1:\n            return 0\n        x = np.arange(len(series))\n        slope, _, _, _, _ = stats.linregress(x, series)\n        return slope\n\n    before_rate = calculate_slope(data[: bkp + 1])\n    after_rate = calculate_slope(data[bkp:])\n\n    return before_rate, after_rate\n</code></pre>"},{"location":"api/model/#src.core.model.Model.detect_breakpoints","title":"<code>detect_breakpoints(actor)</code>  <code>cached</code>","text":"<p>\u68c0\u6d4b\u67d0\u4e2a\u4e3b\u4f53\u6570\u91cf\u53d1\u5c55\u4e2d\u7684\u62d0\u70b9\u3002 Parameters:     actor: str         \u4e3b\u4f53\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f \"farmers\", \"hunters\", \"rice\" \u4e4b\u4e00</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>int</code> <p>int \u62d0\u70b9\u7684\u7d22\u5f15\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/core/model.py</code> <pre><code>@lru_cache\ndef detect_breakpoints(self, actor: ActorType) -&gt; int:\n    \"\"\"\u68c0\u6d4b\u67d0\u4e2a\u4e3b\u4f53\u6570\u91cf\u53d1\u5c55\u4e2d\u7684\u62d0\u70b9\u3002\n    Parameters:\n        actor: str\n            \u4e3b\u4f53\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f \"farmers\", \"hunters\", \"rice\" \u4e4b\u4e00\n\n    Returns:\n        int\n            \u62d0\u70b9\u7684\u7d22\u5f15\u3002\n    \"\"\"\n    n_bkps = self.p.get(\"n_bkps\", 1)\n    if n_bkps != 1:\n        raise NotImplementedError(\"Only support one breakpoint detection so far.\")\n    data = self.get_data_col(actor)\n    return detect_breakpoints(data, n_bkps=n_bkps)\n</code></pre>"},{"location":"api/model/#src.core.model.Model.end","title":"<code>end()</code>","text":"<p>\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/core/model.py</code> <pre><code>def end(self):\n    \"\"\"\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n    self.plot.dynamic()\n    self.plot.heatmap()\n    # self.actors.plot.hist(\n    #     attr=\"size\", savefig=self.outpath / f\"repeat_{self.run_id}_hist.jpg\"\n    # )\n    self.export_conversion_data()\n</code></pre>"},{"location":"api/model/#src.core.model.Model.export_conversion_data","title":"<code>export_conversion_data()</code>","text":"<p>\u5bfc\u51fa\u8f6c\u6362\u8fc7\u7a0b</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/core/model.py</code> <pre><code>def export_conversion_data(self) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u8f6c\u6362\u8fc7\u7a0b\"\"\"\n    # Ensure output directory exists\n    self.outpath.mkdir(parents=True, exist_ok=True)\n    return pd.DataFrame(\n        {\n            \"farmer_init\": self._inspect_sources(Farmer),\n            \"hunter_init\": self._inspect_sources(Hunter),\n            \"rice_init\": self._inspect_sources(RiceFarmer),\n        }\n    ).to_csv(self.outpath / f\"repeat_{self.run_id}_conversion.csv\")\n</code></pre>"},{"location":"api/model/#src.core.model.Model.get_data_col","title":"<code>get_data_col(actor)</code>  <code>cached</code>","text":"<p>\u83b7\u53d6\u4e3b\u4f53\u7684\u6570\u636e\u5217</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/core/model.py</code> <pre><code>@lru_cache\ndef get_data_col(self, actor: ActorType) -&gt; pd.Series:\n    \"\"\"\u83b7\u53d6\u4e3b\u4f53\u7684\u6570\u636e\u5217\"\"\"\n    data = self.datacollector.get_model_vars_dataframe()\n    col_by = self.p.get(\"detect_bkp_by\", \"size\")\n    col = COL_NAMES[col_by].replace(\"breed\", actor)\n    return data[col]\n</code></pre>"},{"location":"api/model/#src.core.model.Model.step","title":"<code>step()</code>","text":"<p>\u6bcf\u4e00\u6b65\u8fd0\u884c\u540e\uff0c\u6536\u96c6\u6570\u636e</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/core/model.py</code> <pre><code>def step(self) -&gt; None:\n    \"\"\"\u6bcf\u4e00\u6b65\u8fd0\u884c\u540e\uff0c\u6536\u96c6\u6570\u636e\"\"\"\n    self.do_each(\"step\", order=(\"nature\", \"human\"))\n    self.agents.shuffle_do(\"step\")\n    self.datacollector.collect(self)\n</code></pre>"},{"location":"tech/breakpoint/","title":"\u65ad\u70b9\u68c0\u6d4b","text":""},{"location":"tech/breakpoint/#_1","title":"\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5","text":"<p>\u65ad\u70b9\u68c0\u6d4b\u4f7f\u7528[<code>ruptures</code>]\u5e93\u5b9e\u73b0\u3002</p> <p>\u672c\u6a21\u578b\u4e2d\uff0c\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5 <code>detect_breakpoints</code> \u9ed8\u8ba4\u8c03\u7528 [<code>Dynp</code> \u7b97\u6cd5]\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a <code>n_bkps</code> \u53c2\u6570\uff0c\u5373\u671f\u671b\u6709\u591a\u5c11\u4e2a\u65ad\u70b9\uff0c\u5728\u8fd9\u91cc\u9ed8\u8ba4 <code>n_bkps=1</code>\uff0c\u5373\u53ea\u68c0\u6d4b\u4e00\u4e2a\u65ad\u70b9\u3002\u540c\u65f6\uff0c\u7528\u6237\u8fd8\u9700\u8981\u6307\u5b9a <code>min_size</code> \u53c2\u6570\uff0c\u5373\u6bcf\u4e2a\u65ad\u70b9\u4e4b\u95f4\u81f3\u5c11\u5305\u542b\u591a\u5c11\u4e2a\u6570\u636e\u70b9\uff0c\u5728\u8fd9\u91cc\u9ed8\u8ba4 <code>min_size=5</code>\uff0c\u8fd9\u610f\u5473\u7740\u5728\u68c0\u6d4b\u65ad\u70b9\u65f6\u82e5\u5c11\u4e8e5\u4e2a\u6570\u636e\u70b9\uff08\u6bd4\u5982\u6a21\u578b\u53ea\u8fd0\u884c\u4e864\u5e74\uff09\uff0c\u5219\u4e0d\u8fdb\u884c\u65ad\u70b9\u68c0\u6d4b\u3002</p> <p>\u53ef\u66ff\u4ee3\u7684\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5\u5305\u62ec\uff1a</p> <ul> <li><code>Dynp</code> \u7b97\u6cd5</li> <li><code>Binseg</code> \u7b97\u6cd5</li> <li><code>BottomUp</code> \u7b97\u6cd5</li> <li><code>Window</code> \u7b97\u6cd5</li> </ul> <p>\u68c0\u67e5\u5e8f\u5217\u6570\u636e\u7684\u53d8\u5316\u8d8b\u52bf\u95f4\u65ad\u70b9\u3002</p> <p>\u53c2\u6570\uff1a</p> \u540d\u79f0 \u7c7b\u578b \u63cf\u8ff0 \u9ed8\u8ba4 <code>series</code> <code>Series</code> <p>\u9700\u8981\u5224\u65ad\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u7d22\u5f15\u662f\u65f6\u95f4\uff0c\u503c\u662f\u5224\u65ad\u8d8b\u52bf\u7684\u503c\u3002</p> \u5fc5\u9700 <code>n_bkps</code> <code>int</code> <p>\u9884\u671f\u6709\u591a\u5c11\u4e2a\u95f4\u65ad\u70b9\uff0c\u9ed8\u8ba4\u4e3a1.</p> <code>1</code> <code>algorithm</code> <code>str</code> <p>\u4f9d\u8d56\u4e8e\u5305ruptures\u8fdb\u884c\u5b9e\u73b0\uff0c\u4ece\u4ee5\u4e0b\u56db\u79cd\u7b97\u6cd5\u4e2d\u9009\u62e9\u4e00\u79cd: - \"Dynp\" - \"Binseg\" - \"BottomUp\" - \"Window\" \u9ed8\u8ba4\u9009\u7528 Dynp\u3002</p> <code>'Dynp'</code> <code>min_size</code> <code>int</code> <p>\u5207\u5272\u65f6\u95f4\u5e8f\u5217\u540e\uff0c\u6bcf\u4e00\u6bb5\u6700\u5c0f\u4e0d\u80fd\u5c11\u4e8e\u51e0\u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u9ed8\u8ba4\u4e3a5\u3002</p> <code>5</code> <p>\u5f15\u53d1\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>ValueError</code> <p>\u5982\u679c\u8f93\u5165\u4e86\u4e0d\u6b63\u786e\u7684\u7b97\u6cd5\u540d\u79f0\u3002</p> <p>\u8fd4\u56de\uff1a</p> \u7c7b\u578b \u63cf\u8ff0 <code>List[int] | int</code> <p>\u8bc6\u522b\u7684\u65ad\u70b9\u6240\u5728\u7684\u65f6\u95f4\u3002</p> \u6e90\u4ee3\u7801\u4f4d\u4e8e\uff1a <code>src/workflow/analysis.py</code> <pre><code>def detect_breakpoints(\n    series: pd.Series, n_bkps: int = 1, algorithm: str = \"Dynp\", min_size: int = 5\n) -&gt; List[int] | int:\n    \"\"\"\u68c0\u67e5\u5e8f\u5217\u6570\u636e\u7684\u53d8\u5316\u8d8b\u52bf\u95f4\u65ad\u70b9\u3002\n\n    Parameters:\n        series:\n            \u9700\u8981\u5224\u65ad\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u7d22\u5f15\u662f\u65f6\u95f4\uff0c\u503c\u662f\u5224\u65ad\u8d8b\u52bf\u7684\u503c\u3002\n        n_bkps:\n            \u9884\u671f\u6709\u591a\u5c11\u4e2a\u95f4\u65ad\u70b9\uff0c\u9ed8\u8ba4\u4e3a1.\n        algorithm:\n            \u4f9d\u8d56\u4e8e\u5305[ruptures](https://centre-borelli.github.io/ruptures-docs/)\u8fdb\u884c\u5b9e\u73b0\uff0c\u4ece\u4ee5\u4e0b\u56db\u79cd\u7b97\u6cd5\u4e2d\u9009\u62e9\u4e00\u79cd:\n            - \"[Dynp](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/dynp-reference/)\"\n            - \"[Binseg](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/binseg-reference/)\"\n            - \"[BottomUp](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/bottomup-reference/)\"\n            - \"[Window](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/window-reference/)\"\n            \u9ed8\u8ba4\u9009\u7528 Dynp\u3002\n        min_size:\n            \u5207\u5272\u65f6\u95f4\u5e8f\u5217\u540e\uff0c\u6bcf\u4e00\u6bb5\u6700\u5c0f\u4e0d\u80fd\u5c11\u4e8e\u51e0\u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u9ed8\u8ba4\u4e3a5\u3002\n\n    Raises:\n        ValueError:\n            \u5982\u679c\u8f93\u5165\u4e86\u4e0d\u6b63\u786e\u7684\u7b97\u6cd5\u540d\u79f0\u3002\n\n    Returns:\n        \u8bc6\u522b\u7684\u65ad\u70b9\u6240\u5728\u7684\u65f6\u95f4\u3002\n    \"\"\"\n    valid_algorithms = [\"Dynp\", \"Binseg\", \"BottomUp\", \"Window\"]\n    if algorithm not in valid_algorithms:\n        raise ValueError(\n            f\"Algorithm should be chosen from {valid_algorithms}, got {algorithm} instead.\"\n        )\n    algorithm = getattr(rpt, algorithm, None)\n    algo = algorithm(model=\"l2\", min_size=min_size)\n    algo.fit(series.values)\n    result = algo.predict(n_bkps=n_bkps)\n    breakpoints = [series.index[i] for i in result[:-1]]\n    if n_bkps == 1:\n        return breakpoints[0] if breakpoints else None\n    return breakpoints\n</code></pre>"},{"location":"tech/breakpoint/#_2","title":"\u68c0\u6d4b\u76ee\u6807\u53d8\u91cf","text":"<p>\u68c0\u6d4b\u4f1a\u5bf9\u6240\u6709\u4e09\u7c7b\u4e3b\u4f53\uff08\u72e9\u730e\u91c7\u96c6\u8005\u3001\u519c\u6c11\u3001\u6c34\u7a3b\uff09\u8fdb\u884c\u65ad\u70b9\u68c0\u6d4b\uff0c\u68c0\u6d4b\u76ee\u6807\u53d8\u91cf\u6709\u56db\u79cd\uff0c\u5206\u522b\u662f\uff1a</p> <ol> <li>\u4eba\u53e3\u7edd\u5bf9\u6570\u91cf\uff1asize</li> <li>\u4eba\u53e3\u5360\u603b\u4eba\u53e3\u7684\u76f8\u5bf9\u6bd4\u4f8b\uff1aratio</li> <li>\u4eba\u53e3\u7fa4\u4f53\u6570\u91cf\uff1agroup</li> <li>\u4eba\u53e3\u7fa4\u4f53\u5360\u603b\u4eba\u53e3\u7684\u76f8\u5bf9\u6bd4\u4f8b\uff1agroup_ratio</li> </ol>"},{"location":"tech/changelog_v2/","title":"\u6a21\u578b\u91cd\u6784\u53d8\u66f4\u65e5\u5fd7 (v2.0)","text":""},{"location":"tech/changelog_v2/#v20","title":"\u6a21\u578b\u91cd\u6784\u53d8\u66f4\u65e5\u5fd7 (v2.0)","text":"<p>\u672c\u6587\u6863\u8bb0\u5f55\u4e86\u6a21\u578b\u5728 2025\u5e7410\u670820\u65e5 \u8fdb\u884c\u7684\u5927\u5e45\u5ea6\u903b\u8f91\u4fee\u6539\u3002</p>"},{"location":"tech/changelog_v2/#_1","title":"\u4e3b\u8981\u53d8\u66f4\u6982\u8ff0","text":"<p>\u672c\u6b21\u91cd\u6784\u4e3b\u8981\u76ee\u6807\u662f\u7b80\u5316\u6a21\u578b\u903b\u8f91\uff0c\u589e\u5f3a\u6a21\u578b\u7684\u7075\u6d3b\u6027\u548c\u53ef\u63a7\u6027\uff0c\u5177\u4f53\u5305\u62ec\uff1a</p> <ol> <li>\u2705 \u589e\u52a0\u521d\u59cb\u519c\u6c11\u6570\u91cf\u8bbe\u7f6e</li> <li>\u2705 \u5f31\u5316 tick \u4e0e\u771f\u5b9e\u65f6\u95f4\u7684\u5bf9\u5e94\u5173\u7cfb</li> <li>\u2705 \u786e\u4fdd\u6269\u6563\u673a\u5236\u7684\u4eba\u53e3\u5b88\u6052</li> <li>\u2705 \u6dfb\u52a0\u8f6c\u5316\u673a\u5236\u5f00\u5173</li> <li>\u2705 \u4fee\u6539\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u4e0a\u9650\u89c4\u5219</li> <li>\u2705 \u8c03\u6574\u72e9\u730e\u91c7\u96c6\u8005\u5355\u4f4d\u4e3b\u4f53\u4eba\u53e3\u9650\u5236</li> <li>\u2705 \u5220\u9664\u7ade\u4e89\u529f\u80fd</li> <li>\u2705 \u4e3a\u72e9\u730e\u91c7\u96c6\u8005\u6dfb\u52a0\u635f\u5931\u673a\u5236</li> </ol>"},{"location":"tech/changelog_v2/#_2","title":"\u8be6\u7ec6\u53d8\u66f4\u8bf4\u660e","text":""},{"location":"tech/changelog_v2/#1","title":"1. \u521d\u59cb\u5316\u673a\u5236\u53d8\u66f4","text":""},{"location":"tech/changelog_v2/#_3","title":"\u53d8\u66f4\u524d","text":"<ul> <li>\u4ec5\u521d\u59cb\u5316\u72e9\u730e\u91c7\u96c6\u8005</li> <li>\u519c\u6c11\u548c\u6c34\u7a3b\u519c\u6c11\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u6839\u636e\u6cca\u677e\u5206\u5e03\u52a8\u6001\u6dfb\u52a0</li> </ul>"},{"location":"tech/changelog_v2/#_4","title":"\u53d8\u66f4\u540e","text":"<ul> <li>\u521d\u59cb\u5316\u65f6\u540c\u65f6\u521b\u5efa\u6240\u6709\u4e09\u7c7b\u4e3b\u4f53</li> <li>\u65b0\u589e\u914d\u7f6e\u53c2\u6570\uff1a</li> <li><code>env.init_farmers</code>: \u521d\u59cb\u666e\u901a\u519c\u6c11\u6570\u91cf\uff08\u9ed8\u8ba4 80\uff0c\u63a8\u8350\u8303\u56f4 60-100\uff09</li> <li><code>env.init_rice_farmers</code>: \u521d\u59cb\u6c34\u7a3b\u519c\u6c11\u6570\u91cf\uff08\u9ed8\u8ba4 350\uff0c\u63a8\u8350\u8303\u56f4 300-400\uff09</li> <li>\u6bcf\u7c7b\u4e3b\u4f53\u7684\u521d\u59cb\u4eba\u53e3\u89c4\u6a21\u7531\u5404\u81ea\u7684 <code>init_size</code> \u53c2\u6570\u63a7\u5236</li> <li><code>tick_farmer</code> \u548c <code>tick_ricefarmer</code> \u8bbe\u4e3a 0\uff08\u4ece\u7b2c\u4e00\u6b65\u5c31\u5f00\u59cb\u8fd0\u884c\uff09</li> </ul> <p>\u5f71\u54cd\uff1a\u6a21\u578b\u542f\u52a8\u65f6\u5c31\u6709\u5b8c\u6574\u7684\u4e09\u7c7b\u4e3b\u4f53\uff0c\u66f4\u7b26\u5408\u5b9e\u9645\u60c5\u51b5</p>"},{"location":"tech/changelog_v2/#2","title":"2. \u8f6c\u5316\u673a\u5236\u5f00\u5173","text":""},{"location":"tech/changelog_v2/#_5","title":"\u65b0\u589e\u529f\u80fd","text":"<p>\u6dfb\u52a0\u4e86\u7075\u6d3b\u7684\u8f6c\u5316\u673a\u5236\u63a7\u5236\u7cfb\u7edf\uff0c\u53ef\u4ee5\u72ec\u7acb\u63a7\u5236\u4e0d\u540c\u7c7b\u578b\u7684\u8f6c\u5316\u3002</p>"},{"location":"tech/changelog_v2/#_6","title":"\u914d\u7f6e\u793a\u4f8b","text":"<pre><code>convert:\n  enabled: true  # \u5168\u5c40\u5f00\u5173\n  hunter_to_farmer: true  # \u72e9\u730e\u91c7\u96c6\u8005 \u2192 \u519c\u6c11\n  hunter_to_rice: true  # \u72e9\u730e\u91c7\u96c6\u8005 \u2192 \u6c34\u7a3b\u519c\u6c11\n  farmer_to_hunter: true  # \u519c\u6c11 \u2192 \u72e9\u730e\u91c7\u96c6\u8005\n  farmer_to_rice: true  # \u519c\u6c11 \u2192 \u6c34\u7a3b\u519c\u6c11\n  rice_to_farmer: true  # \u6c34\u7a3b\u519c\u6c11 \u2192 \u519c\u6c11\n</code></pre> <p>\u7528\u9014\uff1a - \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e <code>enabled: false</code> \u5173\u95ed\u6240\u6709\u8f6c\u5316 - \u53ef\u4ee5\u5355\u72ec\u63a7\u5236\u6bcf\u79cd\u8f6c\u5316\u8def\u5f84 - \u4fbf\u4e8e\u5bf9\u6bd4\u6709/\u65e0\u8f6c\u5316\u673a\u5236\u7684\u6a21\u578b\u884c\u4e3a\u5dee\u5f02</p>"},{"location":"tech/changelog_v2/#3-hunter","title":"3. \u72e9\u730e\u91c7\u96c6\u8005 (Hunter) \u91cd\u5927\u8c03\u6574","text":""},{"location":"tech/changelog_v2/#31","title":"3.1 \u4eba\u53e3\u4e0a\u9650\u89c4\u5219\u53d8\u66f4","text":"<p>\u53d8\u66f4\u524d\uff1a - \u6bcf\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u7684\u6700\u5927\u4eba\u53e3\u7531\u6240\u5728\u683c\u5b50\u7684 <code>lim_h</code> (\u73af\u5883\u627f\u8f7d\u529b) \u51b3\u5b9a</p> <p>\u53d8\u66f4\u540e\uff1a - \u666e\u901a\u60c5\u51b5\uff1a<code>max_size = 100</code> - \u4e34\u8fd1\u6c34\u4f53\uff1a<code>max_size_water = 500</code>\uff08\u76f8\u90bb8\u683c\u4e2d\u6709\u6c34\u4f53\uff09 - \u4e0d\u518d\u53d7\u5355\u4e2a\u683c\u5b50\u627f\u8f7d\u529b\u9650\u5236</p> <p>\u914d\u7f6e\u53c2\u6570\uff1a </p><pre><code>Hunter:\n  max_size: 100  # \u5355\u4f4d\u4e3b\u4f53\u4eba\u53e3\u6700\u5927\u503c\n  max_size_water: 500  # \u4e34\u8fd1\u6c34\u4f53\u65f6\u7684\u6700\u5927\u503c\n</code></pre><p></p> <p>\u6ce8\u610f\uff1a\u8d85\u8fc7 <code>is_complex</code> (\u9ed8\u8ba4100) \u9608\u503c\u7684\u72e9\u730e\u91c7\u96c6\u8005\u4ecd\u4e0d\u518d\u79fb\u52a8</p>"},{"location":"tech/changelog_v2/#32","title":"3.2 \u5220\u9664\u7ade\u4e89\u673a\u5236","text":"<p>\u79fb\u9664\u7684\u529f\u80fd\uff1a - <code>moving()</code> \u65b9\u6cd5 - \u4e0d\u518d\u5904\u7406\u4e0e\u5176\u4ed6\u4e3b\u4f53\u7684\u7ade\u4e89 - <code>compete()</code> \u65b9\u6cd5 - \u5220\u9664\u6240\u6709\u7ade\u4e89\u903b\u8f91 - <code>loss_in_competition()</code> \u65b9\u6cd5 - \u5220\u9664\u7ade\u4e89\u5931\u8d25\u7684\u5904\u7406 - <code>intensified_coefficient</code> \u53c2\u6570 - \u5220\u9664\u7ade\u4e89\u7cfb\u6570</p> <p>\u5f71\u54cd\uff1a - \u4e0d\u540c\u4e3b\u4f53\u4e0d\u80fd\u518d\u5360\u636e\u540c\u4e00\u683c\u5b50\uff08\u6bcf\u683c\u552f\u4e00\u4e3b\u4f53\u89c4\u5219\uff09 - \u72e9\u730e\u91c7\u96c6\u8005\u9047\u5230\u5176\u4ed6 Hunter \u65f6\u4ecd\u4f1a\u5408\u5e76 - \u79fb\u52a8\u903b\u8f91\u66f4\u7b80\u5355\u6e05\u6670</p>"},{"location":"tech/changelog_v2/#33","title":"3.3 \u65b0\u589e\u635f\u5931\u673a\u5236","text":"<p>\u65b0\u589e\u529f\u80fd\uff1a \u72e9\u730e\u91c7\u96c6\u8005\u73b0\u5728\u4e5f\u4f1a\u50cf\u519c\u6c11\u4e00\u6837\u7ecf\u5386\u968f\u673a\u635f\u5931\uff08\u5982\u75be\u75c5\u3001\u707e\u5bb3\u7b49\uff09</p> <p>\u914d\u7f6e\u53c2\u6570\uff1a </p><pre><code>Hunter:\n  loss:\n    prob: 0.05  # \u635f\u5931\u53d1\u751f\u6982\u7387\n    rate: 0.1   # \u635f\u5931\u65f6\u4eba\u53e3\u51cf\u5c11\u6bd4\u7387\n</code></pre><p></p> <p>\u5b9e\u73b0\uff1a\u6bcf\u4e2a\u65f6\u95f4\u6b65\uff0c\u6709 <code>prob</code> \u6982\u7387\u53d1\u751f\u635f\u5931\uff0c\u635f\u5931\u65f6\u4eba\u53e3\u51cf\u5c11 <code>rate</code> \u6bd4\u4f8b</p>"},{"location":"tech/changelog_v2/#34","title":"3.4 \u5408\u5e76\u673a\u5236\u6539\u8fdb","text":"<p>\u53d8\u66f4\u524d\uff1a </p><pre><code>size = max(other_hunter.size + self.size, lim_h)\n</code></pre><p></p> <p>\u53d8\u66f4\u540e\uff1a </p><pre><code>size = other_hunter.size + self.size  # \u4e25\u683c\u4eba\u53e3\u5b88\u6052\n</code></pre><p></p> <p>\u5f71\u54cd\uff1a\u5408\u5e76\u540e\u7684\u603b\u4eba\u53e3 = \u4e24\u4e2a\u7fa4\u4f53\u4eba\u53e3\u4e4b\u548c\uff0c\u786e\u4fdd\u4eba\u53e3\u5b88\u6052</p>"},{"location":"tech/changelog_v2/#4","title":"4. \u6bcf\u683c\u552f\u4e00\u4e3b\u4f53\u89c4\u5219","text":""},{"location":"tech/changelog_v2/#_7","title":"\u65b0\u89c4\u5219","text":"<ul> <li>\u4e00\u4e2a\u683c\u5b50\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53\uff08\u4efb\u4f55\u7c7b\u578b\uff09</li> <li>\u4e3b\u4f53\u79fb\u52a8\u6216\u6269\u6563\u65f6\u4f1a\u68c0\u67e5\u76ee\u6807\u683c\u5b50\u662f\u5426\u5df2\u6709\u5176\u4ed6\u4e3b\u4f53</li> <li>\u5df2\u6709\u4e3b\u4f53\u7684\u683c\u5b50\u4e0d\u80fd\u4f5c\u4e3a\u79fb\u52a8\u6216\u6269\u6563\u7684\u76ee\u6807</li> </ul>"},{"location":"tech/changelog_v2/#_8","title":"\u5b9e\u73b0\u4f4d\u7f6e","text":"<p><code>CompetingCell.able_to_live()</code> \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4e86\u68c0\u67e5\u903b\u8f91</p>"},{"location":"tech/changelog_v2/#_9","title":"\u4f8b\u5916\u60c5\u51b5","text":"<ul> <li>\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4ecd\u53ef\u5408\u5e76\uff08\u79fb\u52a8\u5230\u6709\u5176\u4ed6 Hunter \u7684\u683c\u5b50\u4f1a\u89e6\u53d1\u5408\u5e76\uff09</li> <li>\u4e3b\u4f53\u68c0\u67e5\u81ea\u5df1\u5f53\u524d\u4f4d\u7f6e\u65f6\u4e0d\u53d7\u6b64\u9650\u5236</li> </ul>"},{"location":"tech/changelog_v2/#5","title":"5. \u4eba\u53e3\u5b88\u6052\u4fdd\u8bc1","text":""},{"location":"tech/changelog_v2/#sitegroupdiffuse","title":"\u6269\u6563\u673a\u5236\u6539\u8fdb (<code>SiteGroup.diffuse()</code>)","text":"<p>\u53d8\u66f4\u524d\uff1a \u5148\u521b\u5efa\u65b0\u4e3b\u4f53\uff0c\u518d\u51cf\u5c11\u539f\u4e3b\u4f53\u4eba\u53e3\uff0c\u53ef\u80fd\u5bfc\u81f4\u4eba\u53e3\u603b\u6570\u4e0d\u5b88\u6052</p> <p>\u53d8\u66f4\u540e\uff1a </p><pre><code># 1. \u5148\u51cf\u5c11\u539f\u4e3b\u4f53\u4eba\u53e3\nself.size -= new_group_size\n# 2. \u5982\u679c\u539f\u4e3b\u4f53\u8fd8\u6d3b\u7740\uff0c\u521b\u5efa\u65b0\u4e3b\u4f53\nif self.alive:\n    new = create_new_agent(size=new_group_size)\n</code></pre><p></p> <p>\u4fdd\u8bc1\uff1a\u6269\u6563\u524d\u540e\u603b\u4eba\u53e3\u6570\u4e25\u683c\u76f8\u7b49\uff08\u539f\u4e3b\u4f53\u4eba\u53e3 = \u539f\u4e3b\u4f53\u51cf\u5c11\u540e + \u65b0\u4e3b\u4f53\uff09</p>"},{"location":"tech/changelog_v2/#6","title":"6. \u914d\u7f6e\u6587\u4ef6\u65b0\u589e\u53c2\u6570","text":""},{"location":"tech/changelog_v2/#farmer","title":"Farmer \u914d\u7f6e","text":"<pre><code>Farmer:\n  init_size: [60, 100]  # \u521d\u59cb\u4eba\u53e3\u89c4\u6a21\u8303\u56f4\n</code></pre>"},{"location":"tech/changelog_v2/#ricefarmer","title":"RiceFarmer \u914d\u7f6e","text":"<pre><code>RiceFarmer:\n  init_size: [300, 400]  # \u521d\u59cb\u4eba\u53e3\u89c4\u6a21\u8303\u56f4\n</code></pre>"},{"location":"tech/changelog_v2/#_10","title":"\u6d4b\u8bd5\u9a8c\u8bc1","text":"<p>\u6240\u6709\u4fee\u6539\u5df2\u901a\u8fc7\u5b8c\u6574\u7684\u6d4b\u8bd5\u5957\u4ef6\u9a8c\u8bc1\uff1a</p> <ul> <li>\u2705 84 \u4e2a\u5355\u5143\u6d4b\u8bd5\u5168\u90e8\u901a\u8fc7</li> <li>\u2705 \u5355\u6b21\u8fd0\u884c\u6d4b\u8bd5\u6b63\u5e38</li> <li>\u2705 \u591a\u6b21\u91cd\u590d\u8fd0\u884c\u6d4b\u8bd5\u6b63\u5e38</li> <li>\u2705 \u5e76\u884c\u5904\u7406\u6b63\u5e38\u5de5\u4f5c</li> <li>\u2705 \u8f93\u51fa\u6587\u4ef6\uff08\u8f6c\u5316\u6570\u636e\u3001\u52a8\u6001\u56fe\u3001\u70ed\u56fe\uff09\u6b63\u5e38\u751f\u6210</li> </ul>"},{"location":"tech/changelog_v2/#_11","title":"\u5411\u540e\u517c\u5bb9\u6027","text":""},{"location":"tech/changelog_v2/#_12","title":"\u4e0d\u517c\u5bb9\u53d8\u66f4","text":"<ol> <li>\u914d\u7f6e\u6587\u4ef6\u5fc5\u987b\u66f4\u65b0\uff1a</li> <li>\u6dfb\u52a0 <code>convert</code> \u90e8\u5206</li> <li>Hunter \u4e2d\u5220\u9664 <code>intensified_coefficient</code></li> <li>Hunter \u4e2d\u6dfb\u52a0 <code>max_size</code>, <code>max_size_water</code>, <code>loss</code></li> <li>\u6dfb\u52a0 <code>env.init_farmers</code>, <code>env.init_rice_farmers</code></li> <li> <p>Farmer \u548c RiceFarmer \u6dfb\u52a0 <code>init_size</code></p> </li> <li> <p>API \u53d8\u66f4\uff1a</p> </li> <li><code>Hunter.compete()</code> \u65b9\u6cd5\u5df2\u5220\u9664</li> <li><code>Hunter.loss_in_competition()</code> \u65b9\u6cd5\u5df2\u5220\u9664</li> <li><code>Hunter.moving()</code> \u65b9\u6cd5\u5df2\u5220\u9664</li> <li><code>Hunter.max_size</code> \u5c5e\u6027\u8ba1\u7b97\u903b\u8f91\u6539\u53d8</li> </ol>"},{"location":"tech/changelog_v2/#_13","title":"\u8fc1\u79fb\u6307\u5357","text":"<p>\u5982\u679c\u60a8\u4f7f\u7528\u65e7\u7248\u672c\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u8bf7\u53c2\u8003 <code>config/config.yaml</code> \u66f4\u65b0\u60a8\u7684\u914d\u7f6e\uff1a</p> <ol> <li>\u5728\u6839\u7ea7\u522b\u6dfb\u52a0 <code>convert</code> \u914d\u7f6e\u90e8\u5206</li> <li>\u66f4\u65b0 Hunter \u914d\u7f6e\u53c2\u6570</li> <li>\u6dfb\u52a0\u521d\u59cb\u519c\u6c11\u76f8\u5173\u53c2\u6570</li> <li>\u6dfb\u52a0\u5404\u4e3b\u4f53\u7684 <code>init_size</code> \u53c2\u6570</li> </ol>"},{"location":"tech/changelog_v2/#_14","title":"\u672a\u6765\u8ba1\u5212","text":"<p>\u4ee5\u4e0b\u529f\u80fd\u5728\u672c\u6b21\u91cd\u6784\u4e2d\u88ab\u63d0\u53ca\u4f46\u672a\u5b9e\u73b0\uff0c\u53ef\u80fd\u5728\u672a\u6765\u7248\u672c\u4e2d\u6dfb\u52a0\uff1a</p> <ul> <li> \u5168\u5c40\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u4e0a\u9650\uff08<code>lim_h * \u975e\u6c34\u4f53\u6805\u683c\u6570</code>\uff09</li> <li> \u66f4\u7075\u6d3b\u7684\u65f6\u95f4-\u7a7a\u95f4\u5c3a\u5ea6\u6620\u5c04\u673a\u5236</li> </ul>"},{"location":"tech/changelog_v2/#_15","title":"\u53c2\u8003\u6587\u6863","text":"<ul> <li>\u914d\u7f6e\u6587\u4ef6\u8bf4\u660e</li> <li>\u5de5\u4f5c\u6d41\u7a0b</li> <li>Hunter API</li> <li>Environment API</li> </ul>"},{"location":"tech/sequence_diagram/","title":"\u6a21\u578b\u65f6\u5e8f\u56fe","text":""},{"location":"tech/sequence_diagram/#_1","title":"\u6a21\u578b\u8be6\u7ec6\u65f6\u5e8f\u56fe","text":"<p>\u672c\u6587\u6863\u901a\u8fc7\u65f6\u5e8f\u56fe\u8be6\u7ec6\u8bf4\u660e\u534e\u5357\u751f\u8ba1\u6f14\u53d8\u6a21\u578b\u7684\u8fd0\u884c\u6d41\u7a0b\u3002</p>"},{"location":"tech/sequence_diagram/#_2","title":"\u5b8c\u6574\u8fd0\u884c\u65f6\u5e8f","text":"<pre><code>sequenceDiagram\n    participant User as \u7528\u6237\n    participant Exp as MyExperiment\n    participant Model as Model\n    participant Env as Environment\n    participant H as Hunter\n    participant F as Farmer\n    participant RF as RiceFarmer\n    participant Cell as CompetingCell\n\n    Note over User,Cell: \u521d\u59cb\u5316\u9636\u6bb5\n\n    User-&gt;&gt;Exp: \u8fd0\u884c\u5b9e\u9a8c (batch_run)\n    Exp-&gt;&gt;Model: \u521b\u5efa\u6a21\u578b\u5b9e\u4f8b\n    Model-&gt;&gt;Env: initialize()\n\n    Note over Env,Cell: \u73af\u5883\u521d\u59cb\u5316\n    Env-&gt;&gt;Env: setup_dem()\n    Env-&gt;&gt;Cell: \u52a0\u8f7d DEM \u6570\u636e\n    Env-&gt;&gt;Cell: \u52a0\u8f7d Slope \u6570\u636e\n    Env-&gt;&gt;Cell: \u52a0\u8f7d lim_h \u6570\u636e\n\n    Note over Env,H: \u6dfb\u52a0\u521d\u59cb Hunters\n    Env-&gt;&gt;Env: add_hunters(0.05)\n    Env-&gt;&gt;Cell: \u9009\u62e9\u975e\u6c34\u4f53\u683c\u5b50\n    Env-&gt;&gt;H: \u521b\u5efa Hunter (init_size: 6-35)\n    H-&gt;&gt;Cell: \u79fb\u52a8\u5230\u683c\u5b50\n\n    Note over Env,F: \u6dfb\u52a0\u521d\u59cb Farmers (\u65b0\u589e)\n    Env-&gt;&gt;Env: add_initial_farmers(80)\n    Env-&gt;&gt;Cell: \u9009\u62e9\u53ef\u8015\u5730\n    Env-&gt;&gt;F: \u521b\u5efa Farmer (init_size: 60-100)\n    F-&gt;&gt;Cell: \u79fb\u52a8\u5230\u683c\u5b50\n\n    Note over Env,RF: \u6dfb\u52a0\u521d\u59cb RiceFarmers (\u65b0\u589e)\n    Env-&gt;&gt;Env: add_initial_farmers(350)\n    Env-&gt;&gt;Cell: \u9009\u62e9\u6c34\u7a3b\u53ef\u8015\u5730\n    Env-&gt;&gt;RF: \u521b\u5efa RiceFarmer (init_size: 300-400)\n    RF-&gt;&gt;Cell: \u79fb\u52a8\u5230\u683c\u5b50\n\n    Note over User,Cell: \u8fd0\u884c\u9636\u6bb5 (\u6bcf\u4e2a Tick)\n\n    loop \u6bcf\u4e2a\u65f6\u95f4\u6b65 (tick)\n        Model-&gt;&gt;Env: env.step()\n\n        Note over Env,F: \u73af\u5883\u6b65\u9aa4\uff1a\u6dfb\u52a0\u65b0\u4e3b\u4f53\n        Env-&gt;&gt;Env: add_farmers(Farmer)\n        Env-&gt;&gt;F: \u6cca\u677e\u5206\u5e03\u521b\u5efa\u65b0 Farmers\n        Env-&gt;&gt;Env: add_farmers(RiceFarmer)\n        Env-&gt;&gt;RF: \u6cca\u677e\u5206\u5e03\u521b\u5efa\u65b0 RiceFarmers\n\n        Note over Model,RF: \u4e3b\u4f53\u6b65\u9aa4\uff1a\u968f\u673a\u6267\u884c\n        Model-&gt;&gt;Model: agents.shuffle_do(\"step\")\n\n        alt \u9009\u4e2d Hunter\n            Model-&gt;&gt;H: step()\n            H-&gt;&gt;H: population_growth()\n            H-&gt;&gt;H: convert() [\u68c0\u67e5\u8f6c\u5316\u5f00\u5173]\n            opt \u8f6c\u5316\u5f00\u5173\u5f00\u542f &amp; \u6ee1\u8db3\u6761\u4ef6\n                H-&gt;&gt;Cell: convert(to=\"Farmer\")\n                Cell-&gt;&gt;Cell: \u68c0\u67e5 convert.hunter_to_farmer\n                Cell-&gt;&gt;F: \u521b\u5efa\u65b0 Farmer\n                Cell-&gt;&gt;H: \u6b7b\u4ea1\n            end\n            H-&gt;&gt;H: diffuse()\n            opt \u4eba\u53e3 &gt;= max_size\n                H-&gt;&gt;H: \u521b\u5efa\u65b0 Hunter\n                H-&gt;&gt;Cell: \u641c\u7d22\u5408\u9002\u683c\u5b50\n                Cell--&gt;&gt;H: \u8fd4\u56de\u76ee\u6807\u683c\u5b50\n            end\n            H-&gt;&gt;H: loss() [\u65b0\u589e]\n            opt \u968f\u673a\u635f\u5931\u89e6\u53d1\n                H-&gt;&gt;H: size *= (1 - loss.rate)\n            end\n            H-&gt;&gt;H: move_one()\n            opt \u4e0d\u662f\u5b9a\u5c45\u578b (size &lt;= 100)\n                H-&gt;&gt;Cell: \u641c\u7d22\u66f4\u597d\u7684\u683c\u5b50\n                opt \u9047\u5230\u53e6\u4e00\u4e2a Hunter\n                    H-&gt;&gt;H: merge(other_hunter)\n                    Note over H: \u4eba\u53e3\u5b88\u6052\uff1asize = size1 + size2\n                end\n            end\n        else \u9009\u4e2d Farmer\n            Model-&gt;&gt;F: step()\n            F-&gt;&gt;F: population_growth()\n            F-&gt;&gt;F: convert() [\u68c0\u67e5\u8f6c\u5316\u5f00\u5173]\n            opt \u8f6c\u5316\u5f00\u5173\u5f00\u542f &amp; \u6ee1\u8db3\u6761\u4ef6\n                alt \u4eba\u53e3 &lt;= 100 &amp; \u968f\u673a\n                    F-&gt;&gt;Cell: convert(to=\"Hunter\")\n                    Cell-&gt;&gt;H: \u521b\u5efa\u65b0 Hunter\n                else \u4eba\u53e3 &gt;= 200 &amp; \u5728\u6c34\u7a3b\u5730\n                    F-&gt;&gt;Cell: convert(to=\"RiceFarmer\")\n                    Cell-&gt;&gt;RF: \u521b\u5efa\u65b0 RiceFarmer\n                end\n            end\n            F-&gt;&gt;F: diffuse()\n            opt \u968f\u673a\u6269\u6563\u89e6\u53d1\n                F-&gt;&gt;F: \u521b\u5efa\u65b0 Farmer\n                Note over F: \u4eba\u53e3\u5b88\u6052\uff1a\u539f\u4e3b\u4f53\u5148\u51cf\u4eba\u53e3\n                F-&gt;&gt;Cell: \u641c\u7d22\u53ef\u8015\u5730\n            end\n            F-&gt;&gt;F: loss()\n            opt \u968f\u673a\u635f\u5931\u89e6\u53d1\n                F-&gt;&gt;F: size *= (1 - loss.rate)\n            end\n        else \u9009\u4e2d RiceFarmer\n            Model-&gt;&gt;RF: step()\n            RF-&gt;&gt;RF: population_growth()\n            RF-&gt;&gt;RF: convert() [\u68c0\u67e5\u8f6c\u5316\u5f00\u5173]\n            opt \u4eba\u53e3 &lt; 200 &amp; \u968f\u673a\n                RF-&gt;&gt;Cell: convert(to=\"Farmer\")\n                Cell-&gt;&gt;F: \u521b\u5efa\u65b0 Farmer\n            end\n            RF-&gt;&gt;RF: diffuse()\n            RF-&gt;&gt;RF: loss()\n        end\n\n        Note over Model: \u68c0\u67e5\u6b7b\u4ea1\u6761\u4ef6\n        alt \u4e3b\u4f53\u4eba\u53e3 &lt; min_size\n            Model-&gt;&gt;H: die()\n            Model-&gt;&gt;F: die()\n            Model-&gt;&gt;RF: die()\n        end\n\n        Model-&gt;&gt;Model: datacollector.collect()\n    end\n\n    Note over User,Cell: \u7ed3\u675f\u9636\u6bb5\n\n    Model-&gt;&gt;Model: end()\n    Model-&gt;&gt;Model: plot.dynamic()\n    Model-&gt;&gt;Model: plot.heatmap()\n    Model-&gt;&gt;Model: export_conversion_data()\n    Model--&gt;&gt;Exp: \u8fd4\u56de\u7ed3\u679c\n    Exp--&gt;&gt;User: \u4fdd\u5b58\u7ed3\u679c\u6587\u4ef6</code></pre>"},{"location":"tech/sequence_diagram/#_3","title":"\u521d\u59cb\u5316\u8be6\u7ec6\u6d41\u7a0b","text":"<pre><code>sequenceDiagram\n    participant Model\n    participant Env\n    participant DEM as DEM Layer\n    participant Cell as CompetingCells\n    participant H as Hunters\n    participant F as Farmers\n    participant RF as RiceFarmers\n\n    Model-&gt;&gt;Env: initialize()\n\n    Note over Env,Cell: 1. \u8bbe\u7f6e\u5730\u5f62\n    Env-&gt;&gt;Env: setup_dem()\n    Env-&gt;&gt;DEM: create_module(dem_file)\n    DEM-&gt;&gt;Cell: \u521b\u5efa CompetingCell \u6570\u7ec4\n    loop \u6bcf\u4e2a\u683c\u5b50\n        Cell-&gt;&gt;Cell: \u8bbe\u7f6e elevation\n        Cell-&gt;&gt;Cell: \u8bbe\u7f6e slope\n        Cell-&gt;&gt;Cell: \u8bbe\u7f6e lim_h\n        Cell-&gt;&gt;Cell: \u8ba1\u7b97 is_water\n        Cell-&gt;&gt;Cell: \u8ba1\u7b97 is_arable\n        Cell-&gt;&gt;Cell: \u8ba1\u7b97 is_rice_arable\n    end\n\n    Note over Env,H: 2. \u6dfb\u52a0\u521d\u59cb\u72e9\u730e\u91c7\u96c6\u8005\n    Env-&gt;&gt;Env: add_hunters(ratio=0.05)\n    Env-&gt;&gt;Cell: \u9009\u62e9\u975e\u6c34\u4f53\u683c\u5b50\n    Cell--&gt;&gt;Env: \u8fd4\u56de\u53ef\u7528\u683c\u5b50\u5217\u8868\n    Env-&gt;&gt;Env: \u8ba1\u7b97\u6570\u91cf (5% \u6216\u56fa\u5b9a\u6570)\n    loop \u6bcf\u4e2a\u521d\u59cb Hunter\n        Env-&gt;&gt;H: \u521b\u5efa Hunter\n        H-&gt;&gt;H: random_size(0, 35)\n        H-&gt;&gt;Cell: \u79fb\u52a8\u5230\u683c\u5b50\n        Cell-&gt;&gt;Cell: agents.add(hunter)\n    end\n\n    Note over Env,F: 3. \u6dfb\u52a0\u521d\u59cb\u519c\u6c11 (v2.0 \u65b0\u589e)\n    Env-&gt;&gt;Env: add_initial_farmers(Farmer, 80)\n    Env-&gt;&gt;Cell: \u9009\u62e9\u53ef\u8015\u5730 &amp; \u65e0\u4e3b\u4f53\u7684\u683c\u5b50\n    Cell--&gt;&gt;Env: \u8fd4\u56de\u53ef\u7528\u683c\u5b50\u5217\u8868\n    loop \u6bcf\u4e2a\u521d\u59cb Farmer\n        Env-&gt;&gt;F: \u521b\u5efa Farmer\n        F-&gt;&gt;F: random_size(60, 100)\n        F-&gt;&gt;Cell: \u79fb\u52a8\u5230\u683c\u5b50\n        Cell-&gt;&gt;Cell: \u68c0\u67e5 able_to_live()\n        Cell-&gt;&gt;Cell: agents.add(farmer)\n    end\n\n    Note over Env,RF: 4. \u6dfb\u52a0\u521d\u59cb\u6c34\u7a3b\u519c\u6c11 (v2.0 \u65b0\u589e)\n    Env-&gt;&gt;Env: add_initial_farmers(RiceFarmer, 350)\n    Env-&gt;&gt;Cell: \u9009\u62e9\u6c34\u7a3b\u53ef\u8015\u5730 &amp; \u65e0\u4e3b\u4f53\u7684\u683c\u5b50\n    Cell--&gt;&gt;Env: \u8fd4\u56de\u53ef\u7528\u683c\u5b50\u5217\u8868\n    loop \u6bcf\u4e2a\u521d\u59cb RiceFarmer\n        Env-&gt;&gt;RF: \u521b\u5efa RiceFarmer\n        RF-&gt;&gt;RF: random_size(300, 400)\n        RF-&gt;&gt;Cell: \u79fb\u52a8\u5230\u683c\u5b50\n        Cell-&gt;&gt;Cell: \u68c0\u67e5 able_to_live()\n        Cell-&gt;&gt;Cell: agents.add(rice_farmer)\n    end\n\n    Env--&gt;&gt;Model: \u521d\u59cb\u5316\u5b8c\u6210</code></pre>"},{"location":"tech/sequence_diagram/#hunter","title":"Hunter \u884c\u4e3a\u8be6\u7ec6\u6d41\u7a0b","text":"<pre><code>sequenceDiagram\n    participant Model\n    participant H as Hunter\n    participant Cell as Current Cell\n    participant NewCell as Target Cell\n    participant Other as Other Hunter\n\n    Model-&gt;&gt;H: step()\n\n    Note over H: 1. \u4eba\u53e3\u589e\u957f\n    H-&gt;&gt;H: population_growth(rate=0.0008)\n    H-&gt;&gt;H: size = size * (1 + growth_rate)\n\n    Note over H,Cell: 2. \u8f6c\u5316\u68c0\u67e5 (v2.0: \u53ef\u5173\u95ed)\n    H-&gt;&gt;H: convert()\n\n    alt \u8f6c\u5316\u5f00\u5173\u5f00\u542f\n        H-&gt;&gt;H: _convert_to_farmer()\n        opt \u5468\u56f4\u6709 Farmer &amp; \u5f53\u524d\u53ef\u8015\u5730 &amp; \u968f\u673a\n            H-&gt;&gt;Cell: \u68c0\u67e5 convert.hunter_to_farmer\n            alt \u5f00\u5173\u5f00\u542f\n                Cell-&gt;&gt;Cell: convert(hunter, \"Farmer\")\n                Cell-&gt;&gt;Model: \u521b\u5efa Farmer(size=hunter.size)\n                Cell-&gt;&gt;H: die()\n            end\n        end\n\n        opt \u672a\u8f6c\u5316\u4e3a Farmer\n            H-&gt;&gt;H: _convert_to_rice()\n            opt \u5468\u56f4\u6709 RiceFarmer &amp; \u6c34\u7a3b\u5730 &amp; \u968f\u673a\n                H-&gt;&gt;Cell: \u68c0\u67e5 convert.hunter_to_rice\n                alt \u5f00\u5173\u5f00\u542f\n                    Cell-&gt;&gt;Cell: convert(hunter, \"RiceFarmer\")\n                    Cell-&gt;&gt;Model: \u521b\u5efa RiceFarmer(size=hunter.size)\n                    Cell-&gt;&gt;H: die()\n                end\n            end\n        end\n    end\n\n    Note over H: 3. \u6269\u6563 (\u4eba\u53e3\u5b88\u6052)\n    H-&gt;&gt;H: diffuse()\n\n    alt \u4eba\u53e3 &gt;= max_size\n        H-&gt;&gt;H: \u8ba1\u7b97 max_size\n        alt \u4e34\u8fd1\u6c34\u4f53\n            H-&gt;&gt;H: max_size = 500\n        else \u666e\u901a\u60c5\u51b5\n            H-&gt;&gt;H: max_size = 100\n        end\n\n        H-&gt;&gt;Model: \u521b\u5efa\u65b0 Hunter\n        Note over H: \u4eba\u53e3\u5b88\u6052\uff1a\u5148\u51cf\u540e\u521b\u5efa\n        H-&gt;&gt;H: size -= new_size\n\n        opt \u539f Hunter \u4ecd\u5b58\u6d3b\n            H-&gt;&gt;Cell: search_cell(new_hunter)\n            Cell--&gt;&gt;H: \u8fd4\u56de\u5408\u9002\u683c\u5b50\n            H-&gt;&gt;NewCell: \u65b0 Hunter \u79fb\u52a8\u5230\u76ee\u6807\u683c\u5b50\n        else \u539f Hunter \u6b7b\u4ea1\n            H-&gt;&gt;H: \u65b0 Hunter \u4e5f\u6b7b\u4ea1\n        end\n    end\n\n    Note over H: 4. \u635f\u5931 (v2.0 \u65b0\u589e)\n    H-&gt;&gt;H: loss()\n\n    alt \u968f\u673a\u89e6\u53d1 (prob=0.05)\n        H-&gt;&gt;H: size *= (1 - 0.1)\n        Note over H: \u4eba\u53e3\u51cf\u5c11 10%\n    end\n\n    Note over H,NewCell: 5. \u79fb\u52a8\n    H-&gt;&gt;H: move_one()\n\n    alt \u975e\u5b9a\u5c45\u578b (size &lt;= 100)\n        H-&gt;&gt;Cell: neighboring(radius=1)\n        Cell--&gt;&gt;H: \u8fd4\u56de\u5468\u56f4\u683c\u5b50\n\n        loop \u641c\u7d22\u5408\u9002\u683c\u5b50\n            H-&gt;&gt;NewCell: \u68c0\u67e5 able_to_live(hunter)\n\n            alt \u683c\u5b50\u6709\u5176\u4ed6 Hunter\n                H-&gt;&gt;Other: \u5408\u5e76\n                Note over H,Other: merge(): size = h1.size + h2.size\n                Other-&gt;&gt;Other: size = self.size + h.size\n                H-&gt;&gt;H: die()\n            else \u683c\u5b50\u6709\u5176\u4ed6\u4e3b\u4f53\n                NewCell--&gt;&gt;H: False (\u4e0d\u80fd\u8fdb\u5165)\n            else \u683c\u5b50\u4e3a\u7a7a &amp; \u975e\u6c34\u4f53\n                H-&gt;&gt;NewCell: \u79fb\u52a8\u5230\u65b0\u683c\u5b50\n            end\n        end\n    end\n\n    opt \u4eba\u53e3 &lt; min_size (6)\n        H-&gt;&gt;H: die()\n    end\n\n    H--&gt;&gt;Model: step \u5b8c\u6210</code></pre>"},{"location":"tech/sequence_diagram/#farmer","title":"Farmer \u884c\u4e3a\u8be6\u7ec6\u6d41\u7a0b","text":"<pre><code>sequenceDiagram\n    participant Model\n    participant F as Farmer\n    participant Cell as Current Cell\n    participant NewCell as Target Cell\n\n    Model-&gt;&gt;F: step()\n\n    Note over F: 1. \u4eba\u53e3\u589e\u957f\n    F-&gt;&gt;F: population_growth(rate=0.004)\n    F-&gt;&gt;F: size = size * (1 + growth_rate)\n\n    Note over F,Cell: 2. \u8f6c\u5316\u68c0\u67e5\n    F-&gt;&gt;F: convert()\n\n    alt \u8f6c\u5316\u5f00\u5173\u5f00\u542f\n        F-&gt;&gt;F: _convert_to_hunter()\n        opt size &lt;= 100 &amp; \u968f\u673a\n            F-&gt;&gt;Cell: \u68c0\u67e5 convert.farmer_to_hunter\n            alt \u5f00\u5173\u5f00\u542f\n                Cell-&gt;&gt;Cell: convert(farmer, \"Hunter\")\n                Cell-&gt;&gt;Model: \u521b\u5efa Hunter(size=farmer.size)\n                Cell-&gt;&gt;F: die()\n            end\n        end\n\n        opt \u672a\u8f6c\u5316 &amp; size &gt;= 200\n            F-&gt;&gt;F: _convert_to_rice()\n            opt \u5728\u6c34\u7a3b\u5730 &amp; \u968f\u673a\n                F-&gt;&gt;Cell: \u68c0\u67e5 convert.farmer_to_rice\n                alt \u5f00\u5173\u5f00\u542f\n                    Cell-&gt;&gt;Cell: convert(farmer, \"RiceFarmer\")\n                    Cell-&gt;&gt;Model: \u521b\u5efa RiceFarmer(size=farmer.size)\n                    Cell-&gt;&gt;F: die()\n                end\n            end\n        end\n    end\n\n    Note over F: 3. \u6269\u6563 (\u4eba\u53e3\u5b88\u6052)\n    F-&gt;&gt;F: diffuse(diffuse_prob=0.05)\n\n    alt \u968f\u673a\u89e6\u53d1\u6269\u6563\n        F-&gt;&gt;F: random_size(30, 60)\n        Note over F: \u4eba\u53e3\u5b88\u6052\uff1a\u5148\u521b\u5efa\u540e\u51cf\u5c11\n        F-&gt;&gt;Model: \u521b\u5efa\u65b0 Farmer(size=new_size)\n        F-&gt;&gt;F: size -= new_size\n\n        opt \u539f Farmer \u4ecd\u5b58\u6d3b\n            F-&gt;&gt;Cell: search_cell(new_farmer)\n            Cell--&gt;&gt;F: \u8fd4\u56de\u53ef\u8015\u5730\n            F-&gt;&gt;NewCell: \u65b0 Farmer \u79fb\u52a8\n            NewCell-&gt;&gt;NewCell: \u68c0\u67e5 able_to_live()\n        end\n    end\n\n    Note over F: 4. \u635f\u5931\n    F-&gt;&gt;F: loss()\n    alt \u968f\u673a\u89e6\u53d1 (prob=0.05)\n        F-&gt;&gt;F: size *= (1 - 0.1)\n    end\n\n    Note over F: 5. \u590d\u6742\u5316\u68c0\u67e5\n    opt size &gt; max_size\n        F-&gt;&gt;F: complicate()\n        F-&gt;&gt;F: growth_rate *= (1 - 0.1)\n        F-&gt;&gt;F: area += 2 * (1 - 0.1)\n    end\n\n    opt size &lt; min_size (6)\n        F-&gt;&gt;F: die()\n    end\n\n    F--&gt;&gt;Model: step \u5b8c\u6210</code></pre>"},{"location":"tech/sequence_diagram/#v20","title":"\u8f6c\u5316\u673a\u5236\u8be6\u7ec6\u6d41\u7a0b (v2.0 \u65b0\u589e\u5f00\u5173\u63a7\u5236)","text":"<pre><code>flowchart TD\n    Start([\u4e3b\u4f53\u5c1d\u8bd5\u8f6c\u5316]) --&gt; CheckGlobal{\u5168\u5c40\u5f00\u5173&lt;br/&gt;convert.enabled?}\n\n    CheckGlobal --&gt;|False| NoConvert[\u4e0d\u8f6c\u5316]\n    CheckGlobal --&gt;|True| CheckType{\u68c0\u67e5\u4e3b\u4f53\u7c7b\u578b}\n\n    CheckType --&gt;|Hunter| HunterConvert[Hunter \u8f6c\u5316\u903b\u8f91]\n    CheckType --&gt;|Farmer| FarmerConvert[Farmer \u8f6c\u5316\u903b\u8f91]\n    CheckType --&gt;|RiceFarmer| RiceConvert[RiceFarmer \u8f6c\u5316\u903b\u8f91]\n\n    HunterConvert --&gt; CheckH2F{hunter_to_farmer&lt;br/&gt;\u5f00\u5173?}\n    CheckH2F --&gt;|True| H2FCond{\u5468\u56f4\u6709 Farmer &amp;&lt;br/&gt;\u5f53\u524d\u53ef\u8015\u5730 &amp;&lt;br/&gt;\u968f\u673a\u89e6\u53d1?}\n    CheckH2F --&gt;|False| CheckH2R{hunter_to_rice&lt;br/&gt;\u5f00\u5173?}\n    H2FCond --&gt;|Yes| ConvertH2F[\u8f6c\u5316\u4e3a Farmer]\n    H2FCond --&gt;|No| CheckH2R\n\n    CheckH2R --&gt;|True| H2RCond{\u5468\u56f4\u6709 RiceFarmer &amp;&lt;br/&gt;\u6c34\u7a3b\u53ef\u8015\u5730 &amp;&lt;br/&gt;\u968f\u673a\u89e6\u53d1?}\n    CheckH2R --&gt;|False| NoConvert\n    H2RCond --&gt;|Yes| ConvertH2R[\u8f6c\u5316\u4e3a RiceFarmer]\n    H2RCond --&gt;|No| NoConvert\n\n    FarmerConvert --&gt; CheckF2H{farmer_to_hunter&lt;br/&gt;\u5f00\u5173?}\n    CheckF2H --&gt;|True| F2HCond{\u4eba\u53e3 &lt;= 100 &amp;&lt;br/&gt;\u968f\u673a\u89e6\u53d1?}\n    CheckF2H --&gt;|False| CheckF2R{farmer_to_rice&lt;br/&gt;\u5f00\u5173?}\n    F2HCond --&gt;|Yes| ConvertF2H[\u8f6c\u5316\u4e3a Hunter]\n    F2HCond --&gt;|No| CheckF2R\n\n    CheckF2R --&gt;|True| F2RCond{\u4eba\u53e3 &gt;= 200 &amp;&lt;br/&gt;\u5728\u6c34\u7a3b\u5730 &amp;&lt;br/&gt;\u968f\u673a\u89e6\u53d1?}\n    CheckF2R --&gt;|False| NoConvert\n    F2RCond --&gt;|Yes| ConvertF2R[\u8f6c\u5316\u4e3a RiceFarmer]\n    F2RCond --&gt;|No| NoConvert\n\n    RiceConvert --&gt; CheckR2F{rice_to_farmer&lt;br/&gt;\u5f00\u5173?}\n    CheckR2F --&gt;|True| R2FCond{\u4eba\u53e3 &lt; 200 &amp;&lt;br/&gt;\u968f\u673a\u89e6\u53d1?}\n    CheckR2F --&gt;|False| NoConvert\n    R2FCond --&gt;|Yes| ConvertR2F[\u8f6c\u5316\u4e3a Farmer]\n    R2FCond --&gt;|No| NoConvert\n\n    ConvertH2F --&gt; Create[\u521b\u5efa\u65b0\u4e3b\u4f53&lt;br/&gt;\u4fdd\u6301\u4eba\u53e3\u6570]\n    ConvertH2R --&gt; Create\n    ConvertF2H --&gt; Create\n    ConvertF2R --&gt; Create\n    ConvertR2F --&gt; Create\n\n    Create --&gt; Die[\u65e7\u4e3b\u4f53\u6b7b\u4ea1]\n    Die --&gt; End([\u8f6c\u5316\u5b8c\u6210])\n    NoConvert --&gt; End\n\n    style CheckGlobal fill:#ff9999\n    style Create fill:#99ff99\n    style Die fill:#ffcc99</code></pre>"},{"location":"tech/sequence_diagram/#v20_1","title":"\u6269\u6563\u673a\u5236\u4e0e\u4eba\u53e3\u5b88\u6052 (v2.0 \u6539\u8fdb)","text":"<pre><code>sequenceDiagram\n    participant Agent as \u539f\u4e3b\u4f53&lt;br/&gt;(size=100)\n    participant Model\n    participant NewAgent as \u65b0\u4e3b\u4f53\n    participant Cell as \u539f\u683c\u5b50\n    participant NewCell as \u76ee\u6807\u683c\u5b50\n\n    Note over Agent: \u89e6\u53d1\u6269\u6563\u6761\u4ef6\n    Agent-&gt;&gt;Agent: \u68c0\u67e5\u6269\u6563\u6761\u4ef6\n\n    alt Hunter: size &gt;= max_size\n        Agent-&gt;&gt;Agent: \u81ea\u52a8\u6269\u6563\n    else Farmer/RiceFarmer: \u968f\u673a\n        Agent-&gt;&gt;Agent: random() &lt; diffuse_prob\n    end\n\n    Note over Agent,Model: \u4eba\u53e3\u5b88\u6052\u5173\u952e\u6b65\u9aa4\n\n    rect rgb(255, 220, 220)\n        Note over Agent,NewAgent: \u6b65\u9aa41: \u5148\u521b\u5efa\u65b0\u4e3b\u4f53\n        Agent-&gt;&gt;Agent: new_size = random(min, max)\n        Agent-&gt;&gt;Agent: new_size = min(new_size, self.size)\n        Agent-&gt;&gt;Model: \u521b\u5efa\u65b0\u4e3b\u4f53(size=new_size)\n        Model-&gt;&gt;NewAgent: \u65b0\u4e3b\u4f53\u8bde\u751f\n    end\n\n    rect rgb(220, 255, 220)\n        Note over Agent: \u6b65\u9aa42: \u51cf\u5c11\u539f\u4e3b\u4f53\u4eba\u53e3\n        Agent-&gt;&gt;Agent: self.size -= new_size\n        Note over Agent: \ud83d\udd12 \u4eba\u53e3\u5b88\u6052\u68c0\u67e5\u70b9&lt;br/&gt;\u539f\u4eba\u53e3 = \u73b0\u4eba\u53e3 + \u65b0\u4eba\u53e3\n    end\n\n    alt \u539f\u4e3b\u4f53\u4eba\u53e3 &lt; min_size\n        Agent-&gt;&gt;Agent: die()\n        Note over Agent: \u539f\u4e3b\u4f53\u6b7b\u4ea1\n    end\n\n    rect rgb(220, 220, 255)\n        Note over NewAgent,NewCell: \u6b65\u9aa43: \u65b0\u4e3b\u4f53\u5bfb\u627e\u4f4d\u7f6e\n        NewAgent-&gt;&gt;Cell: search_cell(radius=1)\n        Cell-&gt;&gt;NewCell: \u68c0\u67e5\u5468\u56f4\u683c\u5b50\n\n        loop \u6269\u5927\u641c\u7d22\u534a\u5f84\n            NewCell-&gt;&gt;NewCell: able_to_live(new_agent)?\n            alt \u627e\u5230\u5408\u9002\u683c\u5b50\n                NewAgent-&gt;&gt;NewCell: \u79fb\u52a8\u5230\u65b0\u683c\u5b50\n            else \u672a\u627e\u5230\n                NewCell-&gt;&gt;Cell: \u6269\u5927\u534a\u5f84\u7ee7\u7eed\u641c\u7d22\n            end\n        end\n\n        alt \u641c\u7d22\u5931\u8d25 (\u534a\u5f84 &gt; max_travel_distance)\n            NewAgent-&gt;&gt;NewAgent: die()\n            Note over NewAgent: \u65b0\u4e3b\u4f53\u6b7b\u4ea1&lt;br/&gt;\u4f46\u4eba\u53e3\u5df2\u4ece\u539f\u4e3b\u4f53\u51cf\u5c11&lt;br/&gt;\u603b\u4eba\u53e3\u5b88\u6052\n        end\n    end\n\n    Note over Agent,NewAgent: \u6700\u7ec8\u7ed3\u679c\uff1a&lt;br/&gt;\u603b\u4eba\u53e3 = \u539f\u4e3b\u4f53\u5269\u4f59 + \u65b0\u4e3b\u4f53</code></pre>"},{"location":"tech/sequence_diagram/#v20_2","title":"\u683c\u5b50\u89c4\u5219\u68c0\u67e5\u6d41\u7a0b (v2.0 \u65b0\u589e\u6bcf\u683c\u552f\u4e00\u4e3b\u4f53)","text":"<pre><code>flowchart TD\n    Start([\u4e3b\u4f53\u5c1d\u8bd5\u8fdb\u5165\u683c\u5b50]) --&gt; HasAgent{\u683c\u5b50\u6709\u4e3b\u4f53?}\n\n    HasAgent --&gt;|No| CheckType{\u68c0\u67e5\u4e3b\u4f53\u7c7b\u578b}\n    HasAgent --&gt;|Yes| SameAgent{\u662f\u540c\u4e00\u4e2a\u4e3b\u4f53?}\n\n    SameAgent --&gt;|Yes| CheckType\n    SameAgent --&gt;|No| Reject[\u62d2\u7edd: \u6bcf\u683c\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53]\n\n    CheckType --&gt;|Hunter| CheckWater{\u662f\u6c34\u4f53?}\n    CheckType --&gt;|Farmer| CheckArable{\u662f\u53ef\u8015\u5730?}\n    CheckType --&gt;|RiceFarmer| CheckRiceArable{\u662f\u6c34\u7a3b\u53ef\u8015\u5730?}\n\n    CheckWater --&gt;|No| Allow[\u5141\u8bb8\u8fdb\u5165]\n    CheckWater --&gt;|Yes| Reject\n\n    CheckArable --&gt;|Yes| Allow\n    CheckArable --&gt;|No| Reject\n\n    CheckRiceArable --&gt;|Yes| Allow\n    CheckRiceArable --&gt;|No| Reject\n\n    Allow --&gt; Success([\u6210\u529f])\n    Reject --&gt; Fail([\u5931\u8d25])\n\n    style HasAgent fill:#ffcccc\n    style CheckType fill:#ccccff\n    style Allow fill:#ccffcc\n    style Reject fill:#ffcccc</code></pre>"},{"location":"tech/sequence_diagram/#_4","title":"\u6570\u636e\u6536\u96c6\u4e0e\u53ef\u89c6\u5316\u6d41\u7a0b","text":"<pre><code>sequenceDiagram\n    participant Model\n    participant DC as DataCollector\n    participant Agents as All Agents\n    participant Plot as ModelViz\n    participant File as Output Files\n\n    Note over Model,DC: \u6bcf\u4e2a\u65f6\u95f4\u6b65\n    loop \u6bcf\u4e2a tick\n        Model-&gt;&gt;DC: collect(model)\n        DC-&gt;&gt;Agents: \u7edf\u8ba1\u5404\u7c7b\u4e3b\u4f53\n        DC-&gt;&gt;DC: \u8ba1\u7b97 num_farmers\n        DC-&gt;&gt;DC: \u8ba1\u7b97 num_hunters\n        DC-&gt;&gt;DC: \u8ba1\u7b97 num_rice\n        DC-&gt;&gt;DC: \u8ba1\u7b97 len_farmers (\u7fa4\u4f53\u6570)\n        DC-&gt;&gt;DC: \u8ba1\u7b97 len_hunters\n        DC-&gt;&gt;DC: \u8ba1\u7b97 len_rice\n        DC-&gt;&gt;DC: \u5b58\u50a8\u5230 DataFrame\n    end\n\n    Note over Model,File: \u8fd0\u884c\u7ed3\u675f\n    Model-&gt;&gt;Model: end()\n\n    Model-&gt;&gt;Plot: plot.dynamic()\n    Plot-&gt;&gt;DC: \u83b7\u53d6\u65f6\u95f4\u5e8f\u5217\u6570\u636e\n    Plot-&gt;&gt;Plot: \u7ed8\u5236\u4eba\u53e3\u53d8\u5316\u8d8b\u52bf\n    Plot-&gt;&gt;File: \u4fdd\u5b58 repeat_X_dynamic.jpg\n\n    Model-&gt;&gt;Plot: plot.heatmap()\n    Plot-&gt;&gt;DC: \u83b7\u53d6\u65ad\u70b9\u6570\u636e\n    Plot-&gt;&gt;Plot: \u7ed8\u5236\u7a7a\u95f4\u70ed\u56fe\n    Plot-&gt;&gt;File: \u4fdd\u5b58 repeat_X_heatmap.jpg\n\n    Model-&gt;&gt;Model: export_conversion_data()\n    Model-&gt;&gt;Agents: \u7edf\u8ba1\u6765\u6e90\u8f6c\u5316\u77e9\u9635\n    Model-&gt;&gt;File: \u4fdd\u5b58 repeat_X_conversion.csv\n\n    File--&gt;&gt;Model: \u6240\u6709\u6587\u4ef6\u5df2\u4fdd\u5b58</code></pre>"},{"location":"tech/sequence_diagram/#_5","title":"\u4f7f\u7528\u8bf4\u660e","text":""},{"location":"tech/sequence_diagram/#_6","title":"\u5728\u6587\u6863\u4e2d\u5d4c\u5165\u65f6\u5e8f\u56fe","text":"<p>\u8fd9\u4e9b\u65f6\u5e8f\u56fe\u4f7f\u7528 Mermaid \u8bed\u6cd5\u7f16\u5199\uff0c\u4f1a\u81ea\u52a8\u5728\u6587\u6863\u4e2d\u6e32\u67d3\u6210\u53ef\u4ea4\u4e92\u7684\u56fe\u8868\u3002</p>"},{"location":"tech/sequence_diagram/#_7","title":"\u67e5\u770b\u65f6\u5e8f\u56fe","text":"<ol> <li>\u542f\u52a8\u6587\u6863\u670d\u52a1\u5668\uff1a<code>poetry run mkdocs serve</code></li> <li>\u8bbf\u95ee\u6b64\u9875\u9762\u67e5\u770b\u5b8c\u6574\u7684\u4ea4\u4e92\u5f0f\u65f6\u5e8f\u56fe</li> <li>\u53ef\u4ee5\u7f29\u653e\u3001\u5bfc\u51fa SVG/PNG</li> </ol>"},{"location":"tech/sequence_diagram/#_8","title":"\u4fee\u6539\u65f6\u5e8f\u56fe","text":"<p>\u76f4\u63a5\u7f16\u8f91\u672c\u6587\u4ef6\u4e2d\u7684 Mermaid \u4ee3\u7801\u5757\uff0c\u4fdd\u5b58\u540e\u81ea\u52a8\u66f4\u65b0\u3002</p>"},{"location":"tech/sequence_diagram/#_9","title":"\u5173\u952e\u6d41\u7a0b\u8bf4\u660e","text":""},{"location":"tech/sequence_diagram/#v20_3","title":"v2.0 \u91cd\u8981\u53d8\u66f4\u5728\u65f6\u5e8f\u56fe\u4e2d\u7684\u4f53\u73b0","text":"<ol> <li>\u8f6c\u5316\u673a\u5236\u5f00\u5173\uff1a\u6bcf\u4e2a\u8f6c\u5316\u64cd\u4f5c\u90fd\u4f1a\u68c0\u67e5\u5bf9\u5e94\u7684\u5f00\u5173</li> <li>\u4eba\u53e3\u5b88\u6052\uff1a\u6269\u6563\u65f6\u5148\u521b\u5efa\u65b0\u4e3b\u4f53\uff0c\u518d\u51cf\u5c11\u539f\u4e3b\u4f53\u4eba\u53e3</li> <li>\u635f\u5931\u673a\u5236\uff1aHunter \u73b0\u5728\u4e5f\u6709 loss() \u6b65\u9aa4</li> <li>\u6bcf\u683c\u552f\u4e00\uff1aable_to_live() \u68c0\u67e5\u683c\u5b50\u662f\u5426\u5df2\u6709\u5176\u4ed6\u4e3b\u4f53</li> <li>\u521d\u59cb\u5316\uff1a\u540c\u65f6\u521b\u5efa\u4e09\u7c7b\u4e3b\u4f53\uff0c\u4e0d\u518d\u7b49\u5f85\u7279\u5b9a tick</li> </ol>"},{"location":"tech/sequence_diagram/#_10","title":"\u5173\u952e\u65f6\u95f4\u70b9","text":"<ul> <li>tick=0\uff1a\u521d\u59cb\u5316\uff0c\u521b\u5efa\u6240\u6709\u4e09\u7c7b\u4e3b\u4f53</li> <li>\u6bcf\u4e2a tick\uff1a</li> <li>\u73af\u5883\u6b65\u9aa4\uff08\u6dfb\u52a0\u65b0\u4e3b\u4f53\uff09</li> <li>\u4e3b\u4f53\u6b65\u9aa4\uff08\u968f\u673a\u6267\u884c\u6240\u6709\u4e3b\u4f53\u7684 step\uff09</li> <li>\u6570\u636e\u6536\u96c6</li> <li>tick=end\uff1a\u7ed3\u675f\uff0c\u7ed8\u56fe\u548c\u5bfc\u51fa\u6570\u636e</li> </ul>"},{"location":"tech/sequence_diagram/#_11","title":"\u53c2\u8003\u6587\u6863","text":"<ul> <li>\u5de5\u4f5c\u6d41\u7a0b - \u6587\u5b57\u63cf\u8ff0</li> <li>\u53d8\u66f4\u65e5\u5fd7 - \u8be6\u7ec6\u53d8\u66f4\u8bf4\u660e</li> <li>\u914d\u7f6e\u6587\u4ef6 - \u53c2\u6570\u8bf4\u660e</li> </ul>"},{"location":"usage/config/","title":"\u914d\u7f6e\u6587\u4ef6","text":"<p>\u914d\u7f6e\u6587\u4ef6\u662f\u6a21\u578b\u8fd0\u884c\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u6a21\u578b\u8fd0\u884c\u65f6\uff0c\u4f1a\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u53c2\u6570\u8fdb\u884c\u6a21\u62df\u3002\u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u4e3aYAML\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539\u6a21\u578b\u53c2\u6570\u3002</p> <p>\u914d\u7f6e\u6587\u4ef6\u7684\u9ed8\u8ba4\u4f4d\u7f6e\u4e3a<code>config/config.yaml</code>\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u6a21\u578b\u65f6\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff1a</p>"},{"location":"usage/config/#_1","title":"\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784","text":"<p>\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p>"},{"location":"usage/config/#convert","title":"convert","text":"<p>\u8f6c\u5316\u673a\u5236\u5f00\u5173\uff0c\u63a7\u5236\u4e0d\u540c\u4e3b\u4f53\u7c7b\u578b\u4e4b\u95f4\u7684\u8f6c\u5316\u884c\u4e3a\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e enabled bool true \u5168\u5c40\u8f6c\u5316\u5f00\u5173\uff0c\u5173\u95ed\u540e\u6240\u6709\u8f6c\u5316\u90fd\u4e0d\u4f1a\u53d1\u751f hunter_to_farmer bool true \u72e9\u730e\u91c7\u96c6\u8005\u80fd\u5426\u8f6c\u5316\u4e3a\u519c\u6c11 hunter_to_rice bool true \u72e9\u730e\u91c7\u96c6\u8005\u80fd\u5426\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11 farmer_to_hunter bool true \u519c\u6c11\u80fd\u5426\u8f6c\u5316\u4e3a\u72e9\u730e\u91c7\u96c6\u8005 farmer_to_rice bool true \u519c\u6c11\u80fd\u5426\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11 rice_to_farmer bool true \u6c34\u7a3b\u519c\u6c11\u80fd\u5426\u8f6c\u5316\u4e3a\u519c\u6c11 <p>\u6ce8\u610f\uff1a\u6b64\u529f\u80fd\u5141\u8bb8\u60a8\u5173\u95ed\u8f6c\u5316\u673a\u5236\uff0c\u4ee5\u5bf9\u6bd4\u6709/\u65e0\u8f6c\u5316\u7684\u6a21\u578b\u884c\u4e3a\u5dee\u5f02\u3002</p>"},{"location":"usage/config/#exp","title":"exp","text":"<p>\u5b9e\u9a8c\u914d\u7f6e\uff0c\u5305\u62ec\u5b9e\u9a8c\u540d\u79f0\u3001\u91cd\u590d\u6b21\u6570\u3001\u8fdb\u7a0b\u6570\u3001\u7ed8\u56fe\u53d8\u91cf\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e name str - \u5b9e\u9a8c\u540d\u79f0 repeats int 1 \u6bcf\u7ec4\u53c2\u6570\u7684\u91cd\u590d\u6b21\u6570 num_process int 1 \u5e76\u884c\u8fd0\u7b97\u7684\u8fdb\u7a0b\u6570 plot_heatmap str - \u7ed8\u5236\u70ed\u56fe\u7684\u53d8\u91cf"},{"location":"usage/config/#model","title":"model","text":"<p>\u6a21\u578b\u914d\u7f6e\uff0c\u5305\u62ec\u6a21\u578b\u53c2\u6570\uff0c\u5982\u7ade\u4e89\u5931\u8d25\u8005\u7684\u4eba\u53e3\u635f\u5931\u7cfb\u6570\u3001\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e save_plots bool True \u662f\u5426\u4fdd\u5b58\u7ed8\u56fe loss_rate float 0.5 \u7ade\u4e89\u5931\u8d25\u8005\u7684\u4eba\u53e3\u635f\u5931\u7cfb\u6570 n_bkps int 1 \u65ad\u70b9\u6570\u91cf detect_bkp_by str 'size' \u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5"},{"location":"usage/config/#reports","title":"reports","text":"<p>\u51b3\u5b9a\u4e86\u62a5\u544a\u7684\u8f93\u51fa\u5185\u5bb9\uff0c\u5305\u62ec\u62a5\u544a\u7684\u540d\u79f0\u3001\u62a5\u544a\u7684\u53d8\u91cf\u7b49\u3002\u53d8\u91cf\u547d\u540d\u89c4\u5219\u4e3a <code>{report_type}_{group}_{variable_type}</code>\uff0c\u4f8b\u5982\uff1a</p> <ul> <li><code>len_farmers</code>: \u519c\u6c11\uff0c\u56e2\u4f53\u6570\uff0c\u5360\u603b\u4eba\u53e3\u6bd4\u4f8b</li> <li> <p><code>num_farmers_n</code>: \u519c\u6c11\uff0c\u4eba\u53e3\u6570\uff0c\u7edd\u5bf9\u4eba\u53e3\u6570\u91cf</p> </li> <li> <p>\u62a5\u544a\u540d\u79f0\u5305\u62ec\uff1a</p> </li> <li><code>model</code>: \u6a21\u578b\u62a5\u544a\uff0c\u5355\u6b21\u5b9e\u9a8c\u6bcf\u4e2a\u65f6\u95f4\u6b65\u90fd\u8bb0\u5f55\u7684\u53d8\u91cf</li> <li><code>final</code>: \u5b9e\u9a8c\u62a5\u544a\uff0c\u6bcf\u6b21\u5b9e\u9a8c\u53ea\u5728\u7ed3\u675f\u65f6\u8bb0\u5f55\u7684\u53d8\u91cf</li> <li>\u4e3b\u4f53\u5305\u62ec\uff1a</li> <li><code>farmers</code>: \u519c\u6c11</li> <li><code>hunters</code>: \u72e9\u730e\u91c7\u96c6\u8005</li> <li><code>rice</code>: \u6c34\u7a3b</li> <li>\u53d8\u91cf\u7c7b\u578b\u5305\u62ec\uff1a</li> <li><code>num</code>: \u7edd\u5bf9\u4eba\u53e3\u6570\u91cf</li> <li><code>len</code>: \u56e2\u4f53\u6570</li> <li><code>ratio</code>: \u5360\u603b\u4eba\u53e3\u6bd4\u4f8b\uff08\u4ec0\u4e48\u5c3e\u7f00\u90fd\u6ca1\u52a0\u65f6\u9ed8\u8ba4\u4f7f\u7528\u8fd9\u4e2a\uff09</li> <li><code>bkp</code>: \u65ad\u70b9\u4f4d\u7f6e\uff08\u5e74\u4efd\uff0c\u6216tick\u6570\uff09</li> <li><code>pre</code>: \u65ad\u70b9\u524d\u7684\u4eba\u53e3\u589e\u957f\u7387</li> <li><code>post</code>: \u65ad\u70b9\u540e\u7684\u4eba\u53e3\u589e\u957f\u7387</li> </ul>"},{"location":"usage/config/#env","title":"env","text":"<p>\u73af\u5883\u914d\u7f6e\uff0c\u5305\u62ec\u73af\u5883\u53c2\u6570\uff0c\u5982\u73af\u5883\u5bb9\u91cf\u3001\u521d\u59cb\u4e3b\u4f53\u6570\u91cf\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e lim_h float 31.93 \u73af\u5883\u627f\u8f7d\u529b\uff08\u4eba/\u767e\u5e73\u65b9\u516c\u91cc\uff09 init_hunters float 0.05 \u521d\u59cb\u72e9\u730e\u91c7\u96c6\u8005\u6bd4\u4f8b\u6216\u6570\u91cf\uff08&lt;1\u65f6\u4e3a\u6bd4\u4f8b\uff0c\u22651\u65f6\u4e3a\u6570\u91cf\uff09 init_farmers int 80 \u521d\u59cb\u666e\u901a\u519c\u6c11\u4e3b\u4f53\u6570\u91cf\uff08\u63a8\u8350\u8303\u56f4 60-100\uff09 init_rice_farmers int 350 \u521d\u59cb\u6c34\u7a3b\u519c\u6c11\u4e3b\u4f53\u6570\u91cf\uff08\u63a8\u8350\u8303\u56f4 300-400\uff09 lam_farmer float 1 \u6bcf\u6b65\u6dfb\u52a0\u519c\u6c11\u7684\u671f\u671b\u503c\uff08\u6cca\u677e\u5206\u5e03\u53c2\u6570\uff09 lam_ricefarmer float 1 \u6bcf\u6b65\u6dfb\u52a0\u6c34\u7a3b\u519c\u6c11\u7684\u671f\u671b\u503c\uff08\u6cca\u677e\u5206\u5e03\u53c2\u6570\uff09 tick_farmer int 0 \u519c\u6c11\u5f00\u59cb\u6dfb\u52a0\u7684\u65f6\u95f4\u6b65\uff080\u8868\u793a\u4ece\u4e00\u5f00\u59cb\u5c31\u6709\uff09 tick_ricefarmer int 0 \u6c34\u7a3b\u519c\u6c11\u5f00\u59cb\u6dfb\u52a0\u7684\u65f6\u95f4\u6b65\uff080\u8868\u793a\u4ece\u4e00\u5f00\u59cb\u5c31\u6709\uff09 <p>\u63d0\u793a\uff1a<code>tick_farmer</code> \u548c <code>tick_ricefarmer</code> \u73b0\u5728\u9ed8\u8ba4\u4e3a 0\uff0c\u8868\u793a\u4ece\u6a21\u578b\u521d\u59cb\u5316\u65f6\u5c31\u521b\u5efa\u8fd9\u4e9b\u4e3b\u4f53\uff0c\u800c\u4e0d\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u624d\u5f00\u59cb\u6dfb\u52a0\u3002</p>"},{"location":"usage/config/#time","title":"time","text":"<p>\u65f6\u95f4\u914d\u7f6e\uff0c\u5305\u62ec\u65f6\u95f4\u53c2\u6570\uff0c\u5982\u65f6\u95f4\u6b65\u6570\u3001\u65f6\u95f4\u6b65\u957f\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e end int 10 \u65f6\u95f4\u6b65\u6570"},{"location":"usage/config/#farmer","title":"Farmer","text":"<p>\u519c\u6c11\u914d\u7f6e\uff0c\u5305\u62ec\u519c\u6c11\u53c2\u6570\uff0c\u5982\u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387\u3001\u6269\u6563\u6982\u7387\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e area int 2 \u519c\u6c11\u6d3b\u52a8\u8303\u56f4\uff08\u516c\u91cc\uff09 growth_rate float 0.004 \u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387\uff08\u6bcf\u6b65\uff09 min_size int 6 \u6700\u5c0f\u519c\u6c11\u7fa4\u4f53\u6570\uff0c\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u65f6\u4f1a\u6b7b\u6389 init_size list [60, 100] \u521d\u59cb\u519c\u6c11\u4eba\u53e3\u89c4\u6a21\u8303\u56f4\uff08\u521d\u59cb\u5316\u65f6\u968f\u673a\u53d6\u503c\uff09 new_group_size list [30, 60] \u6269\u6563\u65f6\u65b0\u519c\u6c11\u7fa4\u4f53\u5927\u5c0f\u8303\u56f4 diffuse_prob float 0.05 \u519c\u6c11\u6269\u6563\u6982\u7387\uff0c\u6bcf\u6b65\u6709\u6b64\u6982\u7387\u5411\u5916\u6269\u6563 complexity float 0.1 \u590d\u6742\u5316\u540e\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u6bd4\u4f8b convert_prob dict - \u8f6c\u6362\u6982\u7387\uff08to_hunter, to_rice\uff09 convert_threshold dict - \u8f6c\u6362\u9608\u503c\uff08to_hunter: \u8d85\u8fc7\u6b64\u503c\u4e0d\u518d\u8f6c\u5316\uff0cto_rice: \u8d85\u8fc7\u6b64\u503c\u624d\u80fd\u8f6c\u5316\uff09 max_travel_distance int 5 \u6269\u6563\u65f6\u6700\u5927\u641c\u7d22\u8ddd\u79bb capital_area float 0.004 \u4eba\u5747\u8015\u5730\u9762\u79ef\uff08\u5e73\u65b9\u516c\u91cc\uff09 loss dict - \u635f\u5931\u673a\u5236\uff08prob: \u53d1\u751f\u6982\u7387\uff0crate: \u635f\u5931\u6bd4\u7387\uff09"},{"location":"usage/config/#hunter","title":"Hunter","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u914d\u7f6e\uff0c\u5305\u62ec\u72e9\u730e\u91c7\u96c6\u8005\u53c2\u6570\uff0c\u5982\u4eba\u53e3\u589e\u957f\u7387\u3001\u79fb\u52a8\u89c4\u5219\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e init_size list [0, 35] \u521d\u59cb\u5316\u65f6\u7684\u4eba\u53e3\u89c4\u6a21\u8303\u56f4\uff0c\u5c0f\u4e8e min_size \u65f6\u81ea\u52a8\u8c03\u6574\u4e3a min_size growth_rate float 0.0008 \u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u589e\u957f\u7387\uff08\u6bcf\u6b65\uff09 min_size int 6 \u6700\u5c0f\u7fa4\u4f53\u89c4\u6a21\uff0c\u5c0f\u4e8e\u6b64\u503c\u4f1a\u6b7b\u4ea1 max_size int 100 \u5355\u4f4d\u4e3b\u4f53\u4eba\u53e3\u6700\u5927\u503c\uff08\u666e\u901a\u60c5\u51b5\uff09 max_size_water int 500 \u4e34\u8fd1\u6c34\u4f53\u65f6\u7684\u6700\u5927\u503c new_group_size list [6, 31] \u6269\u6563\u65f6\u65b0\u7fa4\u4f53\u5927\u5c0f\u8303\u56f4 convert_prob dict - \u8f6c\u6362\u6982\u7387\uff08to_farmer, to_rice\uff09 max_travel_distance int 5 \u79fb\u52a8\u65f6\u6700\u5927\u641c\u7d22\u8ddd\u79bb is_complex int 100 \u8d85\u8fc7\u6b64\u503c\u53d8\u4e3a\u5b9a\u5c45\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u4e0d\u518d\u79fb\u52a8 loss dict - \u635f\u5931\u673a\u5236\uff08prob: \u53d1\u751f\u6982\u7387\uff0crate: \u635f\u5931\u6bd4\u7387\uff09 <p>\u91cd\u8981\u53d8\u66f4\uff1a - \u274c \u5df2\u5220\u9664 <code>intensified_coefficient</code> \u53c2\u6570\uff08\u4e0d\u518d\u6709\u7ade\u4e89\u673a\u5236\uff09 - \u2705 \u65b0\u589e <code>max_size</code> \u548c <code>max_size_water</code> \u53c2\u6570 - \u2705 \u65b0\u589e <code>loss</code> \u53c2\u6570\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u73b0\u5728\u4e5f\u4f1a\u7ecf\u5386\u968f\u673a\u635f\u5931</p>"},{"location":"usage/config/#ricefarmer","title":"RiceFarmer","text":"<p>\u6c34\u7a3b\u519c\u6c11\u914d\u7f6e\uff0c\u5305\u62ec\u6c34\u7a3b\u519c\u6c11\u53c2\u6570\uff0c\u5982\u4eba\u53e3\u589e\u957f\u7387\u3001\u6269\u6563\u6982\u7387\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e area int 2 \u6c34\u7a3b\u519c\u6c11\u6d3b\u52a8\u8303\u56f4\uff08\u516c\u91cc\uff09 growth_rate float 0.005 \u6c34\u7a3b\u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387\uff08\u6bcf\u6b65\uff09 min_size int 6 \u6700\u5c0f\u7fa4\u4f53\u89c4\u6a21\uff0c\u5c0f\u4e8e\u6b64\u503c\u4f1a\u6b7b\u4ea1 init_size list [300, 400] \u521d\u59cb\u6c34\u7a3b\u519c\u6c11\u4eba\u53e3\u89c4\u6a21\u8303\u56f4\uff08\u521d\u59cb\u5316\u65f6\u968f\u673a\u53d6\u503c\uff09 new_group_size list [200, 300] \u6269\u6563\u65f6\u65b0\u7fa4\u4f53\u5927\u5c0f\u8303\u56f4 diffuse_prob float 0.05 \u6269\u6563\u6982\u7387\uff0c\u6bcf\u6b65\u6709\u6b64\u6982\u7387\u5411\u5916\u6269\u6563 complexity float 0.1 \u590d\u6742\u5316\u540e\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u6bd4\u4f8b convert_prob dict - \u8f6c\u6362\u6982\u7387\uff08to_farmer\uff09\uff0c\u4e0d\u80fd\u5411\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u6362 convert_threshold dict - \u8f6c\u6362\u9608\u503c\uff08to_farmer: \u4f4e\u4e8e\u6b64\u503c\u624d\u80fd\u8f6c\u5316\uff09 max_travel_distance int 5 \u6269\u6563\u65f6\u6700\u5927\u641c\u7d22\u8ddd\u79bb capital_area float 0.002 \u4eba\u5747\u8015\u5730\u9762\u79ef\uff08\u5e73\u65b9\u516c\u91cc\uff09 loss dict - \u635f\u5931\u673a\u5236\uff08prob: \u53d1\u751f\u6982\u7387\uff0crate: \u635f\u5931\u6bd4\u7387\uff09"},{"location":"usage/config/#db","title":"db","text":"<p>\u6570\u636e\u5e93\u914d\u7f6e\uff0c\u5305\u62ec\u6570\u636e\u5e93\u53c2\u6570\uff0c\u5982\u6570\u636e\u5e93\u8def\u5f84\u3001\u6570\u636e\u5e93\u7c7b\u578b\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e dem str - \u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u8def\u5f84 slo str - \u571f\u58e4\u7c7b\u578b\u8def\u5f84 asp str - \u5761\u5ea6\u8def\u5f84 farmland str - \u8015\u5730\u8def\u5f84 lim_h str - \u73af\u5883\u5bb9\u91cf\u8def\u5f84"},{"location":"usage/plots/","title":"\u5b9e\u9a8c\u7ed3\u679c\u7684\u5c55\u793a","text":""},{"location":"usage/plots/#_1","title":"\u7ed8\u5236\u70ed\u56fe","text":"<p>\u901a\u8fc7\u8c03\u6574\u7ed8\u5236\u70ed\u56fe\u7684\u53d8\u91cf\u53c2\u6570<code>plot_heatmap</code>\uff0c\u53ef\u4ee5\u7ed8\u5236\u4e0d\u540c\u7684\u6a21\u62df\u7ed3\u679c\uff1a</p> <ul> <li>\u5f53<code>plot_heatmap</code>\u4e3a<code>None</code>\u65f6\uff0c\u4e0d\u7ed8\u5236\u70ed\u56fe\u3002</li> <li>\u5f53<code>plot_heatmap</code>\u4e3a<code>bkp_farmer</code>\u65f6\uff0c\u7ed8\u5236[\u519c\u6c11]\u7684\u65ad\u70b9\u5e73\u5747\u6240\u5728\u4f4d\u7f6e\u3002</li> <li>... \u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u8fd0\u884c\u7ed3\u675f\u65f6\u4fdd\u5b58\u7684\u5176\u5b83\u53ef\u7528\u53d8\u91cf\uff0c\u5982<code>bkp_rice</code>\u3001<code>len_farmers</code>\u3001<code>len_rice</code>\u7b49\u3002</li> </ul> <p>\u5982\u4e0b\u56fe\u4e2d\uff0c\u70ed\u529b\u56fe\u4ee3\u8868[\u519c\u6c11]\u7684\u65ad\u70b9\u5e73\u5747\u6240\u5728\u4f4d\u7f6e\uff0c\u65e0\u8bba <code>env.lam_farmer</code> \u548c <code>env.init_hunters</code> \u4e24\u4e2a\u5b9e\u9a8c\u7684\u53c2\u6570\u503c\u600e\u6837\u53d8\u5316\uff0c\u65ad\u70b9\u5e73\u5747\u4f4d\u7f6e\uff08\u8bb0\u4f4f\u6bcf\u4e2a\u5b9e\u9a8c\u91cd\u590d5\u6b21\uff09\u57fa\u672c\u4e0d\u53d8\uff0c\u90fd\u51fa\u73b0\u5728 <code>tick=5</code> \u9644\u8fd1\u3002</p> <p></p>"},{"location":"usage/quick_start/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"usage/quick_start/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u6a21\u578b\u7684\u4e3b\u8981\u5de5\u4f5c\u6d41\u7a0b\u5df2\u7ecf\u96c6\u6210\u5b8c\u6bd5\u3002\u7528\u6237\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u6a21\u578b\u3002</p> <ul> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u73af\u5883\u914d\u7f6e</li> <li>\u8fd0\u884c\u6a21\u578b</li> <li>\u6570\u636e\u8f93\u51fa\u4e0e\u5206\u6790<ul> <li>\u591a\u6b21\u5b9e\u9a8c</li> <li>\u5355\u6b21\u5b9e\u9a8c</li> </ul> </li> </ul>"},{"location":"usage/quick_start/#_2","title":"\u73af\u5883\u914d\u7f6e","text":"<p>Note</p> <p>\u672c\u6a21\u578b\u4f9d\u8d56<code>Python &gt; 3.9</code>\u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u8bf7\u5148\u5b89\u88c5\u597d<code>Python</code>\uff0c\u5e76\u5b89\u88c5\u597d<code>poetry</code>\u6216<code>pip</code>\u3002</p> <p>\u9996\u5148\u5c06\u672c\u6a21\u578b\u514b\u9686\u5230\u672c\u5730\uff0c\u6ce8\u610f\u66ff\u6362<code>&lt;your folder name&gt;</code>\u4e3a\u4f60\u559c\u6b22\u7684\u6587\u4ef6\u5939\u540d\u79f0\uff1a</p> <pre><code>git clone https://github.com/SongshGeo/SC-20230710-SCE.git &lt;your folder name&gt;\n</code></pre> <p>\u7136\u540e\u5728\u7ec8\u7aef\u8fdb\u5165\u6a21\u578b\u6240\u5728\u6587\u4ef6\u5939\uff1a</p> <pre><code>cd &lt;your folder name&gt;\n</code></pre> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <p>\u9009\u98791: \u4f7f\u7528<code>poetry</code>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>make setup\n</code></pre> <p>\u9009\u98792: \u4f7f\u7528<code>pip</code>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"usage/quick_start/#_3","title":"\u8fd0\u884c\u6a21\u578b","text":"<p>\u60a8\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u53c2\u6570\uff0c\u8ba9\u5b9e\u9a8c\u7ed3\u679c\u66f4\u7b26\u5408\u60a8\u7684\u9884\u671f\uff0c\u6216\u8fdb\u884c\u591a\u7ec4\u5b9e\u9a8c\u3002\u53c2\u6570\u540d\u79f0\u4e00\u822c\u90fd\u5f88\u76f4\u89c2\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u4fee\u6539\u3002\u8bf7\u6ce8\u610f\u4fdd\u6301\u53c2\u6570\u540d\u79f0\u524d\u7684\u7f29\u8fdb\uff0c\u4e0d\u8981\u8f7b\u6613\u4fee\u6539\u53c2\u6570\u540d\uff0c\u5e76\u5c0f\u5fc3\u4fdd\u6301YAML\u683c\u5f0f\u7684\u6b63\u786e\u6027\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u591a\u7ec4\u5b9e\u9a8c\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53cd\u590d\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u7684<code>config</code>\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u6587\u4ef6<code>config_2.yaml</code>\u3002\u7136\u540e\u5728\u8fd0\u884c\u6a21\u578b\u65f6\uff0c\u9009\u62e9\u5bf9\u5e94\u7684\u53c2\u6570\u6587\u4ef6\uff1a</p> <pre><code>python main.py --config-name config_2\n</code></pre> <p>\u5982\u679c\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b8c\u6574\u8def\u5f84\uff1a</p> <pre><code>python main.py --config-name config/custom/config_2\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8986\u76d6\u7279\u5b9a\u7684\u53c2\u6570\u503c\uff1a</p> <pre><code>python main.py --config-name config_2 model.parameter1=new_value\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u6307\u5b9a\u53c2\u6570\u8fdb\u884c\u6279\u91cf\u8fd0\u884c\u7684\u5b9e\u9a8c\uff1a</p> <pre><code>python main.py --config-name config_2 model.parameter1=v1,v2,v3 model.parameter2=a1,a2\n</code></pre> <p>\u6279\u91cf\u8fd0\u884c\u5b9e\u9a8c\u65f6\uff0c\u6240\u6709\u53c2\u6570\u7684\u7b1b\u5361\u5c14\u79ef\u7ec4\u5408\u90fd\u4f1a\u88ab\u8fd0\u884c\u3002\u5373\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u5982\u679c <code>model.parameter1</code> \u67093\u4e2a\u53d6\u503c\uff0c<code>model.parameter2</code> \u67092\u4e2a\u53d6\u503c\uff0c\u90a3\u4e48\u6700\u7ec8\u4f1a\u8fd0\u884c <code>3 * 2 = 6</code> \u7ec4\u53c2\u6570\u5b9e\u9a8c\uff0c\u800c\u4e14\u6bcf\u6b21\u5b9e\u9a8c\u90fd\u4f1a\u8fdb\u884c <code>exp.repeat</code> \u6b21\u91cd\u590d\u5b9e\u9a8c\uff08\u9ed8\u8ba4\u4e3a5\u6b21\uff09\u3002</p>"},{"location":"usage/quick_start/#_4","title":"\u6570\u636e\u8f93\u51fa\u4e0e\u5206\u6790","text":"<p>\u6a21\u578b\u6216\u5b9e\u9a8c\u8fd0\u884c\u540e\uff0c\u901a\u5e38\u4f1a\u81ea\u52a8\u8f93\u51fa\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u6570\u636e\u5e76\u7ed8\u5236\u76f8\u5e94\u56fe\u8868\uff0c\u5177\u4f53\u5305\u62ec\uff1a</p>"},{"location":"usage/quick_start/#_5","title":"\u591a\u6b21\u5b9e\u9a8c","text":"<p>\u8fd0\u884c\u4e00\u6b21\u5b9e\u9a8c\u540e\uff0c\u5728<code>out/&lt;model name&gt;/&lt;date&gt;/&lt;time&gt;</code>\u8def\u5f84\u4e0b\u4f1a\u4fdd\u5b58\u672c\u6b21\u5b9e\u9a8c\u7684\u6240\u6709\u8f93\u51fa\u7ed3\u679c\u3002\u5176\u4e2d <code>&lt;model name&gt;</code> \u662f\u60a8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u6a21\u578b\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a <code>south_china_evolution</code>\uff09\uff0c<code>&lt;date&gt;</code> \u662f\u5b9e\u9a8c\u8fd0\u884c\u7684\u65e5\u671f\uff0c<code>&lt;time&gt;</code> \u662f\u5b9e\u9a8c\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5939\u4e2d\u5305\u62ec\uff1a</p> <ul> <li><code>multirun.yaml</code>\uff1a\u5b9e\u9a8c\u914d\u7f6e\u6587\u4ef6\uff0c\u8bb0\u5f55\u4e86\u5b9e\u9a8c\u7684\u53c2\u6570\u8bbe\u7f6e\uff0c\u6709\u54ea\u4e9b\u53c2\u6570\u88ab\u4fee\u6539\u8fc7\uff0c\u53d6\u503c\u8303\u56f4\u7b49\uff1b</li> <li>\u6587\u4ef6\u5939 <code>&lt;job.id&gt;_&lt;config&gt;</code>\uff1a\u8bb0\u5f55\u4e86\u5f53\u524d <code>&lt;config&gt;</code> \u914d\u7f6e\u4e0b\uff0c\u6240\u6709\u5355\u6b21\u5b9e\u9a8c\u7684\u8f93\u51fa\u7ed3\u679c\uff1b<code>&lt;job.id&gt;</code> \u662f\u5b50\u5b9e\u9a8c\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u5373\u8be5\u7ec4\u53c2\u6570\u914d\u7f6e\u76f8\u540c\u3002</li> <li><code>breakpoints.jpg</code>: \u4e00\u4e2a <code>3 * &lt;jobs&gt;</code> \u7684\u77e9\u9635\u56fe\uff0c\u5bf9\u6bcf\u7ec4\u53c2\u6570\u914d\u7f6e\uff08\u552f\u4e00\u7684 <code>&lt;job.id&gt;</code>\uff09\uff0c\u7ed8\u5236\u4e86\u8be5\u7ec4\u53c2\u6570\u4e0b\uff0c\u6240\u6709\u5b50\u5b9e\u9a8c\u7684 <code>breakpoint</code> \u5206\u5e03\u56fe\u3002</li> <li><code>heatmap.jpg</code>: \u4e00\u4e2a <code>x * y</code> \u7684\u77e9\u9635\u56fe\uff0c\u5e94\u6ee1\u8db3 <code>x * y = jobs</code>\uff0c\u5c55\u793a2\u7ef4\u53c2\u6570\u914d\u7f6e\u4fe9\u4fe9\u7ec4\u5408\u4e0b\uff0c\u5b9e\u9a8c\u67d0\u53d8\u91cf\u7684\u5e73\u5747\u8f93\u51fa\u7ed3\u679c\u3002</li> <li><code>len_&lt;breed&gt;_&lt;ratio&gt;.jpg</code>: \u6bcf\u7ec4\u53c2\u6570\u914d\u7f6e\u4e0b\uff0c\u6240\u6709\u5b50\u5b9e\u9a8c <code>&lt;breed&gt;</code> \u8fd9\u79cd\u4e3b\u4f53\u7684\u7fa4\u4f53\u6570\u5360\u5168\u90e8\u7fa4\u4f53\u6570\u7684\u6bd4\u4f8b\u53d8\u5316\u56fe\u3002</li> <li><code>num_&lt;breed&gt;_&lt;ratio&gt;.jpg</code>: \u6bcf\u7ec4\u53c2\u6570\u914d\u7f6e\u4e0b\uff0c\u6240\u6709\u5b50\u5b9e\u9a8c <code>&lt;breed&gt;</code> \u8fd9\u79cd\u4e3b\u4f53\u7684\u4e2a\u4f53\u6570\u5360\u5168\u90e8\u7fa4\u4f53\u6570\u7684\u6bd4\u4f8b\u53d8\u5316\u56fe\u3002</li> <li>summary.csv: \u5bf9\u672c\u6b21\u5b9e\u9a8c\u7684\u603b\u7ed3\uff0c\u6bcf\u4e2a\u53c2\u6570\u914d\u7f6e\u4e0b\u6bcf\u6b21\u91cd\u590d\u7684\u6700\u7ec8\u7ed3\u679c\u3002</li> </ul>"},{"location":"usage/quick_start/#_6","title":"\u5355\u6b21\u5b9e\u9a8c","text":"<ul> <li><code>ABSESpyExp.log</code>\uff1a\u5b9e\u9a8c\u65e5\u5fd7</li> <li><code>repeat_&lt;x&gt;_&lt;figure&gt;.png/jpg</code>\uff1a\u5b9e\u9a8c\u56fe\u8868\uff0c<code>&lt;x&gt;</code>\u4e3a\u5b9e\u9a8c\u5e8f\u53f7\uff0c<code>&lt;figure&gt;</code>\u4e3a\u56fe\u8868\u540d\u79f0\uff0c\u5305\u62ec\uff1a<ol> <li><code>hist.jpg</code>: \u4eba\u53e3\u548c\u65cf\u7fa4\u6570\u91cf\u7684\u5206\u5e03</li> <li><code>dynamic.jpg</code>: \u4eba\u53e3\u548c\u65cf\u7fa4\u6570\u91cf\u7684\u53d8\u5316\u8d8b\u52bf</li> <li><code>heatmap.jpg</code>: \u4eba\u53e3\u7a7a\u95f4\u5206\u5e03\u70ed\u529b\u56fe\uff08\u5730\u56fe\uff09</li> </ol> </li> <li><code>repeat_&lt;x&gt;_conversion.csv</code>: \u4eba\u53e3\u8f6c\u5316\u60c5\u51b5\uff0c\u8bb0\u5f55\u6bcf\u79cd\u4e3b\u4f53\u7684\u8f6c\u5316\u60c5\u51b5</li> </ul> <p>\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u95ee\u9898\u6216\u6709\u6539\u8fdb\u5efa\u8bae\uff0c\u6b22\u8fce\u5728 GitHub \u4e0a\u63d0\u51fa issue \u6216\u8d21\u732e\u4ee3\u7801\u3002</p> <p>\u795d\u60a8\u4f7f\u7528\u6109\u5feb\uff01</p>"},{"location":"usage/workflow/","title":"\u6a21\u578b\u5de5\u4f5c\u6d41","text":"<p>\u5178\u578b\u7684\u591a\u4e3b\u4f53\u6a21\u578b\u5b9e\u9a8c\u62e5\u6709\u4e0b\u56fe\u6240\u793a\u7684\u7ed3\u6784\uff0c\u5de6\u4fa7\u662f\u5b9e\u9a8c\u6d41\u7a0b\uff0c\u53f3\u4fa7\u662f\u6a21\u578b\u6d41\u7a0b\u3002</p> <p></p>"},{"location":"usage/workflow/#_1","title":"\u5b9e\u9a8c\u6d41\u7a0b","text":"<p>\u5728\u6bcf\u4e00\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u672c\u5e93\u4f1a\u81ea\u52a8\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u83b7\u53d6\u4e0d\u540c\u53c2\u6570\u7684\u7ec4\u5408\uff0c\u786e\u5b9a\u5b9e\u9a8c\u914d\u7f6e\u7ec4\u6570\uff08jobs\uff09</li> <li>\u6279\u91cf\u8fd0\u884c\u6a21\u578b\uff0c\u6bcf\u6b21\u8fd0\u884c(run)\u90fd\u4fdd\u5b58\u8fd0\u884c\u7684\u7ed3\u679c</li> <li>\u7ed8\u5236\u6240\u6709job\u7684\u5bf9\u6bd4\u7ed3\u679c\u56fe\uff08[\u70ed\u529b\u56fe]\u3001[\u65ad\u70b9\u56fe]\u3001[\u52a8\u6001\u56fe]\uff09</li> <li>\u5b58\u50a8[\u603b\u7ed3\u6570\u636e]\uff08<code>summary.csv</code>\uff09</li> </ol>"},{"location":"usage/workflow/#_2","title":"\u6a21\u578b\u6d41\u7a0b","text":"<p>\u5728\u6bcf\u4e00\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u672c\u5e93\u4f1a\u5bf9\u6bcf\u4e2a\u8fd0\u884c\uff08Run\uff09\u81ea\u52a8\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>"},{"location":"usage/workflow/#initialize","title":"\u521d\u59cb\u5316\uff08Initialize\uff09","text":"<p>\u73af\u5883\uff08Environment\uff09\u4f1a\u6839\u636e\u53c2\u6570<code>env</code>\u521d\u59cb\u5316\uff0c\u5305\u62ec\u52a0\u8f7d\u6570\u636e\uff1a</p> <ol> <li>\u52a0\u8f7d\u5730\u5f62\u6570\u636e\uff08DEM\uff09</li> <li>\u52a0\u8f7d\u5761\u5ea6\u6570\u636e\uff08SLO\uff09</li> <li>\u52a0\u8f7d\u9650\u5236\u72e9\u730e\u91c7\u96c6\u8005\u6570\u91cf\u7684\u6805\u683c\u6570\u636e\uff08LIM_H\uff09</li> </ol>"},{"location":"usage/workflow/#setup","title":"\u8bbe\u7f6e\uff08Setup\uff09","text":"<p>\u6dfb\u52a0\u521d\u59cb\u7684\u4e09\u7c7b\u4e3b\u4f53\uff1a</p> <ol> <li> <p>\u72e9\u730e\u91c7\u96c6\u8005\uff08Hunter\uff09\uff1a\u6839\u636e\u53c2\u6570<code>env.init_hunters</code>\u8bbe\u7f6e\u7684\u6bd4\u4f8b\u6216\u6570\u91cf\uff0c\u5728\u975e\u6c34\u4f53\u683c\u5b50\u4e2d\u968f\u673a\u9009\u62e9\u4f4d\u7f6e\u521b\u5efa\u3002\u6bcf\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u7684\u521d\u59cb\u4eba\u53e3\u6839\u636e <code>Hunter.init_size</code> \u53c2\u6570\u968f\u673a\u53d6\u503c\u3002</p> </li> <li> <p>\u519c\u6c11\uff08Farmer\uff09\uff1a\u6839\u636e\u53c2\u6570<code>env.init_farmers</code>\u8bbe\u7f6e\u7684\u6570\u91cf\uff08\u9ed8\u8ba480\uff09\uff0c\u5728\u53ef\u8015\u5730\u4e2d\u968f\u673a\u9009\u62e9\u4f4d\u7f6e\u521b\u5efa\u3002\u6bcf\u4e2a\u519c\u6c11\u7684\u521d\u59cb\u4eba\u53e3\u6839\u636e <code>Farmer.init_size</code>\u53c2\u6570\uff08\u9ed8\u8ba460-100\uff09\u968f\u673a\u53d6\u503c\u3002</p> </li> <li> <p>\u6c34\u7a3b\u519c\u6c11\uff08RiceFarmer\uff09\uff1a\u6839\u636e\u53c2\u6570<code>env.init_rice_farmers</code>\u8bbe\u7f6e\u7684\u6570\u91cf\uff08\u9ed8\u8ba4350\uff09\uff0c\u5728\u6c34\u7a3b\u53ef\u8015\u5730\u4e2d\u968f\u673a\u9009\u62e9\u4f4d\u7f6e\u521b\u5efa\u3002\u6bcf\u4e2a\u6c34\u7a3b\u519c\u6c11\u7684\u521d\u59cb\u4eba\u53e3\u6839\u636e <code>RiceFarmer.init_size</code> \u53c2\u6570\uff08\u9ed8\u8ba4300-400\uff09\u968f\u673a\u53d6\u503c\u3002</p> </li> </ol> <p>Important</p> <p>\u91cd\u8981\u53d8\u66f4\uff1a\u73b0\u5728\u6240\u6709\u4e09\u7c7b\u4e3b\u4f53\u90fd\u5728\u521d\u59cb\u5316\u65f6\u521b\u5efa\uff0c\u4e0d\u518d\u9700\u8981\u7b49\u5f85\u7279\u5b9a\u7684\u65f6\u95f4\u6b65\u3002<code>tick_farmer</code> \u548c <code>tick_ricefarmer</code> \u53c2\u6570\u9ed8\u8ba4\u4e3a 0\u3002</p>"},{"location":"usage/workflow/#step","title":"\u6b65\u9aa4\uff08Step\uff09","text":"<p>\u968f\u7740\u8fd0\u884c\u6b65\u6570(tick)\u7684\u589e\u52a0\uff0c\u6a21\u578b\u4f1a\u4e0d\u65ad\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>"},{"location":"usage/workflow/#environment-step","title":"\u73af\u5883\u6b65\u9aa4\uff08Environment Step\uff09","text":"<ol> <li>\u6839\u636e\u53c2\u6570 <code>env.lam_farmer</code> \u901a\u8fc7\u6cca\u677e\u5206\u5e03\u6dfb\u52a0\u65b0\u7684\u519c\u6c11\uff08Farmer\uff09</li> <li>\u6839\u636e\u53c2\u6570 <code>env.lam_ricefarmer</code> \u901a\u8fc7\u6cca\u677e\u5206\u5e03\u6dfb\u52a0\u65b0\u7684\u6c34\u7a3b\u519c\u6c11\uff08RiceFarmer\uff09</li> </ol>"},{"location":"usage/workflow/#agent-step","title":"\u4e3b\u4f53\u6b65\u9aa4\uff08Agent Step\uff09","text":"<p>\u4f9d\u6b21\u968f\u673a\u9009\u62e9\u6240\u6709\u4e3b\u4f53\uff0c\u6267\u884c\u5b83\u4eec\u7684 <code>step</code> \u65b9\u6cd5\uff1a</p>"},{"location":"usage/workflow/#_3","title":"\u6240\u6709\u4e3b\u4f53\u7684\u5171\u540c\u884c\u4e3a","text":"<ol> <li>\u4eba\u53e3\u589e\u957f\uff1a\u6839\u636e\u53c2\u6570 <code>&lt;breed&gt;.growth_rate</code> \u8bbe\u7f6e\u7684\u589e\u957f\u7387\u66f4\u65b0\u79cd\u7fa4\u6570\u91cf</li> <li>\u8f6c\u5316\uff1a\u6839\u636e\u53c2\u6570 <code>&lt;breed&gt;.convert_prob</code> \u8bbe\u7f6e\u7684\u6982\u7387\u5c1d\u8bd5\u8f6c\u5316\u4e3a\u5176\u4ed6\u7c7b\u578b\u4e3b\u4f53</li> <li>\u9700\u8981\u6ee1\u8db3\u8f6c\u5316\u6761\u4ef6\uff08\u5468\u56f4\u6709\u76ee\u6807\u7c7b\u578b\u3001\u81ea\u8eab\u4eba\u53e3\u89c4\u6a21\u7b26\u5408\u9608\u503c\u7b49\uff09</li> <li>\u53d7\u5168\u5c40\u8f6c\u5316\u5f00\u5173 <code>convert.enabled</code> \u548c\u5177\u4f53\u8f6c\u5316\u5f00\u5173\uff08\u5982 <code>convert.hunter_to_farmer</code>\uff09\u63a7\u5236</li> <li>\u6269\u6563\uff1a\u5c1d\u8bd5\u5206\u51fa\u65b0\u7684\u7fa4\u4f53\u5230\u5468\u56f4\u5408\u9002\u7684\u4f4d\u7f6e</li> <li>\u519c\u6c11\u548c\u6c34\u7a3b\u519c\u6c11\uff1a\u6839\u636e <code>&lt;breed&gt;.diffuse_prob</code> \u6982\u7387\u6269\u6563</li> <li>\u72e9\u730e\u91c7\u96c6\u8005\uff1a\u5f53\u4eba\u53e3\u8fbe\u5230 <code>max_size</code> \u65f6\u81ea\u52a8\u6269\u6563</li> <li>\u635f\u5931\uff1a\u6240\u6709\u4e3b\u4f53\u90fd\u4f1a\u4ee5\u4e00\u5b9a\u6982\u7387\u7ecf\u5386\u4eba\u53e3\u635f\u5931</li> <li>\u6839\u636e <code>&lt;breed&gt;.loss.prob</code> \u53d1\u751f\u6982\u7387</li> <li>\u53d1\u751f\u65f6\u4eba\u53e3\u51cf\u5c11 <code>&lt;breed&gt;.loss.rate</code> \u6bd4\u4f8b</li> </ol>"},{"location":"usage/workflow/#_4","title":"\u72e9\u730e\u91c7\u96c6\u8005\u7279\u6709\u884c\u4e3a","text":"<ul> <li>\u79fb\u52a8\uff1a\u672a\u5b9a\u5c45\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff08\u4eba\u53e3 \u2264 <code>is_complex</code>\uff09\u4f1a\u4e3b\u52a8\u641c\u7d22\u5e76\u79fb\u52a8\u5230\u66f4\u5408\u9002\u7684\u4f4d\u7f6e</li> <li>\u5408\u5e76\uff1a\u9047\u5230\u5176\u4ed6\u72e9\u730e\u91c7\u96c6\u8005\u65f6\u4f1a\u5408\u5e76\uff0c\u5408\u5e76\u540e\u4eba\u53e3 = \u4e24\u8005\u4e4b\u548c\uff08\u4eba\u53e3\u5b88\u6052\uff09</li> </ul> <p>Warning</p> <p>\u91cd\u8981\u89c4\u5219\u53d8\u66f4\uff1a</p> <ul> <li>\u274c \u5df2\u5220\u9664\u7ade\u4e89\u673a\u5236\uff1a\u4e0d\u540c\u7c7b\u578b\u4e3b\u4f53\u4e4b\u95f4\u4e0d\u518d\u7ade\u4e89</li> <li>\u2705 \u6bcf\u683c\u552f\u4e00\u4e3b\u4f53\uff1a\u4e00\u4e2a\u683c\u5b50\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u4f53\uff08\u4efb\u4f55\u7c7b\u578b\uff09</li> <li>\u2705 \u4eba\u53e3\u5b88\u6052\uff1a\u6269\u6563\u548c\u5408\u5e76\u64cd\u4f5c\u4e25\u683c\u4fdd\u8bc1\u4eba\u53e3\u603b\u6570\u4e0d\u53d8</li> </ul>"},{"location":"usage/workflow/#_5","title":"\u6b7b\u4ea1\u68c0\u67e5","text":"<p>\u5728\u6bcf\u4e00\u6b65\u90fd\u4f1a\u68c0\u67e5\u5f53\u524d\u7684\u79cd\u7fa4\u6570\u91cf\u662f\u5426\u4f4e\u4e8e\u4eba\u53e3\u89c4\u6a21\u9608\u503c\uff08\u7531\u53c2\u6570 <code>&lt;breed&gt;.min_size</code> \u51b3\u5b9a\uff09\uff0c\u82e5\u4f4e\u4e8e\u5219\u6267\u884c <code>die</code> \u65b9\u6cd5\uff0c\u8be5\u7fa4\u4f53\u6d88\u4ea1\u3002</p>"},{"location":"usage/workflow/#end","title":"\u7ed3\u675f\uff08End\uff09","text":"<p>\u7ed3\u675f\u6761\u4ef6\u662f\u5f53\u8bbe\u7f6e\u7684\u8fd0\u884c\u6b65\u6570\u8fbe\u5230\u53c2\u6570<code>time.end</code>\u65f6\uff0c\u6a21\u578b\u4f1a\u4fdd\u5b58\u4ee5\u4e0b\u6570\u636e\u4f9b\u4e0e\u5176\u5b83\u8fd0\u884c\u5bf9\u6bd4\u5206\u6790\uff1a</p> <ol> <li>\u6240\u6709\u4e2a\u4f53\u7684\u4fe1\u606f\uff0c\u5982\u79cd\u7fa4\u6570\u91cf\u3001\u4f4d\u7f6e\u3001\u72b6\u6001\u7b49</li> <li>\u6240\u6709\u4e2a\u4f53\u7684\u4fe1\u606f\uff0c\u5982\u79cd\u7fa4\u6570\u91cf\u3001\u4f4d\u7f6e\u3001\u72b6\u6001\u7b49</li> <li>\u6240\u6709\u4e2a\u4f53\u7684\u4fe1\u606f\uff0c\u5982\u79cd\u7fa4\u6570\u91cf\u3001\u4f4d\u7f6e\u3001\u72b6\u6001\u7b49</li> </ol>"},{"location":"en/#south-china-livelihood-evolution-model","title":"South China Livelihood Evolution Model","text":""},{"location":"en/#model-features","title":"Model Features","text":"<p>This model currently includes the following main features:</p> <ol> <li>Simulates interactions among three groups: hunter-gatherers, farmers, and rice farmers.</li> <li>Considers terrain factors (elevation, slope) impact on population distribution.</li> <li>Supports dynamic processes like population growth, migration, and conversion.</li> <li>Provides various data visualization methods (heatmaps, trend charts, etc.).</li> <li>Flexible conversion mechanism control with independent switches for different conversion types.</li> <li>Strict population conservation for diffusion and merger processes.</li> </ol> <p>Latest Update (v2.0): The model underwent major refactoring, removing competition mechanisms, adding conversion control switches, and optimizing initialization. See Changelog for details.</p>"},{"location":"en/#getting-started","title":"Getting Started","text":"<ul> <li>First, refer to Quick Start to install and use the model</li> <li>Then carefully read Model Workflow to understand the running logic</li> <li>Next, consult Configuration to adjust model parameters and run your experiments</li> <li>Finally, use methods in Data Analysis to analyze experimental results</li> </ul>"},{"location":"en/#method-documentation","title":"Method Documentation","text":"<ul> <li>Model Workflow</li> <li>Sequence Diagrams - \ud83c\udd95 Visual Process Flows</li> <li>Farmer Agent Methods</li> <li>Hunter Agent Methods</li> <li>Patches and Environment</li> </ul>"},{"location":"en/#about-the-author","title":"About the Author","text":"<ul> <li>Author: Shuang Song</li> <li>Email: songshgeo[at]gmail.com</li> </ul>"},{"location":"en/UPDATES/","title":"Model Updates","text":""},{"location":"en/UPDATES/#model-updates-v20","title":"Model Updates (v2.0)","text":""},{"location":"en/UPDATES/#quick-overview","title":"Quick Overview","text":"<p>This update is a major refactoring of the model, focusing on simplifying logic, enhancing flexibility, and ensuring accuracy.</p>"},{"location":"en/UPDATES/#core-changes","title":"\ud83c\udfaf Core Changes","text":"Change Type Description Impact \u2705 Initialization All agent types present from start More realistic \u2705 Conversion Switches Independent control of 6 conversion paths Easier comparative experiments \u274c Remove Competition Removed inter-agent competition Clearer logic \u2705 Population Conservation Strict conservation in diffusion/merger More accurate \u2705 Hunter Improvements New population limits + loss mechanism More reasonable behavior \u2705 One Agent Per Cell Only one agent allowed per cell Clear spatial rules"},{"location":"en/UPDATES/#important-configuration-file-must-be-updated","title":"\u26a0\ufe0f Important: Configuration File Must Be Updated","text":"<p>If you've used this model before, you MUST update your configuration file to run the new version!</p>"},{"location":"en/UPDATES/#required-new-configurations","title":"Required New Configurations","text":"<pre><code># 1. Add conversion switches (root level)\nconvert:\n  enabled: true\n  hunter_to_farmer: true\n  hunter_to_rice: true\n  farmer_to_hunter: true\n  farmer_to_rice: true\n  rice_to_farmer: true\n\n# 2. Update env configuration\nenv:\n  init_farmers: 80  # NEW\n  init_rice_farmers: 350  # NEW\n  tick_farmer: 0  # Changed to 0\n  tick_ricefarmer: 0  # Changed to 0\n\n# 3. Update Hunter configuration\nHunter:\n  # DELETE: intensified_coefficient\n  max_size: 100  # NEW\n  max_size_water: 500  # NEW\n  loss:  # NEW\n    prob: 0.05\n    rate: 0.1\n\n# 4. Add initial population sizes\nFarmer:\n  init_size: [60, 100]  # NEW\n\nRiceFarmer:\n  init_size: [300, 400]  # NEW\n</code></pre>"},{"location":"en/UPDATES/#configuration-migration-steps","title":"\ud83d\udcdd Configuration Migration Steps","text":"<ol> <li>Backup your old configuration file</li> <li>Copy <code>config/config.yaml</code> as a template</li> <li>Update your configuration based on changes above</li> <li>Run tests to ensure configuration is correct</li> </ol>"},{"location":"en/UPDATES/#verification","title":"\ud83e\uddea Verification","text":"<p>All changes have been thoroughly tested:</p> <pre><code># Run test suite\npoetry run pytest tests/ -v\n\n# Run model\npoetry run python -m src time.end=20 exp.repeats=1\n</code></pre> <p>Expected results: - \u2705 All 84 unit tests pass - \u2705 Model runs normally and generates output - \u2705 Generates conversion data, dynamic charts, heatmaps</p>"},{"location":"en/UPDATES/#detailed-documentation","title":"\ud83d\udcda Detailed Documentation","text":"<ul> <li>Changelog: changelog_v2.en.md - Detailed change descriptions</li> <li>Configuration: config.en.md - Complete parameter documentation</li> <li>Workflow: workflow.en.md - Updated model process</li> </ul>"},{"location":"en/UPDATES/#major-api-changes","title":"\ud83d\udd04 Major API Changes","text":""},{"location":"en/UPDATES/#removed-methods","title":"Removed Methods","text":"<pre><code># \u274c The following methods have been removed\nHunter.compete()\nHunter.loss_in_competition()\nHunter.moving()\n</code></pre>"},{"location":"en/UPDATES/#modified-methods","title":"Modified Methods","text":"<pre><code># \u2705 Current implementation\nHunter.max_size  # Returns 100 or 500 (near water)\nHunter.loss()  # New loss mechanism\nHunter.merge()  # Strict population conservation\n\nSiteGroup.diffuse()  # Strict population conservation\n</code></pre>"},{"location":"en/UPDATES/#new-methods","title":"New Methods","text":"<pre><code># \u2705 New methods\nHunter.is_near_water()  # Check if near water body\nEnv.add_initial_farmers()  # Initialize farmers\n</code></pre>"},{"location":"en/UPDATES/#usage-suggestions","title":"\ud83d\udca1 Usage Suggestions","text":""},{"location":"en/UPDATES/#comparative-experiment-design","title":"Comparative Experiment Design","text":"<p>Use the new conversion switch feature for easy comparative experiments:</p> <pre><code># Experiment 1: With conversion\nconvert:\n  enabled: true\n\n# Experiment 2: Without conversion\nconvert:\n  enabled: false\n</code></pre>"},{"location":"en/UPDATES/#recommended-parameters","title":"Recommended Parameters","text":"<p>Based on test results, the following parameter combination works well:</p> <pre><code>env:\n  init_hunters: 0.05\n  init_farmers: 80\n  init_rice_farmers: 350\n\nHunter:\n  max_size: 100\n  max_size_water: 500\n  loss:\n    prob: 0.05\n    rate: 0.1\n</code></pre>"},{"location":"en/UPDATES/#known-issues","title":"\ud83d\udc1b Known Issues","text":"<p>Currently, no critical issues are known. If you encounter problems:</p> <ol> <li>Ensure configuration file is correctly updated</li> <li>Check all tests pass</li> <li>Review log files for error messages</li> </ol>"},{"location":"en/UPDATES/#getting-help","title":"\ud83d\udcde Getting Help","text":"<p>If you have questions, please refer to:</p> <ol> <li>Complete Documentation</li> <li>Configuration Guide</li> <li>Changelog</li> </ol> <p>Or contact: songshgeo[at]gmail.com</p>"},{"location":"en/tech/changelog_v2/","title":"Model Refactoring Changelog (v2.0)","text":""},{"location":"en/tech/changelog_v2/#model-refactoring-changelog-v20","title":"Model Refactoring Changelog (v2.0)","text":"<p>This document records the major logical modifications made to the model on October 20, 2025.</p>"},{"location":"en/tech/changelog_v2/#overview-of-major-changes","title":"Overview of Major Changes","text":"<p>This refactoring primarily aims to simplify model logic, enhance model flexibility and controllability, specifically including:</p> <ol> <li>\u2705 Add initial farmer population settings</li> <li>\u2705 Weaken correspondence between ticks and real time</li> <li>\u2705 Ensure population conservation in diffusion mechanism</li> <li>\u2705 Add conversion mechanism switches</li> <li>\u2705 Modify hunter population limit rules</li> <li>\u2705 Adjust hunter unit population constraints</li> <li>\u2705 Remove competition functionality</li> <li>\u2705 Add loss mechanism for hunters</li> </ol>"},{"location":"en/tech/changelog_v2/#detailed-change-descriptions","title":"Detailed Change Descriptions","text":""},{"location":"en/tech/changelog_v2/#1-initialization-mechanism-changes","title":"1. Initialization Mechanism Changes","text":""},{"location":"en/tech/changelog_v2/#before","title":"Before","text":"<ul> <li>Only hunters initialized</li> <li>Farmers and rice farmers dynamically added during runtime via Poisson distribution</li> </ul>"},{"location":"en/tech/changelog_v2/#after","title":"After","text":"<ul> <li>All three agent types created at initialization</li> <li>New configuration parameters:</li> <li><code>env.init_farmers</code>: Initial farmer count (default 80, recommended range 60-100)</li> <li><code>env.init_rice_farmers</code>: Initial rice farmer count (default 350, recommended range 300-400)</li> <li>Each agent type's initial population controlled by their respective <code>init_size</code> parameters</li> <li><code>tick_farmer</code> and <code>tick_ricefarmer</code> set to 0 (active from first step)</li> </ul> <p>Impact: Model starts with complete set of all three agent types, more realistic</p>"},{"location":"en/tech/changelog_v2/#2-conversion-mechanism-switches","title":"2. Conversion Mechanism Switches","text":""},{"location":"en/tech/changelog_v2/#new-feature","title":"New Feature","text":"<p>Added flexible conversion control system with independent control over 6 conversion paths.</p>"},{"location":"en/tech/changelog_v2/#configuration-example","title":"Configuration Example","text":"<pre><code>convert:\n  enabled: true  # Global switch\n  hunter_to_farmer: true  # Hunter \u2192 Farmer\n  hunter_to_rice: true  # Hunter \u2192 Rice Farmer\n  farmer_to_hunter: true  # Farmer \u2192 Hunter\n  farmer_to_rice: true  # Farmer \u2192 Rice Farmer\n  rice_to_farmer: true  # Rice Farmer \u2192 Farmer\n</code></pre> <p>Purpose: - Can disable all conversions by setting <code>enabled: false</code> - Can independently control each conversion path - Facilitates comparison of model behavior with/without conversion</p>"},{"location":"en/tech/changelog_v2/#3-major-hunter-adjustments","title":"3. Major Hunter Adjustments","text":""},{"location":"en/tech/changelog_v2/#31-population-limit-rule-changes","title":"3.1 Population Limit Rule Changes","text":"<p>Before: - Each hunter's maximum population determined by cell's <code>lim_h</code> (carrying capacity)</p> <p>After: - Normal case: <code>max_size = 100</code> - Near water: <code>max_size_water = 500</code> (has water in 8 neighboring cells) - No longer limited by individual cell capacity</p> <p>Configuration: </p><pre><code>Hunter:\n  max_size: 100  # Unit agent max population\n  max_size_water: 500  # Max population near water\n</code></pre><p></p> <p>Note: Hunters exceeding <code>is_complex</code> threshold (default 100) still stop moving</p>"},{"location":"en/tech/changelog_v2/#32-remove-competition-mechanism","title":"3.2 Remove Competition Mechanism","text":"<p>Removed Features: - <code>moving()</code> method - No longer handles competition with other agents - <code>compete()</code> method - All competition logic removed - <code>loss_in_competition()</code> method - Competition failure handling removed - <code>intensified_coefficient</code> parameter - Competition coefficient removed</p> <p>Impact: - Different agents cannot occupy same cell (one agent per cell rule) - Hunters still merge when encountering other hunters - Simpler, clearer movement logic</p>"},{"location":"en/tech/changelog_v2/#33-new-loss-mechanism","title":"3.3 New Loss Mechanism","text":"<p>New Feature: Hunters now also experience random losses like farmers (e.g., disease, disasters)</p> <p>Configuration: </p><pre><code>Hunter:\n  loss:\n    prob: 0.05  # Loss occurrence probability\n    rate: 0.1   # Population reduction ratio when loss occurs\n</code></pre><p></p> <p>Implementation: Each time step, loss occurs with <code>prob</code> probability, reducing population by <code>rate</code> ratio</p>"},{"location":"en/tech/changelog_v2/#34-merger-mechanism-improvement","title":"3.4 Merger Mechanism Improvement","text":"<p>Before: </p><pre><code>size = max(other_hunter.size + self.size, lim_h)\n</code></pre><p></p> <p>After: </p><pre><code>size = other_hunter.size + self.size  # Strict population conservation\n</code></pre><p></p> <p>Impact: Merged population = sum of both groups, ensuring population conservation</p>"},{"location":"en/tech/changelog_v2/#4-one-agent-per-cell-rule","title":"4. One Agent Per Cell Rule","text":""},{"location":"en/tech/changelog_v2/#new-rule","title":"New Rule","text":"<ul> <li>Only one agent (any type) allowed per cell</li> <li>Checks if target cell has other agents when moving or diffusing</li> <li>Cells with existing agents cannot be movement or diffusion targets</li> </ul>"},{"location":"en/tech/changelog_v2/#implementation","title":"Implementation","text":"<p>Added check logic in <code>CompetingCell.able_to_live()</code> method</p>"},{"location":"en/tech/changelog_v2/#exception","title":"Exception","text":"<ul> <li>Hunters can still merge (moving to cell with another hunter triggers merger)</li> <li>Agents checking their own position not subject to this restriction</li> </ul>"},{"location":"en/tech/changelog_v2/#5-population-conservation-guarantee","title":"5. Population Conservation Guarantee","text":""},{"location":"en/tech/changelog_v2/#diffusion-mechanism-improvement-sitegroupdiffuse","title":"Diffusion Mechanism Improvement (<code>SiteGroup.diffuse()</code>)","text":"<p>Before: Create new agent first, then decrease original population, potentially violating conservation</p> <p>After: </p><pre><code># 1. Create new agent first (ensure it exists even if original dies)\nnew = create_new_agent(size=new_group_size)\n# 2. Decrease original population\nself.size -= new_group_size\n</code></pre><p></p> <p>Guarantee: Total population strictly equal before and after diffusion (original = reduced original + new)</p>"},{"location":"en/tech/changelog_v2/#6-new-configuration-parameters","title":"6. New Configuration Parameters","text":""},{"location":"en/tech/changelog_v2/#farmer-configuration","title":"Farmer Configuration","text":"<pre><code>Farmer:\n  init_size: [60, 100]  # Initial population size range\n</code></pre>"},{"location":"en/tech/changelog_v2/#ricefarmer-configuration","title":"RiceFarmer Configuration","text":"<pre><code>RiceFarmer:\n  init_size: [300, 400]  # Initial population size range\n</code></pre>"},{"location":"en/tech/changelog_v2/#test-verification","title":"Test Verification","text":"<p>All modifications verified through complete test suite:</p> <ul> <li>\u2705 All 84 unit tests pass</li> <li>\u2705 Single run test normal</li> <li>\u2705 Multiple repeat runs normal</li> <li>\u2705 Parallel processing works correctly</li> <li>\u2705 Output files (conversion data, dynamic charts, heatmaps) generated normally</li> </ul>"},{"location":"en/tech/changelog_v2/#backward-compatibility","title":"Backward Compatibility","text":""},{"location":"en/tech/changelog_v2/#breaking-changes","title":"Breaking Changes","text":"<ol> <li>Configuration file must be updated:</li> <li>Add <code>convert</code> section</li> <li>Remove <code>intensified_coefficient</code> from Hunter</li> <li>Add <code>max_size</code>, <code>max_size_water</code>, <code>loss</code> to Hunter</li> <li>Add <code>env.init_farmers</code>, <code>env.init_rice_farmers</code></li> <li> <p>Add <code>init_size</code> to Farmer and RiceFarmer</p> </li> <li> <p>API Changes:</p> </li> <li><code>Hunter.compete()</code> method removed</li> <li><code>Hunter.loss_in_competition()</code> method removed</li> <li><code>Hunter.moving()</code> method removed</li> <li><code>Hunter.max_size</code> property calculation logic changed</li> </ol>"},{"location":"en/tech/changelog_v2/#migration-guide","title":"Migration Guide","text":"<p>If using old version configuration files, please refer to <code>config/config.yaml</code> to update your configuration:</p> <ol> <li>Add <code>convert</code> configuration section at root level</li> <li>Update Hunter configuration parameters</li> <li>Add initial farmer-related parameters</li> <li>Add <code>init_size</code> parameters for each agent type</li> </ol>"},{"location":"en/tech/changelog_v2/#future-plans","title":"Future Plans","text":"<p>The following features were mentioned in this refactoring but not implemented; may be added in future versions:</p> <ul> <li> Global hunter population limit (<code>lim_h * number of non-water cells</code>)</li> <li> More flexible time-space scale mapping mechanism</li> </ul>"},{"location":"en/tech/changelog_v2/#reference-documentation","title":"Reference Documentation","text":"<ul> <li>Configuration Guide</li> <li>Workflow</li> <li>Hunter API</li> <li>Environment API</li> </ul>"},{"location":"en/tech/sequence_diagram/","title":"Model Sequence Diagrams","text":""},{"location":"en/tech/sequence_diagram/#model-detailed-sequence-diagrams","title":"Model Detailed Sequence Diagrams","text":"<p>This document illustrates the running process of the South China Livelihood Evolution Model through sequence diagrams.</p>"},{"location":"en/tech/sequence_diagram/#complete-run-sequence","title":"Complete Run Sequence","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Exp as MyExperiment\n    participant Model\n    participant Env as Environment\n    participant H as Hunter\n    participant F as Farmer\n    participant RF as RiceFarmer\n    participant Cell as CompetingCell\n\n    Note over User,Cell: Initialization Phase\n\n    User-&gt;&gt;Exp: Run experiment (batch_run)\n    Exp-&gt;&gt;Model: Create model instance\n    Model-&gt;&gt;Env: initialize()\n\n    Note over Env,Cell: Environment Initialization\n    Env-&gt;&gt;Env: setup_dem()\n    Env-&gt;&gt;Cell: Load DEM data\n    Env-&gt;&gt;Cell: Load Slope data\n    Env-&gt;&gt;Cell: Load lim_h data\n\n    Note over Env,H: Add Initial Hunters\n    Env-&gt;&gt;Env: add_hunters(0.05)\n    Env-&gt;&gt;Cell: Select non-water cells\n    Env-&gt;&gt;H: Create Hunter (init_size: 6-35)\n    H-&gt;&gt;Cell: Move to cell\n\n    Note over Env,F: Add Initial Farmers (NEW)\n    Env-&gt;&gt;Env: add_initial_farmers(80)\n    Env-&gt;&gt;Cell: Select arable land\n    Env-&gt;&gt;F: Create Farmer (init_size: 60-100)\n    F-&gt;&gt;Cell: Move to cell\n\n    Note over Env,RF: Add Initial RiceFarmers (NEW)\n    Env-&gt;&gt;Env: add_initial_farmers(350)\n    Env-&gt;&gt;Cell: Select rice-arable land\n    Env-&gt;&gt;RF: Create RiceFarmer (init_size: 300-400)\n    RF-&gt;&gt;Cell: Move to cell\n\n    Note over User,Cell: Running Phase (Each Tick)\n\n    loop Each time step (tick)\n        Model-&gt;&gt;Env: env.step()\n\n        Note over Env,F: Environment Step: Add New Agents\n        Env-&gt;&gt;Env: add_farmers(Farmer)\n        Env-&gt;&gt;F: Create Farmers via Poisson\n        Env-&gt;&gt;Env: add_farmers(RiceFarmer)\n        Env-&gt;&gt;RF: Create RiceFarmers via Poisson\n\n        Note over Model,RF: Agent Step: Random Execution\n        Model-&gt;&gt;Model: agents.shuffle_do(\"step\")\n\n        alt Hunter selected\n            Model-&gt;&gt;H: step()\n            H-&gt;&gt;H: population_growth()\n            H-&gt;&gt;H: convert() [Check switches]\n            opt Switch ON &amp; conditions met\n                H-&gt;&gt;Cell: convert(to=\"Farmer\")\n                Cell-&gt;&gt;Cell: Check convert.hunter_to_farmer\n                Cell-&gt;&gt;F: Create new Farmer\n                Cell-&gt;&gt;H: Die\n            end\n            H-&gt;&gt;H: diffuse()\n            opt population &gt;= max_size\n                H-&gt;&gt;H: Create new Hunter\n                H-&gt;&gt;Cell: Search suitable cell\n                Cell--&gt;&gt;H: Return target cell\n            end\n            H-&gt;&gt;H: loss() [NEW]\n            opt Random loss triggered\n                H-&gt;&gt;H: size *= (1 - loss.rate)\n            end\n            H-&gt;&gt;H: move_one()\n            opt Not settled (size &lt;= 100)\n                H-&gt;&gt;Cell: Search better cell\n                opt Meet another Hunter\n                    H-&gt;&gt;H: merge(other_hunter)\n                    Note over H: Conservation: size = size1 + size2\n                end\n            end\n        else Farmer selected\n            Model-&gt;&gt;F: step()\n            F-&gt;&gt;F: population_growth()\n            F-&gt;&gt;F: convert() [Check switches]\n            F-&gt;&gt;F: diffuse()\n            F-&gt;&gt;F: loss()\n        else RiceFarmer selected\n            Model-&gt;&gt;RF: step()\n            RF-&gt;&gt;RF: population_growth()\n            RF-&gt;&gt;RF: convert() [Check switches]\n            RF-&gt;&gt;RF: diffuse()\n            RF-&gt;&gt;RF: loss()\n        end\n\n        Note over Model: Check Death Conditions\n        alt Agent population &lt; min_size\n            Model-&gt;&gt;H: die()\n            Model-&gt;&gt;F: die()\n            Model-&gt;&gt;RF: die()\n        end\n\n        Model-&gt;&gt;Model: datacollector.collect()\n    end\n\n    Note over User,Cell: End Phase\n\n    Model-&gt;&gt;Model: end()\n    Model-&gt;&gt;Model: plot.dynamic()\n    Model-&gt;&gt;Model: plot.heatmap()\n    Model-&gt;&gt;Model: export_conversion_data()\n    Model--&gt;&gt;Exp: Return results\n    Exp--&gt;&gt;User: Save result files</code></pre>"},{"location":"en/tech/sequence_diagram/#conversion-mechanism-v20-with-switch-control","title":"Conversion Mechanism (v2.0 with Switch Control)","text":"<pre><code>flowchart TD\n    Start([Agent Attempts Conversion]) --&gt; CheckGlobal{Global Switch&lt;br/&gt;convert.enabled?}\n\n    CheckGlobal --&gt;|False| NoConvert[No Conversion]\n    CheckGlobal --&gt;|True| CheckType{Check Agent Type}\n\n    CheckType --&gt;|Hunter| HunterConvert[Hunter Conversion Logic]\n    CheckType --&gt;|Farmer| FarmerConvert[Farmer Conversion Logic]\n    CheckType --&gt;|RiceFarmer| RiceConvert[RiceFarmer Conversion Logic]\n\n    HunterConvert --&gt; CheckH2F{hunter_to_farmer&lt;br/&gt;switch?}\n    CheckH2F --&gt;|True| H2FCond{Near Farmer &amp;&lt;br/&gt;On arable land &amp;&lt;br/&gt;Random trigger?}\n    CheckH2F --&gt;|False| CheckH2R{hunter_to_rice&lt;br/&gt;switch?}\n    H2FCond --&gt;|Yes| ConvertH2F[Convert to Farmer]\n    H2FCond --&gt;|No| CheckH2R\n\n    CheckH2R --&gt;|True| H2RCond{Near RiceFarmer &amp;&lt;br/&gt;On rice-arable land &amp;&lt;br/&gt;Random trigger?}\n    CheckH2R --&gt;|False| NoConvert\n    H2RCond --&gt;|Yes| ConvertH2R[Convert to RiceFarmer]\n    H2RCond --&gt;|No| NoConvert\n\n    FarmerConvert --&gt; CheckF2H{farmer_to_hunter&lt;br/&gt;switch?}\n    CheckF2H --&gt;|True| F2HCond{Population &lt;= 100 &amp;&lt;br/&gt;Random trigger?}\n    CheckF2H --&gt;|False| CheckF2R{farmer_to_rice&lt;br/&gt;switch?}\n    F2HCond --&gt;|Yes| ConvertF2H[Convert to Hunter]\n    F2HCond --&gt;|No| CheckF2R\n\n    CheckF2R --&gt;|True| F2RCond{Population &gt;= 200 &amp;&lt;br/&gt;On rice-arable land &amp;&lt;br/&gt;Random trigger?}\n    CheckF2R --&gt;|False| NoConvert\n    F2RCond --&gt;|Yes| ConvertF2R[Convert to RiceFarmer]\n    F2RCond --&gt;|No| NoConvert\n\n    RiceConvert --&gt; CheckR2F{rice_to_farmer&lt;br/&gt;switch?}\n    CheckR2F --&gt;|True| R2FCond{Population &lt; 200 &amp;&lt;br/&gt;Random trigger?}\n    CheckR2F --&gt;|False| NoConvert\n    R2FCond --&gt;|Yes| ConvertR2F[Convert to Farmer]\n    R2FCond --&gt;|No| NoConvert\n\n    ConvertH2F --&gt; Create[Create new agent&lt;br/&gt;Keep population]\n    ConvertH2R --&gt; Create\n    ConvertF2H --&gt; Create\n    ConvertF2R --&gt; Create\n    ConvertR2F --&gt; Create\n\n    Create --&gt; Die[Old agent dies]\n    Die --&gt; End([Conversion Complete])\n    NoConvert --&gt; End\n\n    style CheckGlobal fill:#ff9999\n    style Create fill:#99ff99\n    style Die fill:#ffcc99</code></pre>"},{"location":"en/tech/sequence_diagram/#diffusion-population-conservation-v20-improved","title":"Diffusion &amp; Population Conservation (v2.0 Improved)","text":"<pre><code>sequenceDiagram\n    participant Agent as Original Agent&lt;br/&gt;(size=100)\n    participant Model\n    participant NewAgent as New Agent\n    participant Cell as Current Cell\n    participant NewCell as Target Cell\n\n    Note over Agent: Trigger Diffusion\n    Agent-&gt;&gt;Agent: Check diffusion conditions\n\n    alt Hunter: size &gt;= max_size\n        Agent-&gt;&gt;Agent: Auto diffuse\n    else Farmer/RiceFarmer: Random\n        Agent-&gt;&gt;Agent: random() &lt; diffuse_prob\n    end\n\n    Note over Agent,Model: Population Conservation Key Steps\n\n    rect rgb(255, 220, 220)\n        Note over Agent,NewAgent: Step 1: Create new agent first\n        Agent-&gt;&gt;Agent: new_size = random(min, max)\n        Agent-&gt;&gt;Agent: new_size = min(new_size, self.size)\n        Agent-&gt;&gt;Model: Create new agent(size=new_size)\n        Model-&gt;&gt;NewAgent: New agent born\n    end\n\n    rect rgb(220, 255, 220)\n        Note over Agent: Step 2: Decrease original population\n        Agent-&gt;&gt;Agent: self.size -= new_size\n        Note over Agent: \ud83d\udd12 Conservation Check&lt;br/&gt;Original = Current + New\n    end\n\n    alt Original population &lt; min_size\n        Agent-&gt;&gt;Agent: die()\n        Note over Agent: Original agent dies\n    end\n\n    rect rgb(220, 220, 255)\n        Note over NewAgent,NewCell: Step 3: New agent finds location\n        NewAgent-&gt;&gt;Cell: search_cell(radius=1)\n        Cell-&gt;&gt;NewCell: Check nearby cells\n\n        loop Expand search radius\n            NewCell-&gt;&gt;NewCell: able_to_live(new_agent)?\n            alt Found suitable cell\n                NewAgent-&gt;&gt;NewCell: Move to new cell\n            else Not found\n                NewCell-&gt;&gt;Cell: Expand radius and continue\n            end\n        end\n\n        alt Search failed (radius &gt; max_travel_distance)\n            NewAgent-&gt;&gt;NewAgent: die()\n            Note over NewAgent: New agent dies&lt;br/&gt;But population already reduced&lt;br/&gt;Total conserved\n        end\n    end\n\n    Note over Agent,NewAgent: Final Result:&lt;br/&gt;Total = Remaining + New</code></pre>"},{"location":"en/tech/sequence_diagram/#cell-rule-check-v20-one-agent-per-cell","title":"Cell Rule Check (v2.0: One Agent Per Cell)","text":"<pre><code>flowchart TD\n    Start([Agent Attempts to Enter Cell]) --&gt; HasAgent{Cell has agent?}\n\n    HasAgent --&gt;|No| CheckType{Check Agent Type}\n    HasAgent --&gt;|Yes| SameAgent{Same agent?}\n\n    SameAgent --&gt;|Yes| CheckType\n    SameAgent --&gt;|No| Reject[Reject: Only one agent per cell]\n\n    CheckType --&gt;|Hunter| CheckWater{Is water?}\n    CheckType --&gt;|Farmer| CheckArable{Is arable?}\n    CheckType --&gt;|RiceFarmer| CheckRiceArable{Is rice-arable?}\n\n    CheckWater --&gt;|No| Allow[Allow Entry]\n    CheckWater --&gt;|Yes| Reject\n\n    CheckArable --&gt;|Yes| Allow\n    CheckArable --&gt;|No| Reject\n\n    CheckRiceArable --&gt;|Yes| Allow\n    CheckRiceArable --&gt;|No| Reject\n\n    Allow --&gt; Success([Success])\n    Reject --&gt; Fail([Failed])\n\n    style HasAgent fill:#ffcccc\n    style CheckType fill:#ccccff\n    style Allow fill:#ccffcc\n    style Reject fill:#ffcccc</code></pre>"},{"location":"en/tech/sequence_diagram/#usage","title":"Usage","text":""},{"location":"en/tech/sequence_diagram/#embedding-sequence-diagrams-in-documentation","title":"Embedding Sequence Diagrams in Documentation","text":"<p>These sequence diagrams are written in Mermaid syntax and will be automatically rendered as interactive charts in the documentation.</p>"},{"location":"en/tech/sequence_diagram/#viewing-diagrams","title":"Viewing Diagrams","text":"<ol> <li>Start documentation server: <code>poetry run mkdocs serve</code></li> <li>Visit this page to view complete interactive sequence diagrams</li> <li>Can zoom, export to SVG/PNG</li> </ol>"},{"location":"en/tech/sequence_diagram/#modifying-diagrams","title":"Modifying Diagrams","text":"<p>Directly edit the Mermaid code blocks in this file; changes update automatically.</p>"},{"location":"en/tech/sequence_diagram/#key-process-descriptions","title":"Key Process Descriptions","text":""},{"location":"en/tech/sequence_diagram/#v20-important-changes-reflected-in-diagrams","title":"v2.0 Important Changes Reflected in Diagrams","text":"<ol> <li>Conversion Switches: Each conversion operation checks corresponding switch</li> <li>Population Conservation: Create new agent first, then decrease original population during diffusion</li> <li>Loss Mechanism: Hunter now has loss() step</li> <li>One Per Cell: able_to_live() checks if cell already has other agents</li> <li>Initialization: All three agent types created simultaneously, no waiting for specific ticks</li> </ol>"},{"location":"en/tech/sequence_diagram/#key-time-points","title":"Key Time Points","text":"<ul> <li>tick=0: Initialize, create all three agent types</li> <li>Each tick:</li> <li>Environment step (add new agents)</li> <li>Agent step (randomly execute all agents' steps)</li> <li>Data collection</li> <li>tick=end: End, plot and export data</li> </ul>"},{"location":"en/tech/sequence_diagram/#reference-documentation","title":"Reference Documentation","text":"<ul> <li>Workflow - Text description</li> <li>Changelog - Detailed changes</li> <li>Configuration - Parameter descriptions</li> </ul>"},{"location":"en/usage/config/","title":"Configuration File","text":"<p>Configuration files are an essential part of model execution. The model runs simulations based on parameters in the configuration file. Configuration files use YAML format, and users can modify model parameters in the configuration file.</p> <p>The default location for the configuration file is <code>config/config.yaml</code>. Users can also specify the configuration file location through command-line arguments when running the model.</p>"},{"location":"en/usage/config/#configuration-structure","title":"Configuration Structure","text":"<p>The configuration file is divided into the following sections:</p>"},{"location":"en/usage/config/#convert","title":"convert","text":"<p>Conversion mechanism switches that control conversion behavior between different agent types.</p> Parameter Type Default Description enabled bool true Global conversion switch; all conversions disabled when off hunter_to_farmer bool true Whether hunters can convert to farmers hunter_to_rice bool true Whether hunters can convert to rice farmers farmer_to_hunter bool true Whether farmers can convert to hunters farmer_to_rice bool true Whether farmers can convert to rice farmers rice_to_farmer bool true Whether rice farmers can convert to farmers <p>Note: This feature allows you to disable conversion mechanisms to compare model behavior with/without conversion.</p>"},{"location":"en/usage/config/#exp","title":"exp","text":"<p>Experiment configuration, including experiment name, number of repeats, processes, plotting variables, etc.</p> Parameter Type Default Description name str - Experiment name repeats int 1 Number of repeats per parameter set num_process int 1 Number of parallel processes plot_heatmap str - Variable for heatmap plotting"},{"location":"en/usage/config/#model","title":"model","text":"<p>Model configuration, including model parameters like population loss coefficient and breakpoint detection method.</p> Parameter Type Default Description save_plots bool True Whether to save plots loss_rate float 0.5 Population loss coefficient for competition losers (deprecated) n_bkps int 1 Number of breakpoints detect_bkp_by str 'size' Breakpoint detection method"},{"location":"en/usage/config/#env","title":"env","text":"<p>Environment configuration, including parameters like carrying capacity and initial agent counts.</p> Parameter Type Default Description lim_h float 31.93 Carrying capacity (persons/100km\u00b2) init_hunters float 0.05 Initial hunter ratio or count (&lt;1: ratio, \u22651: count) init_farmers int 80 Initial number of farmer agents (recommended: 60-100) init_rice_farmers int 350 Initial number of rice farmer agents (recommended: 300-400) lam_farmer float 1 Expected value for adding farmers per step (Poisson parameter) lam_ricefarmer float 1 Expected value for adding rice farmers per step (Poisson parameter) tick_farmer int 0 Time step to start adding farmers (0: from beginning) tick_ricefarmer int 0 Time step to start adding rice farmers (0: from beginning) <p>Tip: <code>tick_farmer</code> and <code>tick_ricefarmer</code> now default to 0, meaning these agents are created at initialization rather than during runtime.</p>"},{"location":"en/usage/config/#time","title":"time","text":"<p>Time configuration, including parameters like time steps and step length.</p> Parameter Type Default Description end int 10 Number of time steps"},{"location":"en/usage/config/#farmer","title":"Farmer","text":"<p>Farmer configuration, including parameters like growth rate and diffusion probability.</p> Parameter Type Default Description area int 2 Farmer activity range (km) growth_rate float 0.004 Population growth rate (per step) min_size int 6 Minimum group size; agents die below this init_size list [60, 100] Initial population size range (random value at initialization) new_group_size list [30, 60] New group size range when diffusing diffuse_prob float 0.05 Diffusion probability per step complexity float 0.1 Growth rate reduction ratio after complexification convert_prob dict - Conversion probabilities (to_hunter, to_rice) convert_threshold dict - Conversion thresholds (to_hunter: max, to_rice: min) max_travel_distance int 5 Maximum search distance when diffusing capital_area float 0.004 Per capita arable land (km\u00b2) loss dict - Loss mechanism (prob: probability, rate: loss ratio)"},{"location":"en/usage/config/#hunter","title":"Hunter","text":"<p>Hunter-gatherer configuration, including parameters like growth rate and movement rules.</p> Parameter Type Default Description init_size list [0, 35] Initial population size range; auto-adjusted to min_size if below growth_rate float 0.0008 Population growth rate (per step) min_size int 6 Minimum group size; agents die below this max_size int 100 Maximum population for unit agent (normal case) max_size_water int 500 Maximum population near water bodies new_group_size list [6, 31] New group size range when diffusing convert_prob dict - Conversion probabilities (to_farmer, to_rice) max_travel_distance int 5 Maximum search distance when moving is_complex int 100 Threshold for settled hunters (stop moving) loss dict - Loss mechanism (prob: probability, rate: loss ratio) <p>Important Changes: - \u274c Removed <code>intensified_coefficient</code> parameter (no competition mechanism) - \u2705 Added <code>max_size</code> and <code>max_size_water</code> parameters - \u2705 Added <code>loss</code> parameter; hunters now also experience random losses</p>"},{"location":"en/usage/config/#ricefarmer","title":"RiceFarmer","text":"<p>Rice farmer configuration, including parameters like growth rate and diffusion probability.</p> Parameter Type Default Description area int 2 Rice farmer activity range (km) growth_rate float 0.005 Population growth rate (per step) min_size int 6 Minimum group size; agents die below this init_size list [300, 400] Initial population size range (random value at initialization) new_group_size list [200, 300] New group size range when diffusing diffuse_prob float 0.05 Diffusion probability per step complexity float 0.1 Growth rate reduction ratio after complexification convert_prob dict - Conversion probabilities (to_farmer); cannot convert to hunters convert_threshold dict - Conversion thresholds (to_farmer: must be below this) max_travel_distance int 5 Maximum search distance when diffusing capital_area float 0.002 Per capita arable land (km\u00b2) loss dict - Loss mechanism (prob: probability, rate: loss ratio)"},{"location":"en/usage/config/#db","title":"db","text":"<p>Database configuration, including parameters like database paths and types.</p> Parameter Type Default Description dem str - Digital Elevation Model path slo str - Slope data path asp str - Aspect data path farmland str - Farmland data path lim_h str - Carrying capacity data path"},{"location":"en/usage/quick_start/","title":"Quick Start","text":""},{"location":"en/usage/workflow/","title":"Model Workflow","text":"<p>A typical agent-based model experiment has the structure shown below, with Experiment Process on the left and Model Process on the right.</p> <p></p>"},{"location":"en/usage/workflow/#experiment-process","title":"Experiment Process","text":"<p>In each experiment, this library automatically completes the following steps:</p> <ol> <li>Get combinations of different parameters and determine the number of experimental configurations (jobs)</li> <li>Batch run models, saving results for each run</li> <li>Plot comparison charts for all jobs (heatmaps, breakpoint charts, dynamic charts)</li> <li>Store summary data (<code>summary.csv</code>)</li> </ol>"},{"location":"en/usage/workflow/#model-process","title":"Model Process","text":"<p>For each run in an experiment, the library automatically completes the following steps:</p>"},{"location":"en/usage/workflow/#initialize","title":"Initialize","text":"<p>Environment loads according to <code>env</code> parameters, including:</p> <ol> <li>Load terrain data (DEM)</li> <li>Load slope data (SLO)</li> <li>Load hunter population limit raster data (LIM_H)</li> </ol>"},{"location":"en/usage/workflow/#setup","title":"Setup","text":"<p>Add initial agents of all three types:</p> <ol> <li> <p>Hunters: Created in random non-water cells based on <code>env.init_hunters</code> parameter. Each hunter's initial population is randomly selected from the <code>Hunter.init_size</code> range.</p> </li> <li> <p>Farmers: Created in random arable cells based on <code>env.init_farmers</code> parameter (default 80). Each farmer's initial population is randomly selected from the <code>Farmer.init_size</code> range (default 60-100).</p> </li> <li> <p>Rice Farmers: Created in random rice-arable cells based on <code>env.init_rice_farmers</code> parameter (default 350). Each rice farmer's initial population is randomly selected from the <code>RiceFarmer.init_size</code> range (default 300-400).</p> </li> </ol> <p>Important</p> <p>Important Change: All three agent types are now created at initialization. No need to wait for specific time steps. <code>tick_farmer</code> and <code>tick_ricefarmer</code> parameters default to 0.</p>"},{"location":"en/usage/workflow/#step","title":"Step","text":"<p>As the run progresses (tick increases), the model repeatedly performs the following steps:</p>"},{"location":"en/usage/workflow/#environment-step","title":"Environment Step","text":"<ol> <li>Add new Farmers based on <code>env.lam_farmer</code> parameter using Poisson distribution</li> <li>Add new Rice Farmers based on <code>env.lam_ricefarmer</code> parameter using Poisson distribution</li> </ol>"},{"location":"en/usage/workflow/#agent-step","title":"Agent Step","text":"<p>Sequentially randomly select all agents and execute their <code>step</code> methods:</p>"},{"location":"en/usage/workflow/#common-behaviors-for-all-agents","title":"Common Behaviors for All Agents","text":"<ol> <li>Population Growth: Update population based on <code>&lt;breed&gt;.growth_rate</code> parameter</li> <li>Conversion: Attempt to convert to other agent types based on <code>&lt;breed&gt;.convert_prob</code> probability</li> <li>Must meet conversion conditions (nearby target type, population within thresholds, etc.)</li> <li>Subject to global switch <code>convert.enabled</code> and specific switches (e.g., <code>convert.hunter_to_farmer</code>)</li> <li>Diffusion: Attempt to split into new groups in suitable nearby locations</li> <li>Farmers and Rice Farmers: Based on <code>&lt;breed&gt;.diffuse_prob</code> probability</li> <li>Hunters: Automatically diffuse when population reaches <code>max_size</code></li> <li>Loss: All agents may experience population loss with certain probability</li> <li>Occurs with <code>&lt;breed&gt;.loss.prob</code> probability</li> <li>Population decreases by <code>&lt;breed&gt;.loss.rate</code> ratio when occurs</li> </ol>"},{"location":"en/usage/workflow/#hunter-specific-behaviors","title":"Hunter-Specific Behaviors","text":"<ul> <li>Movement: Non-settled hunters (population \u2264 <code>is_complex</code>) actively search for and move to more suitable locations</li> <li>Merger: When encountering other hunters, they merge; merged population = sum of both (population conservation)</li> </ul> <p>Warning</p> <p>Important Rule Changes:</p> <ul> <li>\u274c Competition mechanism removed: No competition between different agent types</li> <li>\u2705 One agent per cell: Only one agent (any type) allowed per cell</li> <li>\u2705 Population conservation: Diffusion and merger operations strictly conserve total population</li> </ul>"},{"location":"en/usage/workflow/#death-check","title":"Death Check","text":"<p>At each step, checks if current population is below the minimum threshold (determined by <code>&lt;breed&gt;.min_size</code>). If below, the <code>die</code> method is executed and the group perishes.</p>"},{"location":"en/usage/workflow/#end","title":"End","text":"<p>The model ends when the number of steps reaches the <code>time.end</code> parameter, saving the following data for comparison with other runs:</p> <ol> <li>All agent information (population, position, state, etc.)</li> <li>Conversion matrices</li> <li>Visualization charts</li> </ol>"}]}