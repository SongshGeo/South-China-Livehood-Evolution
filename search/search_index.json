{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"\u534e\u5357\u751f\u8ba1\u6f14\u53d8\u6a21\u578b","text":""},{"location":"#_2","title":"\u6a21\u578b\u529f\u80fd","text":"<p>\u672c\u6a21\u578b\u76ee\u524d\u5305\u542b\u4ee5\u4e0b\u4e3b\u8981\u529f\u80fd\uff1a</p> <ol> <li>\u6a21\u62df\u72e9\u730e\u91c7\u96c6\u8005\u3001\u666e\u901a\u519c\u6c11\u548c\u6c34\u7a3b\u519c\u6c11\u4e09\u7c7b\u4eba\u7fa4\u7684\u4e92\u52a8\u3002</li> <li>\u8003\u8651\u5730\u5f62\u56e0\u7d20(\u5982\u6d77\u62d4\u3001\u5761\u5ea6)\u5bf9\u4eba\u7fa4\u5206\u5e03\u7684\u5f71\u54cd\u3002</li> <li>\u652f\u6301\u4eba\u53e3\u589e\u957f\u3001\u8fc1\u79fb\u548c\u8f6c\u5316\u7b49\u52a8\u6001\u8fc7\u7a0b\u3002</li> <li>\u63d0\u4f9b\u591a\u79cd\u6570\u636e\u53ef\u89c6\u5316\u65b9\u6cd5\uff0c\u5982\u4eba\u53e3\u5206\u5e03\u70ed\u529b\u56fe\u3001\u4eba\u53e3\u53d8\u5316\u8d8b\u52bf\u56fe\u7b49\u3002</li> </ol>"},{"location":"#_3","title":"\u5f00\u59cb\u4f7f\u7528","text":"<ul> <li>\u9996\u5148\u53c2\u7167\u5feb\u901f\u5f00\u59cb\u5b89\u88c5\u5e76\u4f7f\u7528\u6a21\u578b</li> <li>\u63a5\u4e0b\u6765\u4ed4\u7ec6\u9605\u8bfb\u6a21\u578b\u5de5\u4f5c\u6d41\u786e\u8ba4\u6a21\u578b\u8fd0\u884c\u903b\u8f91</li> <li>\u7136\u540e\u53c2\u8003\u53c2\u6570\u914d\u7f6e\u8c03\u8bd5\u6a21\u578b\u53c2\u6570\uff0c\u8fd0\u884c\u81ea\u5df1\u7684\u5b9e\u9a8c</li> <li>\u6700\u540e\u4f7f\u7528\u6570\u636e\u8f93\u51fa\u4e0e\u5206\u6790\u4e2d\u7684\u65b9\u6cd5\u5206\u6790\u5b9e\u9a8c\u7ed3\u679c</li> </ul>"},{"location":"#_4","title":"\u65b9\u6cd5\u8bf4\u660e","text":"<ul> <li>\u6a21\u578b\u5de5\u4f5c\u6d41</li> <li>\u519c\u6c11\u4e3b\u4f53\u65b9\u6cd5</li> <li>\u72e9\u730e\u91c7\u96c6\u8005\u4e3b\u4f53\u65b9\u6cd5</li> <li>\u6591\u5757\u4e0e\u73af\u5883</li> </ul>"},{"location":"#_5","title":"\u5173\u4e8e\u4f5c\u8005","text":"<ul> <li>\u4f5c\u8005\uff1a\u5b8b\u723d</li> <li>\u90ae\u7bb1\uff1asongshgeo[at]gmail.com</li> </ul>"},{"location":"demo/","title":"\u5c1d\u8bd5\u8fd0\u884c\u6a21\u578b","text":"<p>Jupyter notebook \u662f\u4ea4\u4e92\u5f0f\u7684\u4ee3\u7801IDE\uff0c\u975e\u5e38\u9002\u5408\u65b0\u624b\uff0c\u5efa\u8bae\u6700\u5f00\u59cb\u5728\u8fd9\u91cc\u63a2\u7d22\u6211\u4eec\u7684\u6a21\u578b\u3002</p> In\u00a0[1]: Copied! <pre>%load_ext autoreload\n%autoreload 2\n%matplotlib inline\n%config InlineBackend.figure_format = 'retina'\nfrom IPython.core.interactiveshell import InteractiveShell\n\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport pandas as pd\nimport numpy as np\nfrom hydra import compose, initialize\nimport os\n\n# \u52a0\u8f7d\u9879\u76ee\u5c42\u9762\u7684\u914d\u7f6e\nwith initialize(version_base=None, config_path=\"../config\"):\n    cfg = compose(config_name=\"config\")\nos.chdir(cfg.root)\n</pre> %load_ext autoreload %autoreload 2 %matplotlib inline %config InlineBackend.figure_format = 'retina' from IPython.core.interactiveshell import InteractiveShell  InteractiveShell.ast_node_interactivity = \"all\"  import pandas as pd import numpy as np from hydra import compose, initialize import os  # \u52a0\u8f7d\u9879\u76ee\u5c42\u9762\u7684\u914d\u7f6e with initialize(version_base=None, config_path=\"../config\"):     cfg = compose(config_name=\"config\") os.chdir(cfg.root) In\u00a0[2]: Copied! <pre>%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(context=\"notebook\", style=\"whitegrid\")\n\nimport rasterio\n\nwith rasterio.open(cfg.db.lim_h) as dataset:\n    arr = dataset.read(1)\n    plt.imshow(arr)\n</pre> %matplotlib inline import matplotlib.pyplot as plt import seaborn as sns  sns.set(context=\"notebook\", style=\"whitegrid\")  import rasterio  with rasterio.open(cfg.db.lim_h) as dataset:     arr = dataset.read(1)     plt.imshow(arr) Out[2]: <pre>&lt;matplotlib.image.AxesImage at 0x127c3b890&gt;</pre> <p>\u6ce8\u610f\u4e0b\u9762\u8fd9\u91cc\u9700\u8981\u628a\u4f60\u4e0a\u9762\u8bfb\u53d6\u7684\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\uff0c\u4f5c\u4e3a\u53c2\u6570<code>parameters=cfg</code>\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u3002</p> In\u00a0[3]: Copied! <pre># \u4ece\u8fd9\u4e2a\u8def\u5f84\u52a0\u8f7d\u6a21\u578b\nfrom src.core import Model\nfrom src.api import Env\n\nmodel = Model(parameters=cfg, nature_class=Env)\nmodel.params.save_plots = False\nmodel.nature.setup()\n</pre> # \u4ece\u8fd9\u4e2a\u8def\u5f84\u52a0\u8f7d\u6a21\u578b from src.core import Model from src.api import Env  model = Model(parameters=cfg, nature_class=Env) model.params.save_plots = False model.nature.setup() In\u00a0[4]: Copied! <pre>arable_land = model.nature.get_xarray(\"is_arable\")\nprint(f\"\u519c\u6c11\u53ef\u4ee5\u505c\u7559\u7684\u53ef\u8015\u79cd\u571f\u5730\u6709{arable_land.to_numpy().sum()}\uff0c\u5206\u5e03\u5982\u4e0b\u56fe\uff1a\")\narable_land.plot()\n</pre> arable_land = model.nature.get_xarray(\"is_arable\") print(f\"\u519c\u6c11\u53ef\u4ee5\u505c\u7559\u7684\u53ef\u8015\u79cd\u571f\u5730\u6709{arable_land.to_numpy().sum()}\uff0c\u5206\u5e03\u5982\u4e0b\u56fe\uff1a\") arable_land.plot() <pre>\u519c\u6c11\u53ef\u4ee5\u505c\u7559\u7684\u53ef\u8015\u79cd\u571f\u5730\u67093074\uff0c\u5206\u5e03\u5982\u4e0b\u56fe\uff1a\n</pre> Out[4]: <pre>&lt;matplotlib.collections.QuadMesh at 0x320d19cd0&gt;</pre> In\u00a0[5]: Copied! <pre>rice_arable = model.nature.patchmodule.get_xarray(\"is_rice_arable\")\nprint(f\"\u6c34\u7a3b\u519c\u6c11\u53ef\u4ee5\u505c\u7559\u7684\u53ef\u8015\u79cd\u571f\u5730\u6709{rice_arable.to_numpy().sum()}\uff0c\u5206\u5e03\u5982\u4e0b\u56fe\uff1a\")\nrice_arable.plot()\n</pre> rice_arable = model.nature.patchmodule.get_xarray(\"is_rice_arable\") print(f\"\u6c34\u7a3b\u519c\u6c11\u53ef\u4ee5\u505c\u7559\u7684\u53ef\u8015\u79cd\u571f\u5730\u6709{rice_arable.to_numpy().sum()}\uff0c\u5206\u5e03\u5982\u4e0b\u56fe\uff1a\") rice_arable.plot() <pre>\u6c34\u7a3b\u519c\u6c11\u53ef\u4ee5\u505c\u7559\u7684\u53ef\u8015\u79cd\u571f\u5730\u6709924\uff0c\u5206\u5e03\u5982\u4e0b\u56fe\uff1a\n</pre> Out[5]: <pre>&lt;matplotlib.collections.QuadMesh at 0x320de3810&gt;</pre> <p>\u589e\u52a0\u4e86\u521d\u59cb\u7684 Hunters\uff0c\u968f\u673a\u751f\u6210\u5728\u5730\u56fe\u4e0a</p> In\u00a0[6]: Copied! <pre>model.plot.heatmap()\n</pre> model.plot.heatmap() Out[6]: <pre>(&lt;Axes: title={'center': 'spatial_ref = 0'}, xlabel='Farmers', ylabel='y'&gt;,\n &lt;Axes: title={'center': 'spatial_ref = 0'}, xlabel='Hunters', ylabel='y'&gt;)</pre> <p>\u8bbe\u7f6e100\u5e74\u7684\u8bdd\uff0c\u6a21\u578b\u7684\u8fd0\u884c\u53ef\u80fd\u9700\u8981\u51e0\u5206\u949f\u7684\u65f6\u95f4\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6a21\u578b\u6ca1\u8fd0\u7b97\u5b8c\u4e0d\u8981\u592a\u7740\u6025\u3002\u5b8c\u6210\u540e\u4f1a\u81ea\u52a8\u505a\u51fa\u4e0b\u9762\u7684\u6298\u7ebf\u56fe\u3002</p> In\u00a0[8]: Copied! <pre>model.run_model(steps=200)\n</pre> model.run_model(steps=200) <p>\u5c55\u793a\u4e3b\u4f53\u7684\u4fe1\u606f</p> In\u00a0[9]: Copied! <pre>model.actors.plot.hist(\"size\")\n</pre> model.actors.plot.hist(\"size\") Out[9]: <pre>&lt;Axes: xlabel='size', ylabel='Count'&gt;</pre> In\u00a0[10]: Copied! <pre>agent = model.actors.random.choice()\nagent.report()\n</pre> agent = model.actors.random.choice() agent.report() Out[10]: <pre>unique_id    Hunter[1383]\nbreed              Hunter\nsize                 25.0\nposition         (88, 84)\ndtype: object</pre> In\u00a0[23]: Copied! <pre>import xarray as xr\n\n\ndef log(xda_: xr.DataArray):\n    return xr.apply_ufunc(np.log, xda_.where(xda_ != 0))\n\n\n_, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 3))\nmask = model.nature.get_xarray(\"elevation\") &gt;= 0\nfarmers = model.nature.get_xarray(\"farmers\").where(mask)\nhunters = model.nature.get_xarray(\"hunters\").where(mask)\nrice = model.nature.get_xarray(\"rice_farmers\").where(mask)\n# Calculate logarithmically, without warnings\nlog(farmers).plot.contourf(ax=ax1, cmap=\"Reds\")\nlog(hunters).plot.contourf(ax=ax2, cmap=\"Greens\")\nlog(rice).plot.contourf(ax=ax3, cmap=\"Oranges\")\n</pre> import xarray as xr   def log(xda_: xr.DataArray):     return xr.apply_ufunc(np.log, xda_.where(xda_ != 0))   _, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(10, 3)) mask = model.nature.get_xarray(\"elevation\") &gt;= 0 farmers = model.nature.get_xarray(\"farmers\").where(mask) hunters = model.nature.get_xarray(\"hunters\").where(mask) rice = model.nature.get_xarray(\"rice_farmers\").where(mask) # Calculate logarithmically, without warnings log(farmers).plot.contourf(ax=ax1, cmap=\"Reds\") log(hunters).plot.contourf(ax=ax2, cmap=\"Greens\") log(rice).plot.contourf(ax=ax3, cmap=\"Oranges\") Out[23]: <pre>&lt;matplotlib.contour.QuadContourSet at 0x326a51fd0&gt;</pre> Out[23]: <pre>&lt;matplotlib.contour.QuadContourSet at 0x326af67d0&gt;</pre> Out[23]: <pre>&lt;matplotlib.contour.QuadContourSet at 0x326b490d0&gt;</pre> In\u00a0[12]: Copied! <pre>model.nature.plot.show()\n</pre> model.nature.plot.show() Out[12]: <pre>&lt;Axes: title={'center': 'spatial_ref = 0'}, xlabel='longitude [degrees_east]', ylabel='latitude [degrees_north]'&gt;</pre> In\u00a0[13]: Copied! <pre>model.plot.stack_dynamic()\n</pre> model.plot.stack_dynamic() Out[13]: <pre>(&lt;Axes: xlabel='Population'&gt;, &lt;Axes: xlabel='Groups'&gt;)</pre> In\u00a0[14]: Copied! <pre>model.actors.plot.hist(\"size\")\n</pre> model.actors.plot.hist(\"size\") Out[14]: <pre>&lt;Axes: xlabel='size', ylabel='Count'&gt;</pre> In\u00a0[15]: Copied! <pre>from src.core import MyExperiment\n\nexp = MyExperiment(Model, nature_cls=Env)\nexp.batch_run(\n    cfg=cfg, repeats=10, parallels=5, overrides={\"farmer.growth_rate\": [0.1, 0.2, 0.3]}\n)\n</pre> from src.core import MyExperiment  exp = MyExperiment(Model, nature_cls=Env) exp.batch_run(     cfg=cfg, repeats=10, parallels=5, overrides={\"farmer.growth_rate\": [0.1, 0.2, 0.3]} ) <pre>  0%|          | 0/10 [00:00&lt;?, ?it/s]</pre> <pre>  0%|          | 0/10 [00:00&lt;?, ?it/s]</pre> <pre>  0%|          | 0/10 [00:00&lt;?, ?it/s]</pre> In\u00a0[16]: Copied! <pre>exp.plot_agg_dynamic(\"farmers\", \"num\")\n</pre> exp.plot_agg_dynamic(\"farmers\", \"num\") Out[16]: <pre>&lt;Axes: xlabel='tick', ylabel='num_farmers'&gt;</pre> In\u00a0[17]: Copied! <pre>data = exp.get_model_vars_dataframe()\ndata.head()\n</pre> data = exp.get_model_vars_dataframe() data.head() Out[17]: job_id repeat_id tick len_farmers len_hunters len_rice num_farmers num_hunters num_rice len_farmers_n len_hunters_n len_rice_n num_farmers_n num_hunters_n num_rice_n 0 0 1 0 0.002564 0.997436 0.0 0.004471 0.995529 0.0 1.0 389 0.0 38.0 8462.0 0.0 1 0 1 1 0.002564 0.997436 0.0 0.004866 0.995134 0.0 1.0 389 0.0 42.0 8589.0 0.0 2 0 1 2 0.002571 0.997429 0.0 0.005184 0.994816 0.0 1.0 388 0.0 47.0 9020.0 0.0 3 0 1 3 0.005181 0.994819 0.0 0.005122 0.994878 0.0 2.0 384 0.0 51.0 9906.0 0.0 4 0 1 4 0.005236 0.994764 0.0 0.005652 0.994348 0.0 2.0 380 0.0 57.0 10028.0 0.0 In\u00a0[18]: Copied! <pre>exp.summary()\n</pre> exp.summary() Out[18]: bkp_farmer bkp_rice bkp_hunters pre_farmer pre_rice pre_hunters post_farmer post_rice post_hunters job_id repeat_id farmer.growth_rate 0 5 5 5 0.106766 NaN 0.043933 0.470634 NaN 0.057255 0 1 0.1 1 5 5 5 inf NaN 0.051283 0.369990 NaN 0.042523 0 2 0.1 2 5 5 5 inf NaN 0.037362 inf NaN 0.064578 0 3 0.1 3 5 5 5 0.890766 NaN 0.055138 0.195507 NaN 0.059008 0 4 0.1 4 5 5 5 0.294578 NaN 0.040137 0.300827 NaN 0.047163 0 5 0.1 5 5 5 5 0.557075 NaN 0.033287 0.218086 NaN 0.067445 0 6 0.1 6 5 5 5 0.077373 NaN 0.028822 0.522004 NaN 0.042227 0 7 0.1 7 5 5 5 0.391355 NaN 0.020060 0.057696 NaN 0.041715 0 8 0.1 8 5 5 5 inf NaN 0.057998 0.245743 NaN 0.041331 0 9 0.1 9 5 5 5 0.872935 NaN 0.017111 0.080447 NaN 0.046319 0 10 0.1 10 5 5 5 inf NaN 0.120561 0.467939 NaN 0.027218 1 1 0.2 11 5 5 5 inf NaN 0.078605 0.188618 NaN 0.033347 1 2 0.2 12 5 5 5 inf NaN 0.049351 0.199048 NaN 0.026952 1 3 0.2 13 5 5 5 inf NaN 0.040829 0.164735 NaN 0.002031 1 4 0.2 14 5 5 5 1.221287 NaN 0.045074 0.157655 NaN 0.030496 1 5 0.2 15 5 5 5 0.692730 NaN 0.038548 0.270072 NaN 0.044914 1 6 0.2 16 5 5 5 0.674947 NaN 0.058229 0.180942 NaN 0.047968 1 7 0.2 17 5 5 5 inf NaN 0.059968 0.123212 inf 0.064659 1 8 0.2 18 5 5 5 inf NaN 0.082977 0.278950 NaN 0.033525 1 9 0.2 19 5 5 5 0.772983 NaN 0.081215 0.279065 NaN 0.029411 1 10 0.2 20 5 5 5 0.775823 NaN 0.000168 0.362423 NaN 0.033231 2 1 0.3 21 5 5 5 inf NaN 0.005974 0.363693 NaN 0.043647 2 2 0.3 22 5 5 5 0.268640 NaN 0.035263 0.543273 NaN 0.027179 2 3 0.3 23 5 5 5 inf NaN 0.021379 0.373853 NaN 0.047026 2 4 0.3 24 5 5 5 0.601434 NaN 0.039733 0.283068 NaN 0.049302 2 5 0.3 25 5 5 5 inf NaN 0.064134 0.585138 NaN 0.003276 2 6 0.3 26 5 5 5 0.374496 NaN 0.019521 0.408193 NaN 0.039863 2 7 0.3 27 5 5 5 0.452661 NaN 0.048801 0.377009 NaN 0.053913 2 8 0.3 28 5 5 5 0.773108 NaN 0.079844 0.277799 NaN 0.015988 2 9 0.3 29 5 5 5 0.364149 NaN 0.071140 0.330353 NaN 0.041001 2 10 0.3 In\u00a0[19]: Copied! <pre>data.groupby([\"job_id\", \"tick\"])\n</pre> data.groupby([\"job_id\", \"tick\"]) Out[19]: <pre>&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x325621b50&gt;</pre>"},{"location":"demo/","title":"\u5c1d\u8bd5\u8fd0\u884c\u6a21\u578b\u00b6","text":""},{"location":"api/env/","title":"\u72e9\u730e\u91c7\u96c6\u8005\u4e0e\u519c\u6c11\u7684\u4ea4\u4e92\u73af\u5883","text":"<p>\u73af\u5883\u5305\u62ec\u4e86\u4e24\u4e2a\u7c7b\uff0c\u5373\u6591\u5757\uff08CompetingCell\uff09\u548c\u73af\u5883\uff08Env\uff09\u3002\u73af\u5883\u4f1a\u81ea\u52a8\u6839\u636e\u8f93\u5165\u7684\u6805\u683c\u6587\u4ef6\u521b\u5efa\u8db3\u591f\u6570\u91cf\u7684\u6591\u5757\uff0c\u6bcf\u4e00\u4e2a\u6591\u5757\u662f\u4e3b\u4f53\u5177\u4f53\u6240\u5728\u7684\u4f4d\u7f6e\u3002</p>"},{"location":"api/env/#_1","title":"\u6591\u5757","text":"<p>               Bases: <code>PatchCell</code></p> <p>\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7ade\u4e89\u7684\u821e\u53f0</p> Source code in <code>src/api/env.py</code> <pre><code>class CompetingCell(PatchCell):\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7ade\u4e89\u7684\u821e\u53f0\"\"\"\n\n    max_agents = 1  # \u4e00\u4e2a\u6591\u5757\u4e0a\u6700\u591a\u6709\u591a\u5c11\u4e2a\u4e3b\u4f53\n\n    def __init__(self, pos=None, indices=None):\n        super().__init__(pos, indices)\n        self.lim_h: float = cfg.env.lim_h\n        self.lim_g: float = cfg.env.lim_g\n        self.slope: float = np.random.uniform(0, 30)\n        self.elevation: float = np.random.uniform(0, 300)\n        self._is_water: Optional[bool] = None\n\n    def _count(self, breed: str) -&gt; int:\n        \"\"\"\u7edf\u8ba1\u6b64\u5904\u7684\u519c\u6c11\u6216\u8005\u72e9\u730e\u91c7\u96c6\u8005\u7684\u6570\u91cf\"\"\"\n        return self.agents(breed).get(\"size\", how=\"item\", default=0)\n\n    @raster_attribute\n    def farmers(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        return self._count(\"Farmer\")\n\n    @raster_attribute\n    def hunters(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        return self._count(\"Hunter\")\n\n    @raster_attribute\n    def rice_farmers(self) -&gt; int:\n        \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n        return self._count(\"RiceFarmer\")\n\n    @raster_attribute\n    def is_water(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u6c34\u4f53\"\"\"\n        if self._is_water is None:\n            return self.elevation &lt;= 0 or np.isnan(self.elevation)\n        return self._is_water\n\n    @is_water.setter\n    def is_water(self, value: bool) -&gt; None:\n        if not isinstance(value, bool):\n            raise TypeError(f\"Can only be bool type, got {type(value)}.\")\n        self._is_water = value\n\n    @raster_attribute\n    def is_arable(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730:\n        1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002\n        2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002\n        3. \u4e0d\u662f\u6c34\u4f53\u3002\n\n        &gt;  1. \u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09\n        &gt; 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b\n        &gt; 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f\n\n        returns:\n            \u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n        \"\"\"\n\n        # \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\n        cond1 = self.slope &lt;= 10\n        # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n        cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n        # \u4e0d\u662f\u6c34\u4f53\n        cond3 = not self.is_water\n        # \u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u53ef\u8015\u5730\n        return cond1 and cond2 and cond3\n\n    @raster_attribute\n    def dem_suitable(self) -&gt; int:\n        \"\"\"\u6d77\u62d4\u9ad8\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n        # 0-100: 2\n        # 100-200: 1\n        # 200+: 0\n        dem = self.elevation\n        if dem &lt; 100:\n            return 2\n        return 1 if dem &lt; 200 else 0\n\n    @raster_attribute\n    def slope_suitable(self) -&gt; int:\n        \"\"\"\u5761\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n        # 0-2: 5\n        # 2-4: 4\n        # 4-6: 3\n        # 6-8: 2\n        # 8-10: 1\n        # 10+: 0\n        if self.slope &lt; 2:\n            return 5\n        if self.slope &lt; 4:\n            return 4\n        if self.slope &lt; 6:\n            return 3\n        if self.slope &lt; 8:\n            return 2\n        return 1 if self.slope &lt; 10 else 0\n\n    @raster_attribute\n    def is_rice_arable(self) -&gt; bool:\n        \"\"\"\u662f\u5426\u662f\u6c34\u7a3b\u7684\u53ef\u8015\u5730\"\"\"\n        # \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\n        cond1 = self.slope &lt;= 0.5\n        # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n        cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n        # \u4e0d\u662f\u6c34\u4f53\n        cond3 = not self.is_water\n        return cond1 and cond2 and cond3\n\n    def able_to_live(self, agent: SiteGroup) -&gt; None:\n        \"\"\"\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9:\n        1. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df\n        2. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730\n\n        Args:\n            agent (SiteGroup): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002\n\n        Returns:\n            \u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n        \"\"\"\n        if agent.breed == \"Hunter\":\n            return not self.is_water\n        no_agent_here = self.agents.has() == 0\n        if agent.breed == \"RiceFarmer\":\n            return self.is_rice_arable &amp; no_agent_here\n        if agent.breed == \"Farmer\":\n            return self.is_arable &amp; no_agent_here\n        if agent.breed == \"SiteGroup\":\n            return True\n        raise TypeError(\"Agent must be a valid People.\")\n\n    def suitable_level(self, agent: SiteGroup) -&gt; float:\n        \"\"\"\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002\n\n        Args:\n            agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\u3002\n\n        Returns:\n            \u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002\n\n        Raises:\n            TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n        \"\"\"\n        if agent.breed == \"Hunter\":\n            return 1.0\n        if agent.breed == \"RiceFarmer\":\n            return self.dem_suitable\n        if agent.breed == \"Farmer\":\n            return self.dem_suitable * 0.5 + self.slope_suitable * 0.2\n        if agent.breed == \"SiteGroup\":\n            return 1.0\n        raise TypeError(\"Agent must be Farmer or Hunter.\")\n\n    def convert(self, agent: Farmer | Hunter, to: str) -&gt; SiteGroup:\n        \"\"\"\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002\n\n        Args:\n            agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\n\n        Returns:\n            \u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002\n\n        Raises:\n            TypeError:\n                \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u6216\u8005\u60f3\u8f6c\u5316\u6210\u7684\u7c7b\u578b\u4e0d\u4ece\u57fa\u7840\u4e3b\u4f53\u7ee7\u627f\u800c\u6765\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n        \"\"\"\n        to = {\"Farmer\": Farmer, \"RiceFarmer\": RiceFarmer, \"Hunter\": Hunter}.get(to)\n        if not isinstance(agent, SiteGroup):\n            raise TypeError(f\"Agent must be inherited from SiteGroup, not {agent}.\")\n        if to is None:\n            raise TypeError(\"Agent must be inherited from SiteGroup.\")\n        # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u4f53\n        # print(f\"Going to create size {agent.size} {convert_to}\")\n        converted = self.layer.model.agents.new(to, size=agent.size, singleton=True)\n        converted.source = agent.source  # \u8bb0\u5f55\u539f\u6765\u662f\u4ec0\u4e48\u4e3b\u4f53\n        agent.die()  # \u65e7\u7684\u4e3b\u4f53\u6b7b\u4ea1\n        converted.move.to(self)\n        return converted\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.able_to_live","title":"<code>able_to_live(agent)</code>","text":"<p>\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9: 1. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df 2. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>SiteGroup</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002</p> required <p>Returns:</p> Type Description <code>None</code> <p>\u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>def able_to_live(self, agent: SiteGroup) -&gt; None:\n    \"\"\"\u68c0\u67e5\u8be5\u4e3b\u4f53\u80fd\u5426\u80fd\u5230\u7279\u5b9a\u7684\u5730\u65b9:\n    1. \u5bf9\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u53ea\u8981\u4e0d\u662f\u6c34\u57df\n    2. \u5bf9\u519c\u6c11\u800c\u8a00\uff0c\u9700\u8981\u662f\u53ef\u8015\u5730\n\n    Args:\n        agent (SiteGroup): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u3002\n\n    Returns:\n        \u5982\u679c\u88ab\u68c0\u67e5\u7684\u4e3b\u4f53\u80fd\u591f\u5728\u6b64\u5904\u5b58\u6d3b\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n    \"\"\"\n    if agent.breed == \"Hunter\":\n        return not self.is_water\n    no_agent_here = self.agents.has() == 0\n    if agent.breed == \"RiceFarmer\":\n        return self.is_rice_arable &amp; no_agent_here\n    if agent.breed == \"Farmer\":\n        return self.is_arable &amp; no_agent_here\n    if agent.breed == \"SiteGroup\":\n        return True\n    raise TypeError(\"Agent must be a valid People.\")\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.convert","title":"<code>convert(agent, to)</code>","text":"<p>\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Farmer | Hunter</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002</p> required <p>Returns:</p> Type Description <code>SiteGroup</code> <p>\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>\u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u6216\u8005\u60f3\u8f6c\u5316\u6210\u7684\u7c7b\u578b\u4e0d\u4ece\u57fa\u7840\u4e3b\u4f53\u7ee7\u627f\u800c\u6765\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>def convert(self, agent: Farmer | Hunter, to: str) -&gt; SiteGroup:\n    \"\"\"\u8ba9\u6b64\u5904\u7684\u519c\u6c11\u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u4e4b\u95f4\u4e92\u76f8\u8f6c\u5316\u3002\n\n    Args:\n        agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u9700\u8981\u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\n\n    Returns:\n        \u88ab\u8f6c\u5316\u7684\u4e3b\u4f53\u3002\u8f93\u5165\u519c\u6c11\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\uff1b\u8f93\u5165\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u8f6c\u5316\u4e3a\u4e00\u4e2a\u519c\u6c11\u3002\n\n    Raises:\n        TypeError:\n            \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u6216\u8005\u60f3\u8f6c\u5316\u6210\u7684\u7c7b\u578b\u4e0d\u4ece\u57fa\u7840\u4e3b\u4f53\u7ee7\u627f\u800c\u6765\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n    \"\"\"\n    to = {\"Farmer\": Farmer, \"RiceFarmer\": RiceFarmer, \"Hunter\": Hunter}.get(to)\n    if not isinstance(agent, SiteGroup):\n        raise TypeError(f\"Agent must be inherited from SiteGroup, not {agent}.\")\n    if to is None:\n        raise TypeError(\"Agent must be inherited from SiteGroup.\")\n    # \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4e3b\u4f53\n    # print(f\"Going to create size {agent.size} {convert_to}\")\n    converted = self.layer.model.agents.new(to, size=agent.size, singleton=True)\n    converted.source = agent.source  # \u8bb0\u5f55\u539f\u6765\u662f\u4ec0\u4e48\u4e3b\u4f53\n    agent.die()  # \u65e7\u7684\u4e3b\u4f53\u6b7b\u4ea1\n    converted.move.to(self)\n    return converted\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.dem_suitable","title":"<code>dem_suitable()</code>","text":"<p>\u6d77\u62d4\u9ad8\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef dem_suitable(self) -&gt; int:\n    \"\"\"\u6d77\u62d4\u9ad8\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n    # 0-100: 2\n    # 100-200: 1\n    # 200+: 0\n    dem = self.elevation\n    if dem &lt; 100:\n        return 2\n    return 1 if dem &lt; 200 else 0\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.farmers","title":"<code>farmers()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef farmers(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    return self._count(\"Farmer\")\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.hunters","title":"<code>hunters()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef hunters(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    return self._count(\"Hunter\")\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.is_arable","title":"<code>is_arable()</code>","text":"<p>\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730: 1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002 2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002 3. \u4e0d\u662f\u6c34\u4f53\u3002</p> <ol> <li>\u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f</li> </ol> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef is_arable(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u662f\u53ef\u8015\u5730\uff0c\u53ea\u6709\u540c\u65f6\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff0c\u624d\u80fd\u6210\u4e3a\u4e00\u4e2a\u53ef\u8015\u5730:\n    1. \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\u3002\n    2. \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\u3002\n    3. \u4e0d\u662f\u6c34\u4f53\u3002\n\n    &gt;  1. \u8003\u53e4\u9057\u5740\u5206\u5e03\u63a8\u6f14\u51fa\u7684\u5206\u5e03\u7279\u5f81\uff08Wu et al. 2023 \u4e2d\u519c\u4e1a\u76f8\u5173\u9057\u5740\u6570\u636e\uff09\n    &gt; 2 \u53d1\u5c55\u519c\u4e1a\u6240\u9700\u7684\u4e00\u822c\u6761\u4ef6\uff1a\u5761\u5ea6\u5c0f\u4e8e20\uff0c\u6d77\u62d4\u3001\u5761\u5411\u2026\u2026\uff08Shelach, 1999; Qiao, 2010\uff09\uff1b\n    &gt; 3 \u4eca\u5929\u7684\u519c\u4e1a\u7528\u5730\u5206\u5e03\u7279\u5f81\uff1f\n\n    returns:\n        \u662f\u5426\u662f\u8015\u5730\uff0c\u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False\u3002\n    \"\"\"\n\n    # \u5761\u5ea6\u5c0f\u4e8e10\u5ea6\n    cond1 = self.slope &lt;= 10\n    # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n    cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n    # \u4e0d\u662f\u6c34\u4f53\n    cond3 = not self.is_water\n    # \u6761\u4ef6\u90fd\u6ee1\u8db3\u624d\u662f\u53ef\u8015\u5730\n    return cond1 and cond2 and cond3\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.is_rice_arable","title":"<code>is_rice_arable()</code>","text":"<p>\u662f\u5426\u662f\u6c34\u7a3b\u7684\u53ef\u8015\u5730</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef is_rice_arable(self) -&gt; bool:\n    \"\"\"\u662f\u5426\u662f\u6c34\u7a3b\u7684\u53ef\u8015\u5730\"\"\"\n    # \u5761\u5ea6\u5c0f\u4e8e\u7b49\u4e8e0.5\n    cond1 = self.slope &lt;= 0.5\n    # \u6d77\u62d4\u9ad8\u5ea6\u5c0f\u4e8e200m\n    cond2 = (self.elevation &lt; 200) and (self.elevation &gt; 0)\n    # \u4e0d\u662f\u6c34\u4f53\n    cond3 = not self.is_water\n    return cond1 and cond2 and cond3\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.rice_farmers","title":"<code>rice_farmers()</code>","text":"<p>\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef rice_farmers(self) -&gt; int:\n    \"\"\"\u8fd9\u91cc\u7684\u519c\u6c11\u6709\u591a\u5c11\uff08size\uff09\"\"\"\n    return self._count(\"RiceFarmer\")\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.slope_suitable","title":"<code>slope_suitable()</code>","text":"<p>\u5761\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6</p> Source code in <code>src/api/env.py</code> <pre><code>@raster_attribute\ndef slope_suitable(self) -&gt; int:\n    \"\"\"\u5761\u5ea6\u7684\u9002\u5b9c\u7a0b\u5ea6\"\"\"\n    # 0-2: 5\n    # 2-4: 4\n    # 4-6: 3\n    # 6-8: 2\n    # 8-10: 1\n    # 10+: 0\n    if self.slope &lt; 2:\n        return 5\n    if self.slope &lt; 4:\n        return 4\n    if self.slope &lt; 6:\n        return 3\n    if self.slope &lt; 8:\n        return 2\n    return 1 if self.slope &lt; 10 else 0\n</code></pre>"},{"location":"api/env/#src.api.env.CompetingCell.suitable_level","title":"<code>suitable_level(agent)</code>","text":"<p>\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002</p> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>Farmer | Hunter</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\u3002</p> required <p>Returns:</p> Type Description <code>float</code> <p>\u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>\u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>def suitable_level(self, agent: SiteGroup) -&gt; float:\n    \"\"\"\u6839\u636e\u6b64\u5904\u7684\u4e3b\u4f53\u7c7b\u578b\uff0c\u8fd4\u56de\u4e00\u4e2a\u9002\u5b9c\u5176\u505c\u7559\u7684\u6c34\u5e73\u503c\u3002\n\n    Args:\n        agent (Farmer | Hunter): \u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\u3002\n\n    Returns:\n        \u9002\u5408\u8be5\u7c7b\u4e3b\u4f53\u505c\u7559\u6b64\u5904\u7684\u9002\u5b9c\u5ea6\u3002\n\n    Raises:\n        TypeError: \u5982\u679c\u8f93\u5165\u7684\u4e3b\u4f53\u4e0d\u662f\u72e9\u730e\u91c7\u96c6\u8005\u6216\u8005\u519c\u6c11\uff0c\u5219\u4f1a\u629b\u51faTypeError\u5f02\u5e38\u3002\n    \"\"\"\n    if agent.breed == \"Hunter\":\n        return 1.0\n    if agent.breed == \"RiceFarmer\":\n        return self.dem_suitable\n    if agent.breed == \"Farmer\":\n        return self.dem_suitable * 0.5 + self.slope_suitable * 0.2\n    if agent.breed == \"SiteGroup\":\n        return 1.0\n    raise TypeError(\"Agent must be Farmer or Hunter.\")\n</code></pre>"},{"location":"api/env/#_2","title":"\u73af\u5883","text":"<p>               Bases: <code>BaseNature</code></p> <p>\u73af\u5883\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6a21\u578b\u4e2d\u7684\u73af\u5883\u4fe1\u606f\u3002</p> \u5c5e\u6027 <p>dem (BaseRaster): \u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u3002 slope (BaseRaster): \u5761\u5ea6\u3002 lim_h (BaseRaster): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u9650\u5236\u3002</p> \u65b9\u6cd5 <p>setup(): \u521d\u59cb\u5316\u73af\u5883\u3002 step(): \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a     1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf     2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316     3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09 add_hunters(): \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u3002 add_farmers(): \u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>class Env(BaseNature):\n    \"\"\"\n    \u73af\u5883\u7c7b\uff0c\u7528\u4e8e\u7ba1\u7406\u6a21\u578b\u4e2d\u7684\u73af\u5883\u4fe1\u606f\u3002\n\n    \u5c5e\u6027:\n        dem (BaseRaster): \u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u3002\n        slope (BaseRaster): \u5761\u5ea6\u3002\n        lim_h (BaseRaster): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u9650\u5236\u3002\n\n    \u65b9\u6cd5:\n        setup(): \u521d\u59cb\u5316\u73af\u5883\u3002\n        step(): \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n            1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n            2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n            3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n        add_hunters(): \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u3002\n        add_farmers(): \u6dfb\u52a0\u521d\u59cb\u7684\u519c\u6c11\u3002\n    \"\"\"\n\n    def __init__(self, model, name=\"env\"):\n        super().__init__(model, name)\n        self.dem = self.create_module(\n            how=\"from_file\",\n            raster_file=cfg.db.dem,\n            cell_cls=CompetingCell,\n            attr_name=\"elevation\",\n            apply_raster=True,\n        )\n        arr = self._open_rasterio(cfg.db.slo)\n        self.dem.apply_raster(arr, attr_name=\"slope\")\n        arr = self._open_rasterio(cfg.db.lim_h)\n        self.dem.apply_raster(arr, attr_name=\"lim_h\")\n\n    def _open_rasterio(self, source: str) -&gt; np.ndarray:\n        with rasterio.open(source) as dataset:\n            arr = dataset.read(1)\n            arr = np.where(arr &lt; 0, np.nan, arr)\n        return arr.reshape((1, arr.shape[0], arr.shape[1]))\n\n    def setup(self):\n        self.add_hunters(self.p.init_hunters)\n\n    def step(self) -&gt; None:\n        \"\"\"\n        \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n        1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n        2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n        3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n        \"\"\"\n        self.add_farmers(Farmer)\n        self.add_farmers(RiceFarmer)\n\n    def add_hunters(self, ratio: Optional[float] = 0.05) -&gt; ActorsList[Hunter]:\n        \"\"\"\n        \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\u3002\n\n        Args:\n            ratio (float | None): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u6bd4\u4f8b\u3002\u9ed8\u8ba4\u4e3a0.05\u3002\n\n        Returns:\n            \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\u3002\n        \"\"\"\n        available_cells = self.cells.select({\"is_water\": False})\n        num = int(len(available_cells) * ratio)\n        hunters = available_cells.random.new(Hunter, size=num)\n        init_min, init_max = cfg.hunter.init_size\n        hunters.apply(lambda h: h.random_size(init_min, init_max))\n        return hunters\n\n    def add_farmers(self, farmer_cls: type = Farmer) -&gt; ActorsList[Farmer | RiceFarmer]:\n        \"\"\"\n        \u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u94fe\u63a5](https://zhuanlan.zhihu.com/p/373751245)\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002\n\n        Args:\n            farmer_cls (type): \u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002\n\n        Returns:\n            \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n        \"\"\"\n        lam_key = f\"lam_{farmer_cls.breed}\".lower()\n        tick_key = f\"tick_{farmer_cls.breed}\".lower()\n        if self.time.tick &lt; self.params.get(tick_key, 0):\n            farmers_num = 0\n        else:\n            farmers_num = np.random.poisson(self.params.get(lam_key, 0))\n        # create farmers\n        farmers = self.model.agents.new(farmer_cls, num=farmers_num)\n        arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n        arable_cells = self.dem.array_cells[arable.astype(bool)]\n        for farmer in farmers:\n            min_size, max_size = farmer.params.new_group_size\n            farmer.size = farmer.random.randint(int(min_size), int(max_size))\n        # \u4ece\u53ef\u8015\u5730\u3001\u6ca1\u6709\u4e3b\u4f53\u7684\u91cc\u9762\u9009\n        arable_cells = ActorsList(self.model, arable_cells)\n        agents_num = arable_cells.apply(lambda c: c.agents.has())\n        valid_cells = arable_cells.select(agents_num == 0)\n        chosen_cells = valid_cells.random.choice(\n            size=farmers_num, replace=False, as_list=True\n        )\n        for farmer, cell in zip(farmers, chosen_cells):\n            if not cell:\n                raise ValueError(f\"arable_cells {cell} is None\")\n            farmer.move.to(cell)\n        return farmers\n</code></pre>"},{"location":"api/env/#src.api.env.Env.add_farmers","title":"<code>add_farmers(farmer_cls=Farmer)</code>","text":"<p>\u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b\u8fd9\u4e2a\u94fe\u63a5\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002</p> <p>Parameters:</p> Name Type Description Default <code>farmer_cls</code> <code>type</code> <p>\u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002</p> <code>Farmer</code> <p>Returns:</p> Type Description <code>ActorsList[Farmer | RiceFarmer]</code> <p>\u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>def add_farmers(self, farmer_cls: type = Farmer) -&gt; ActorsList[Farmer | RiceFarmer]:\n    \"\"\"\n    \u6dfb\u52a0\u4ece\u5317\u65b9\u6765\u7684\u519c\u6c11\uff0c\u6839\u636e\u5168\u5c40\u53d8\u91cf\u7684\u6cca\u677e\u5206\u5e03\u6a21\u62df\u3002\u5173\u4e8e\u6cca\u677e\u5206\u5e03\u7684\u4ecb\u7ecd\u53ef\u4ee5\u770b[\u8fd9\u4e2a\u94fe\u63a5](https://zhuanlan.zhihu.com/p/373751245)\u3002\u5f53\u6cca\u677e\u5206\u5e03\u751f\u6210\u7684\u519c\u6c11\u88ab\u521b\u5efa\u65f6\uff0c\u5c06\u5176\u653e\u7f6e\u5728\u5730\u56fe\u4e0a\u4efb\u610f\u4e00\u4e2a\u53ef\u8015\u5730\u3002\n\n    Args:\n        farmer_cls (type): \u519c\u6c11\u7684\u7c7b\u578b\u3002\u53ef\u4ee5\u662f Farmer \u6216 RiceFarmer\u3002\n\n    Returns:\n        \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u519c\u6c11\u5217\u8868\u3002\n    \"\"\"\n    lam_key = f\"lam_{farmer_cls.breed}\".lower()\n    tick_key = f\"tick_{farmer_cls.breed}\".lower()\n    if self.time.tick &lt; self.params.get(tick_key, 0):\n        farmers_num = 0\n    else:\n        farmers_num = np.random.poisson(self.params.get(lam_key, 0))\n    # create farmers\n    farmers = self.model.agents.new(farmer_cls, num=farmers_num)\n    arable = self.dem.get_raster(\"is_arable\").reshape(self.dem.shape2d)\n    arable_cells = self.dem.array_cells[arable.astype(bool)]\n    for farmer in farmers:\n        min_size, max_size = farmer.params.new_group_size\n        farmer.size = farmer.random.randint(int(min_size), int(max_size))\n    # \u4ece\u53ef\u8015\u5730\u3001\u6ca1\u6709\u4e3b\u4f53\u7684\u91cc\u9762\u9009\n    arable_cells = ActorsList(self.model, arable_cells)\n    agents_num = arable_cells.apply(lambda c: c.agents.has())\n    valid_cells = arable_cells.select(agents_num == 0)\n    chosen_cells = valid_cells.random.choice(\n        size=farmers_num, replace=False, as_list=True\n    )\n    for farmer, cell in zip(farmers, chosen_cells):\n        if not cell:\n            raise ValueError(f\"arable_cells {cell} is None\")\n        farmer.move.to(cell)\n    return farmers\n</code></pre>"},{"location":"api/env/#src.api.env.Env.add_hunters","title":"<code>add_hunters(ratio=0.05)</code>","text":"<p>\u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\u3002</p> <p>Parameters:</p> Name Type Description Default <code>ratio</code> <code>float | None</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u7684\u6bd4\u4f8b\u3002\u9ed8\u8ba4\u4e3a0.05\u3002</p> <code>0.05</code> <p>Returns:</p> Type Description <code>ActorsList[Hunter]</code> <p>\u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\u3002</p> Source code in <code>src/api/env.py</code> <pre><code>def add_hunters(self, ratio: Optional[float] = 0.05) -&gt; ActorsList[Hunter]:\n    \"\"\"\n    \u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u968f\u673a\u62bd\u53d6\u4e00\u4e9b\u6591\u5757\uff0c\u5c06\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\u653e\u4e0a\u53bb\u3002\n\n    Args:\n        ratio (float | None): \u72e9\u730e\u91c7\u96c6\u8005\u7684\u6bd4\u4f8b\u3002\u9ed8\u8ba4\u4e3a0.05\u3002\n\n    Returns:\n        \u672c\u6b21\u65b0\u6dfb\u52a0\u7684\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\u3002\n    \"\"\"\n    available_cells = self.cells.select({\"is_water\": False})\n    num = int(len(available_cells) * ratio)\n    hunters = available_cells.random.new(Hunter, size=num)\n    init_min, init_max = cfg.hunter.init_size\n    hunters.apply(lambda h: h.random_size(init_min, init_max))\n    return hunters\n</code></pre>"},{"location":"api/env/#src.api.env.Env.step","title":"<code>step()</code>","text":"<p>\u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a 1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf 2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316 3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09</p> Source code in <code>src/api/env.py</code> <pre><code>def step(self) -&gt; None:\n    \"\"\"\n    \u6bcf\u4e00\u65f6\u95f4\u6b65\u90fd\u6309\u7167\u4ee5\u4e0b\u987a\u5e8f\u6267\u884c\u4e00\u6b21\uff1a\n    1. \u66f4\u65b0\u519c\u6c11\u6570\u91cf\n    2. \u6240\u6709\u4e3b\u4f53\u4e92\u76f8\u8f6c\u5316\n    3. \u66f4\u65b0\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u4ee5\u79fb\u52a8\uff08\u8fd9\u53ef\u80fd\u89e6\u53d1\u7ade\u4e89\uff09\n    \"\"\"\n    self.add_farmers(Farmer)\n    self.add_farmers(RiceFarmer)\n</code></pre>"},{"location":"api/farmer/","title":"\u519c\u6c11","text":""},{"location":"api/farmer/#_1","title":"\u519c\u6c11","text":"<p>               Bases: <code>SiteGroup</code></p> <p>\u519c\u6c11</p> Source code in <code>src/api/farmer.py</code> <pre><code>class Farmer(SiteGroup):\n    \"\"\"\n    \u519c\u6c11\n    \"\"\"\n\n    def __init__(self, *arg, **kwargs) -&gt; None:\n        super().__init__(*arg, **kwargs)\n        self._area = self.params.area\n        self._growth_rate = self.params.growth_rate\n        self.size = kwargs.get(\"size\", self.min_size)\n\n    @property\n    def growth_rate(self) -&gt; float:\n        \"\"\"\u4eba\u53e3\u589e\u957f\u7387\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u7684`growth_rate`\u4e2d\u8c03\u8282\uff0c\u4e5f\u53ef\u4ee5\u56e0\u590d\u6742\u5316\u800c\u4e0b\u964d\u3002\u8bbe\u7f6e\u65b0\u7684\u4eba\u53e3\u589e\u957f\u7387\u65f6\u4e0d\u80fd\u4e0b\u964d\u5230\u8d1f\u589e\u957f\u3002\"\"\"\n        return getattr(self, \"_growth_rate\", 0.0)\n\n    @growth_rate.setter\n    def growth_rate(self, growth_rate) -&gt; None:\n        \"\"\"\u4eba\u53e3\u589e\u957f\u7387\u53d8\u5316\"\"\"\n        growth_rate = max(growth_rate, 0.0)\n        self._growth_rate = float(growth_rate)\n\n    @property\n    def area(self) -&gt; float:\n        \"\"\"\u8015\u5730\u9762\u79ef\u3002\u5f53\u53d1\u751f\u590d\u6742\u5316\u65f6\uff0c\u7406\u8bba\u4e0a\u8015\u5730\u9762\u79ef\u4f1a\u589e\u52a0\u4e00\u5757\uff082km * 2km\uff09\u7684\u571f\u5730\uff0c\u4f46\u8fd9\u5757\u571f\u5730\u4f1a\u56e0\u4e3a\u590d\u6742\u5316\u800c\u53d8\u7684\u7565\u5c0f\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a\n\n        $area = init_area * (2 - complexity)$\n\n        \u5176\u4e2dcomplexity\u4e3a\u590d\u6742\u5316\u65f6\u7684\u635f\u5931\u7cfb\u6570\uff0c\u5e94\u8be5\u57280-1\u4e4b\u95f4\u3002\n        \"\"\"\n        return getattr(self, \"_area\", 0)\n\n    @area.setter\n    def area(self, area: float) -&gt; None:\n        \"\"\"\u8015\u5730\u9762\u79ef\u53d8\u5316\uff0c\u4f1a\u4e0d\u65ad\u589e\u52a0\"\"\"\n        area = max(self.area, area)\n        self._area = float(area)\n\n    @SiteGroup.size.setter\n    def size(self, size: Number) -&gt; None:\n        \"\"\"\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236\"\"\"\n        SiteGroup.size.fset(self, size)\n        if size &gt; self.max_size:\n            self.complicate()\n\n    @property\n    def max_size(self) -&gt; float:\n        \"\"\"\u6700\u5927\u4eba\u53e3\u6570\u91cf\n\n        Note:\n            \u53c2\u8003\u88f4\u674e\u5c97\u65f6\u671f\uff089000-7000 BP\uff09\uff0c\u4eba\u5747\u8015\u5730\u4e3a0.008\u5e73\u65b9\u516c\u91cc\uff08\u4e54\u7389 2010\uff09\uff0c\n            \u7ed3\u5408\u534e\u5357\u6c14\u5019\u6761\u4ef6\u4e0b\u8f83\u9ad8\u7684\u751f\u4ea7\u529b\u548c\u66f4\u5145\u6c9b\u7684\u81ea\u7136\u8d44\u6e90\uff0c\u5c06\u6240\u9700\u4eba\u5747\u8015\u5730\u8bbe\u7f6e\u4e3a0.004\u5e73\u65b9\u516c\u91cc\uff0c\n            \u90a3\u4e48\u8be5\u5355\u4f4d\u4eba\u53e3\u4e0a\u9650\u5373\u03c0 * 2 * 2 / 0.004=3142\u4eba\u3002\n        \"\"\"\n        capital_area = self.params.get(\"capital_area\")\n        if not capital_area:\n            raise ValueError(\"Capital area is not set in params.\")\n        max_size = np.pi * self.area**2 / capital_area\n        return np.ceil(max_size)\n\n    def _convert_to_hunter(self) -&gt; Hunter | Self:\n        # \u5982\u679c\u4eba\u6570\u5927\u4e8e\u4e0d\u80fd\u8f6c\u5316\u7684\u9608\u503c\uff0c\u5c31\u76f4\u63a5\u8fd4\u56de\u81ea\u8eab\n        cond1 = self.size &lt;= self.params.convert_threshold.get(\"to_hunter\")\n        # \u6982\u7387\u5c0f\u4e8e\u8f6c\u5316\u6982\u7387\n        cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_hunter\", 0.0)\n        # \u6ee1\u8db3\u4e0a\u8ff0\u4e24\u4e2a\u6761\u4ef6\u5c31\u8f6c\u5316\n        return self._cell.convert(self, to=\"Hunter\") if cond1 &amp; cond2 else self\n\n    def _convert_to_rice(self) -&gt; RiceFarmer | Self:\n        \"\"\"\u8f6c\u5316\u6210\"\"\"\n        # \u4eba\u6570\u5927\u4e8e\u6c34\u7a3b\u6240\u9700\u6700\u5c0f\u4eba\u6570\n        cond1 = self.size &gt;= self.params.convert_threshold.get(\"to_rice\", 0)\n        # \u6982\u7387\u5c0f\u4e8e\u8f6c\u5316\u6982\u7387\n        cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_rice\", 0.0)\n        # \u6240\u5904\u5730\u5757\u9002\u5b9c\u6c34\u7a3b\u751f\u5b58\n        cond3 = self._cell.is_rice_arable\n        return (\n            self._cell.convert(self, to=\"RiceFarmer\") if cond1 &amp; cond2 &amp; cond3 else self\n        )\n\n    @alive_required\n    def convert(self) -&gt; Self | Hunter | RiceFarmer:\n        \"\"\"\u8f6c\u6362\uff0c\u5148\u5224\u65ad\u662f\u5426\u8f6c\u5316\u6210\u72e9\u730e\u91c7\u96c6\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u518d\u770b\u770b\u662f\u5426\u8f6c\u6362\u6210\u6c34\u7a3b\u519c\u6c11\"\"\"\n        agent = self._convert_to_hunter()\n        return agent if agent is not self else self._convert_to_rice()\n\n    @alive_required\n    def diffuse(\n        self, group_range: Tuple[Number] | None = None, diffuse_prob: Number = None\n    ) -&gt; Self:\n        \"\"\"\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002\n        \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002\n        \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc`diffuse_prob`\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002\n        \"\"\"\n        # \u68c0\u6d4b\u6982\u7387\u662f\u5426\u591f\u4ea7\u751f\u5c0f\u961f\n        if diffuse_prob is None:\n            diffuse_prob = self.params.get(\"diffuse_prob\", 0.0)\n        if self.random.random() &lt; diffuse_prob:\n            return super().diffuse(group_range=group_range)\n        return None\n\n    @alive_required\n    def complicate(self, complexity: float | None = None) -&gt; Self:\n        \"\"\"\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002\"\"\"\n        if complexity is None:\n            complexity = self.params.get(\"complexity\", 0.0)\n        self.growth_rate *= 1 - complexity\n        self.area += self.params.area * (1 - complexity)\n\n    def loss(self) -&gt; None:\n        \"\"\"\u519c\u6c11\u7684\u635f\u5931\uff0c\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\"\"\"\n        if self.random.random() &lt; self.params.loss.prob:\n            self.size *= 1 - self.params.loss.rate\n\n    def step(self):\n        super().step()\n        self.loss()\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.area","title":"<code>area: float</code>  <code>property</code> <code>writable</code>","text":"<p>\u8015\u5730\u9762\u79ef\u3002\u5f53\u53d1\u751f\u590d\u6742\u5316\u65f6\uff0c\u7406\u8bba\u4e0a\u8015\u5730\u9762\u79ef\u4f1a\u589e\u52a0\u4e00\u5757\uff082km * 2km\uff09\u7684\u571f\u5730\uff0c\u4f46\u8fd9\u5757\u571f\u5730\u4f1a\u56e0\u4e3a\u590d\u6742\u5316\u800c\u53d8\u7684\u7565\u5c0f\u3002\u8ba1\u7b97\u516c\u5f0f\u4e3a\uff1a</p> <p>$area = init_area * (2 - complexity)$</p> <p>\u5176\u4e2dcomplexity\u4e3a\u590d\u6742\u5316\u65f6\u7684\u635f\u5931\u7cfb\u6570\uff0c\u5e94\u8be5\u57280-1\u4e4b\u95f4\u3002</p>"},{"location":"api/farmer/#src.api.farmer.Farmer.growth_rate","title":"<code>growth_rate: float</code>  <code>property</code> <code>writable</code>","text":"<p>\u4eba\u53e3\u589e\u957f\u7387\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc\u7684<code>growth_rate</code>\u4e2d\u8c03\u8282\uff0c\u4e5f\u53ef\u4ee5\u56e0\u590d\u6742\u5316\u800c\u4e0b\u964d\u3002\u8bbe\u7f6e\u65b0\u7684\u4eba\u53e3\u589e\u957f\u7387\u65f6\u4e0d\u80fd\u4e0b\u964d\u5230\u8d1f\u589e\u957f\u3002</p>"},{"location":"api/farmer/#src.api.farmer.Farmer.max_size","title":"<code>max_size: float</code>  <code>property</code>","text":"<p>\u6700\u5927\u4eba\u53e3\u6570\u91cf</p> Note <p>\u53c2\u8003\u88f4\u674e\u5c97\u65f6\u671f\uff089000-7000 BP\uff09\uff0c\u4eba\u5747\u8015\u5730\u4e3a0.008\u5e73\u65b9\u516c\u91cc\uff08\u4e54\u7389 2010\uff09\uff0c \u7ed3\u5408\u534e\u5357\u6c14\u5019\u6761\u4ef6\u4e0b\u8f83\u9ad8\u7684\u751f\u4ea7\u529b\u548c\u66f4\u5145\u6c9b\u7684\u81ea\u7136\u8d44\u6e90\uff0c\u5c06\u6240\u9700\u4eba\u5747\u8015\u5730\u8bbe\u7f6e\u4e3a0.004\u5e73\u65b9\u516c\u91cc\uff0c \u90a3\u4e48\u8be5\u5355\u4f4d\u4eba\u53e3\u4e0a\u9650\u5373\u03c0 * 2 * 2 / 0.004=3142\u4eba\u3002</p>"},{"location":"api/farmer/#src.api.farmer.Farmer.complicate","title":"<code>complicate(complexity=None)</code>","text":"<p>\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002</p> Source code in <code>src/api/farmer.py</code> <pre><code>@alive_required\ndef complicate(self, complexity: float | None = None) -&gt; Self:\n    \"\"\"\u519c\u6c11\u7684\u590d\u6742\u5316\uff0c\u8015\u5730\u4e0a\u9650\u518d\u589e\u52a0\u8015\u5730\u5bc6\u5ea6\u589e\u52a0\u3001\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\u4eba\u53e3\u589e\u957f\u7387\u7684\u4e0b\u964d\u6bd4\u4f8b\u4e5f\u4e3a\u590d\u6742\u5316\u7cfb\u6570\u7684\u503c\u3002\"\"\"\n    if complexity is None:\n        complexity = self.params.get(\"complexity\", 0.0)\n    self.growth_rate *= 1 - complexity\n    self.area += self.params.area * (1 - complexity)\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.convert","title":"<code>convert()</code>","text":"<p>\u8f6c\u6362\uff0c\u5148\u5224\u65ad\u662f\u5426\u8f6c\u5316\u6210\u72e9\u730e\u91c7\u96c6\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u518d\u770b\u770b\u662f\u5426\u8f6c\u6362\u6210\u6c34\u7a3b\u519c\u6c11</p> Source code in <code>src/api/farmer.py</code> <pre><code>@alive_required\ndef convert(self) -&gt; Self | Hunter | RiceFarmer:\n    \"\"\"\u8f6c\u6362\uff0c\u5148\u5224\u65ad\u662f\u5426\u8f6c\u5316\u6210\u72e9\u730e\u91c7\u96c6\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u518d\u770b\u770b\u662f\u5426\u8f6c\u6362\u6210\u6c34\u7a3b\u519c\u6c11\"\"\"\n    agent = self._convert_to_hunter()\n    return agent if agent is not self else self._convert_to_rice()\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.diffuse","title":"<code>diffuse(group_range=None, diffuse_prob=None)</code>","text":"<p>\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002 \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002 \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc<code>diffuse_prob</code>\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002</p> Source code in <code>src/api/farmer.py</code> <pre><code>@alive_required\ndef diffuse(\n    self, group_range: Tuple[Number] | None = None, diffuse_prob: Number = None\n) -&gt; Self:\n    \"\"\"\u519c\u6c11\u7684\u5206\u6563\u3002\u4e00\u65e6\u968f\u673a\u6570\u5c0f\u4e8e\u5206\u6563\u6982\u7387\uff0c\u5219\u4f1a\u5206\u6563\u51fa\u53bb\u3002\n    \u4f46\u4e0d\u50cf\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u519c\u6c11\u5982\u679c\u5206\u88c2\u4e0d\u51fa\u6700\u5c0f\u7684\u4e00\u652f\u961f\u4f0d\uff0c\u5c31\u4e0d\u4f1a\u6269\u6563\u51fa\u53bb\u3002\n    \u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u91cc`diffuse_prob`\u53c2\u6570\u8c03\u8282\u5206\u6563\u6982\u7387\u3002\n    \"\"\"\n    # \u68c0\u6d4b\u6982\u7387\u662f\u5426\u591f\u4ea7\u751f\u5c0f\u961f\n    if diffuse_prob is None:\n        diffuse_prob = self.params.get(\"diffuse_prob\", 0.0)\n    if self.random.random() &lt; diffuse_prob:\n        return super().diffuse(group_range=group_range)\n    return None\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.loss","title":"<code>loss()</code>","text":"<p>\u519c\u6c11\u7684\u635f\u5931\uff0c\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002</p> Source code in <code>src/api/farmer.py</code> <pre><code>def loss(self) -&gt; None:\n    \"\"\"\u519c\u6c11\u7684\u635f\u5931\uff0c\u4eba\u53e3\u589e\u957f\u7387\u4e0b\u964d\u3002\"\"\"\n    if self.random.random() &lt; self.params.loss.prob:\n        self.size *= 1 - self.params.loss.rate\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.Farmer.size","title":"<code>size(size)</code>","text":"<p>\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236</p> Source code in <code>src/api/farmer.py</code> <pre><code>@SiteGroup.size.setter\ndef size(self, size: Number) -&gt; None:\n    \"\"\"\u4eba\u53e3\u89c4\u6a21\u6709\u6700\u5927\u6700\u5c0f\u503c\u9650\u5236\"\"\"\n    SiteGroup.size.fset(self, size)\n    if size &gt; self.max_size:\n        self.complicate()\n</code></pre>"},{"location":"api/farmer/#_2","title":"\u6c34\u7a3b\u519c\u6c11","text":"<p>               Bases: <code>Farmer</code></p> <p>\u79cd\u690d\u6c34\u7a3b\u7684\u519c\u6c11</p> Source code in <code>src/api/rice_farmer.py</code> <pre><code>class RiceFarmer(Farmer):\n    \"\"\"\u79cd\u690d\u6c34\u7a3b\u7684\u519c\u6c11\"\"\"\n\n    def convert(self) -&gt; Farmer | Self:\n        \"\"\"\u53ef\u4ee5\u8f6c\u5316\u4f1a\u79cd\u690d\u666e\u901a\u6c34\u7a3b\u7684\u519c\u6c11\"\"\"\n        cond1 = self.size &lt; self.params.convert_threshold.get(\"to_farmer\")\n        cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_farmer\", 0.0)\n        return self._cell.convert(self, to=\"Farmer\") if cond1 &amp; cond2 else self\n</code></pre>"},{"location":"api/farmer/#src.api.farmer.RiceFarmer.convert","title":"<code>convert()</code>","text":"<p>\u53ef\u4ee5\u8f6c\u5316\u4f1a\u79cd\u690d\u666e\u901a\u6c34\u7a3b\u7684\u519c\u6c11</p> Source code in <code>src/api/rice_farmer.py</code> <pre><code>def convert(self) -&gt; Farmer | Self:\n    \"\"\"\u53ef\u4ee5\u8f6c\u5316\u4f1a\u79cd\u690d\u666e\u901a\u6c34\u7a3b\u7684\u519c\u6c11\"\"\"\n    cond1 = self.size &lt; self.params.convert_threshold.get(\"to_farmer\")\n    cond2 = self.random.random() &lt; self.params.convert_prob.get(\"to_farmer\", 0.0)\n    return self._cell.convert(self, to=\"Farmer\") if cond1 &amp; cond2 else self\n</code></pre>"},{"location":"api/hunter/","title":"\u72e9\u730e\u91c7\u96c6\u8005","text":"<p>               Bases: <code>SiteGroup</code></p> <p>\u72e9\u730e\u91c7\u96c6\u8005</p> Source code in <code>src/api/hunter.py</code> <pre><code>class Hunter(SiteGroup):\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\"\"\"\n\n    @property\n    def max_size(self) -&gt; int:\n        return np.ceil(self.get(\"lim_h\")) if self.on_earth else 100_000_000\n\n    @property\n    def is_complex(self) -&gt; bool:\n        \"\"\"\u8d85\u8fc7\u5b9a\u5c45\u89c4\u6a21\u7684\u9608\u503c\uff0c\u4f1a\u53d8\u6210\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\u3002\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\u91cc\u7684`settle_size`\u53ef\u4ee5\u8c03\u8282\u8be5\u9608\u503c\u3002\n\n        returns:\n            \u662f\u5426\u662f\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\n        \"\"\"\n        return self.size &gt; self.params.is_complex if self.on_earth else False\n\n    @alive_required\n    def moving(self, cell: PatchCell) -&gt; bool:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u8981\u53bb\u7684\u683c\u5b50\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u4e3b\u4f53\uff0c\u5c31\u4f1a\u4e0e\u4ed6\u7ade\u4e89\n\n        Args:\n            cell (PatchCell | None): \u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u3002\n        \"\"\"\n        other = cell.agents.item(\"item\")\n        if other is None:\n            return True\n        if other.breed in (\"Farmer\", \"RiceFarmer\"):\n            while other.alive and self.alive:\n                result = self.compete(other)\n            return result\n        if other.breed == \"Hunter\":\n            # \u5982\u679c\u5408\u5e76\uff0c\u5c31\u4e0d\u518d\u7ee7\u7eed\u524d\u5f80\u4e86\uff08\u5df2\u6b7b\uff09\n            self.merge(other)\n            return False\n        raise TypeError(f\"Unknown breed {other.breed}.\")\n\n    @alive_required\n    def merge(self, other_hunter: Hunter) -&gt; bool:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5408\u5e76\u3002\n\n        Parameters:\n            other_hunter: \u53e6\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u3002\n\n        Returns:\n            \u662f\u5426\u88ab\u5408\u5e76\u4e86\u3002\n        \"\"\"\n        size = max(other_hunter.size + self.size, other_hunter.get(\"lim_h\"))\n        other_hunter.size = size\n        self.die()\n\n    def diffuse(self, group_range: Tuple[Number] | None = None) -&gt; Self:\n        \"\"\"\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb\n\n        Args:\n            group_range (Tuple[Number, Number] | None):\n                \u65b0\u4e3b\u4f53\u7684\u89c4\u6a21\u8303\u56f4\uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u4e3b\u4f53\u7684\u89c4\u6a21\u53c2\u6570\u3002\n\n        returns:\n            \u5206\u6563\u540e\u7684\u7ed3\u679c\u3002\n            - \u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002\n            - \u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002\n        \"\"\"\n        if self.size &gt;= self.max_size:\n            return super().diffuse(group_range=group_range)\n        return None\n\n    @alive_required\n    def convert(self, radius: int = 1, moore: bool = False) -&gt; Self:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5411\u519c\u6c11\u8f6c\u5316\uff1a\n        1. \u4f18\u5148\u8f6c\u5316\u6210\u666e\u901a\u519c\u6c11\n        2. \u5176\u6b21\u8003\u8651\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\n        \"\"\"\n        agent = self._convert_to_farmer(radius=radius, moore=moore)\n        # agent \u4e0d\u662f\u81ea\u5df1\u8bf4\u660e\u8f6c\u5316\u6210\u529f\n        if agent is not self:\n            return agent\n        # \u6ca1\u6210\u529f\u518d\u770b\u8f6c\u5316\u6c34\u7a3b\u519c\u6c11\u7684\u7ed3\u679c\n        return self._convert_to_rice(radius=radius, moore=moore)\n\n    def _convert_to_farmer(self, radius: int = 1, moore: bool = False) -&gt; Self | Farmer:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n        1. \u5468\u56f4\u6709\u519c\u6c11\n        2. \u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        3. \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002\n            moore (bool): \u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c\n            \u5373\u641c\u7d228\u4e34\u57df\uff0c\u5305\u62ec\u5bf9\u89d2\u7ebf\u7684\u56db\u4e2a\u683c\u5b50\u3002\n            \u9ed8\u8ba4\u4e0d\u542f\u7528\uff08\u5373\u4ec5\u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u3002\n\n        returns:\n            \u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002\n            \u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002\n        \"\"\"\n        # \u5468\u56f4\u6709\u519c\u6c11\n        cells = self.at.neighboring(radius=radius, moore=moore)\n        cond1 = any(cells.apply(lambda c: c.agents.has(\"Farmer\")))\n        # \u4e14\u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        cond2 = self.at.is_arable\n        # \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n        convert_prob = self.params.convert_prob.get(\"to_farmer\", 0.0)\n        cond3 = self.random.random() &lt; convert_prob\n        # \u540c\u65f6\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u5316\u4e3a\u519c\u6c11\n        return self.at.convert(self, \"Farmer\") if cond1 and cond2 and cond3 else self\n\n    def _convert_to_rice(\n        self, radius: int = 1, moore: bool = False\n    ) -&gt; Self | RiceFarmer:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u53ef\u80fd\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\uff0c\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n        1. \u5468\u56f4\u6709\u6c34\u7a3b\u519c\u6c11\n        2. \u76ee\u524d\u7684\u571f\u5730\u662f\u6ee1\u8db3\u6c34\u7a3b\u751f\u957f\u6761\u4ef6\u7684\u53ef\u8015\u5730\n        3. \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u9ed8\u8ba4\u4e3a\u5468\u56f4\u4e00\u683c\u3002\n            moore (bool): \u662f\u5426\u4f7f\u7528Moore\u90bb\u57df\u8fdb\u884c\u641c\u7d22\uff0c\n            \u5373\u641c\u7d228\u4e34\u57df\uff0c\u5305\u62ec\u5bf9\u89d2\u7ebf\u7684\u56db\u4e2a\u683c\u5b50\u3002\n            \u9ed8\u8ba4\u4e0d\u542f\u7528\uff08\u5373\u4ec5\u8ba1\u7b97\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u683c\u5b50\uff09\u3002\n\n        returns:\n            \u5982\u679c\u6ca1\u6709\u8f6c\u5316\uff0c\u8fd4\u56de\u81ea\u8eab\u3002\n            \u5982\u679c\u6210\u529f\u8f6c\u5316\uff0c\u8fd4\u56de\u8f6c\u5316\u540e\u7684\u4e3b\u4f53\u3002\n        \"\"\"\n        # \u5468\u56f4\u6709\u6c34\u7a3b\u519c\u6c11\n        cells = self.at.neighboring(radius=radius, moore=moore)\n        cond1 = any(cells.apply(lambda c: c.agents.has(\"RiceFarmer\")))\n        # \u4e14\u76ee\u524d\u7684\u571f\u5730\u662f\u53ef\u8015\u5730\n        cond2 = self.at.is_rice_arable\n        # \u8f6c\u5316\u6982\u7387\u5c0f\u4e8e\u9608\u503c\n        convert_prob = self.params.convert_prob.get(\"to_rice\", 0.0)\n        cond3 = self.random.random() &lt; convert_prob\n        # \u540c\u65f6\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u5316\u4e3a\u519c\u6c11\n        return (\n            self.at.convert(self, \"RiceFarmer\") if cond1 and cond2 and cond3 else self\n        )\n\n    @alive_required\n    def move_one(self, radius: int = 1, cell_now: Optional[PatchCell] = None) -&gt; None:\n        \"\"\"\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002\n\n        Note:\n            *\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002\n            \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002\n            \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002*\n\n        Args:\n            radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c\n\n        returns:\n            \u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n        \"\"\"\n        if self.is_complex:\n            return False\n        # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5f53\u524d\u7684\u683c\u5b50\uff0c\u5c31\u4f7f\u7528\u5f53\u524d\u7684\u683c\u5b50\n        if cell_now is None:\n            cell_now = self.at\n        if new_cell := search_cell(self, cell_now, radius=radius):\n            self.move.to(new_cell)\n            return True\n        return False\n\n    @alive_required\n    def compete(self, other: SiteGroup) -&gt; bool:\n        \"\"\"\u4e0e\u5176\u5b83\u4e3b\u4f53\u7ade\u4e89\uff0c\u6839\u636e\u7ade\u4e89\u5bf9\u8c61\u6709\u7740\u4e0d\u540c\u7684\u7ade\u4e89\u89c4\u5219\uff1a\n        1. \u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005\u7684\u4eba\u53e3\u89c4\u6a21\u3002\u8f93\u4e86\u7684\u4e00\u65b9\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n        2. \u4e0e\u519c\u6c11\u7ade\u4e89\u65f6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u4f1a\u5177\u5907\u4e00\u5b9a\u5f3a\u5316\u7cfb\u6570\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 `intensified_coefficient` \u53c2\u6570\u8fdb\u884c\u8c03\u8282\u3002\n        \u8f93\u4e86\u7684\u4e00\u65b9\u5982\u679c\u662f\u519c\u6c11\uff0c\u5219\u76f4\u63a5\u88ab\u72e9\u730e\u91c7\u96c6\u8005\u6d88\u706d\uff1b\n        \u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n\n        Args:\n            other: \u4e0e\u8be5\u4e3b\u4f53\u7ade\u4e89\u7684\u53e6\u4e00\u4e2a\u4e3b\u4f53\u3002\n\n        returns:\n            \u7ade\u4e89\u6210\u529f\u5219\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n        \"\"\"\n        power = self.size\n        if isinstance(other, (Farmer, RiceFarmer)):\n            power *= self.params.intensified_coefficient\n        if power &gt;= other.size:\n            other.loss_in_competition(at=other.at)\n            return True\n        self.loss_in_competition(at=other.at)\n        return False\n\n    def loss_in_competition(self, at: Optional[PatchCell] = None) -&gt; None:\n        \"\"\"\u5728\u7ade\u4e89\u4e2d\u5931\u8d25\"\"\"\n        if self.is_complex:\n            return self.die()\n        self.size *= self.model.params.loss_rate\n        # \u6ca1\u6253\u8fc7\u5c31\u7ee7\u7eed\u8dd1\u5427\n        self.move_one(cell_now=at)\n        return None\n\n    def step(self):\n        \"\"\"step of a hunter.\"\"\"\n        super().step()\n        self.move_one()\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.is_complex","title":"<code>is_complex: bool</code>  <code>property</code>","text":"<p>\u8d85\u8fc7\u5b9a\u5c45\u89c4\u6a21\u7684\u9608\u503c\uff0c\u4f1a\u53d8\u6210\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005\u3002\u53c2\u6570\u914d\u7f6e\u6587\u4ef6\u91cc\u7684<code>settle_size</code>\u53ef\u4ee5\u8c03\u8282\u8be5\u9608\u503c\u3002</p> <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u662f\u590d\u6742\u72e9\u730e\u91c7\u96c6\u8005</p>"},{"location":"api/hunter/#src.api.hunter.Hunter.compete","title":"<code>compete(other)</code>","text":"<p>\u4e0e\u5176\u5b83\u4e3b\u4f53\u7ade\u4e89\uff0c\u6839\u636e\u7ade\u4e89\u5bf9\u8c61\u6709\u7740\u4e0d\u540c\u7684\u7ade\u4e89\u89c4\u5219\uff1a 1. \u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005\u7684\u4eba\u53e3\u89c4\u6a21\u3002\u8f93\u4e86\u7684\u4e00\u65b9\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002 2. \u4e0e\u519c\u6c11\u7ade\u4e89\u65f6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u4f1a\u5177\u5907\u4e00\u5b9a\u5f3a\u5316\u7cfb\u6570\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 <code>intensified_coefficient</code> \u53c2\u6570\u8fdb\u884c\u8c03\u8282\u3002 \u8f93\u4e86\u7684\u4e00\u65b9\u5982\u679c\u662f\u519c\u6c11\uff0c\u5219\u76f4\u63a5\u88ab\u72e9\u730e\u91c7\u96c6\u8005\u6d88\u706d\uff1b \u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>SiteGroup</code> <p>\u4e0e\u8be5\u4e3b\u4f53\u7ade\u4e89\u7684\u53e6\u4e00\u4e2a\u4e3b\u4f53\u3002</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u7ade\u4e89\u6210\u529f\u5219\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> Source code in <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef compete(self, other: SiteGroup) -&gt; bool:\n    \"\"\"\u4e0e\u5176\u5b83\u4e3b\u4f53\u7ade\u4e89\uff0c\u6839\u636e\u7ade\u4e89\u5bf9\u8c61\u6709\u7740\u4e0d\u540c\u7684\u7ade\u4e89\u89c4\u5219\uff1a\n    1. \u4e0e\u72e9\u730e\u91c7\u96c6\u8005\u7ade\u4e89\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005\u7684\u4eba\u53e3\u89c4\u6a21\u3002\u8f93\u4e86\u7684\u4e00\u65b9\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n    2. \u4e0e\u519c\u6c11\u7ade\u4e89\u65f6\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u4f1a\u5177\u5907\u4e00\u5b9a\u5f3a\u5316\u7cfb\u6570\uff0c\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u91cc\u7684 `intensified_coefficient` \u53c2\u6570\u8fdb\u884c\u8c03\u8282\u3002\n    \u8f93\u4e86\u7684\u4e00\u65b9\u5982\u679c\u662f\u519c\u6c11\uff0c\u5219\u76f4\u63a5\u88ab\u72e9\u730e\u91c7\u96c6\u8005\u6d88\u706d\uff1b\n    \u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u5c06\u4eba\u53e3\u51cf\u534a\u5e76\u8fdb\u884c\u4e00\u6b21\u79fb\u52a8\u3002\n\n    Args:\n        other: \u4e0e\u8be5\u4e3b\u4f53\u7ade\u4e89\u7684\u53e6\u4e00\u4e2a\u4e3b\u4f53\u3002\n\n    returns:\n        \u7ade\u4e89\u6210\u529f\u5219\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n    \"\"\"\n    power = self.size\n    if isinstance(other, (Farmer, RiceFarmer)):\n        power *= self.params.intensified_coefficient\n    if power &gt;= other.size:\n        other.loss_in_competition(at=other.at)\n        return True\n    self.loss_in_competition(at=other.at)\n    return False\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.convert","title":"<code>convert(radius=1, moore=False)</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5411\u519c\u6c11\u8f6c\u5316\uff1a 1. \u4f18\u5148\u8f6c\u5316\u6210\u666e\u901a\u519c\u6c11 2. \u5176\u6b21\u8003\u8651\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11</p> Source code in <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef convert(self, radius: int = 1, moore: bool = False) -&gt; Self:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5411\u519c\u6c11\u8f6c\u5316\uff1a\n    1. \u4f18\u5148\u8f6c\u5316\u6210\u666e\u901a\u519c\u6c11\n    2. \u5176\u6b21\u8003\u8651\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\n    \"\"\"\n    agent = self._convert_to_farmer(radius=radius, moore=moore)\n    # agent \u4e0d\u662f\u81ea\u5df1\u8bf4\u660e\u8f6c\u5316\u6210\u529f\n    if agent is not self:\n        return agent\n    # \u6ca1\u6210\u529f\u518d\u770b\u8f6c\u5316\u6c34\u7a3b\u519c\u6c11\u7684\u7ed3\u679c\n    return self._convert_to_rice(radius=radius, moore=moore)\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.diffuse","title":"<code>diffuse(group_range=None)</code>","text":"<p>\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb</p> <p>Parameters:</p> Name Type Description Default <code>group_range</code> <code>Tuple[Number, Number] | None</code> <p>\u65b0\u4e3b\u4f53\u7684\u89c4\u6a21\u8303\u56f4\uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u4e3b\u4f53\u7684\u89c4\u6a21\u53c2\u6570\u3002</p> <code>None</code> <p>Returns:</p> Type Description <code>Self</code> <p>\u5206\u6563\u540e\u7684\u7ed3\u679c\u3002</p> <code>Self</code> <ul> <li>\u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002</li> </ul> <code>Self</code> <ul> <li>\u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002</li> </ul> Source code in <code>src/api/hunter.py</code> <pre><code>def diffuse(self, group_range: Tuple[Number] | None = None) -&gt; Self:\n    \"\"\"\u5982\u679c\u4eba\u53e3\u5927\u4e8e\u4e00\u5b9a\u89c4\u6a21\uff0c\u72e9\u730e\u91c7\u96c6\u8005\u5206\u6563\u51fa\u53bb\n\n    Args:\n        group_range (Tuple[Number, Number] | None):\n            \u65b0\u4e3b\u4f53\u7684\u89c4\u6a21\u8303\u56f4\uff08\u6700\u5c0f\u503c\uff0c\u6700\u5927\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a\u5f53\u524d\u4e3b\u4f53\u7684\u89c4\u6a21\u53c2\u6570\u3002\n\n    returns:\n        \u5206\u6563\u540e\u7684\u7ed3\u679c\u3002\n        - \u5982\u679c\u6210\u529f\u5206\u6563\uff0c\u8fd4\u56de\u5206\u6563\u51fa\u7684\u65b0\u4e3b\u4f53\u3002\n        - \u5f53\u65e0\u6cd5\u6210\u529f\u5206\u6563\u65f6\uff0c\u8fd4\u56de\u7a7a\u503c\u3002\n    \"\"\"\n    if self.size &gt;= self.max_size:\n        return super().diffuse(group_range=group_range)\n    return None\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.loss_in_competition","title":"<code>loss_in_competition(at=None)</code>","text":"<p>\u5728\u7ade\u4e89\u4e2d\u5931\u8d25</p> Source code in <code>src/api/hunter.py</code> <pre><code>def loss_in_competition(self, at: Optional[PatchCell] = None) -&gt; None:\n    \"\"\"\u5728\u7ade\u4e89\u4e2d\u5931\u8d25\"\"\"\n    if self.is_complex:\n        return self.die()\n    self.size *= self.model.params.loss_rate\n    # \u6ca1\u6253\u8fc7\u5c31\u7ee7\u7eed\u8dd1\u5427\n    self.move_one(cell_now=at)\n    return None\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.merge","title":"<code>merge(other_hunter)</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5408\u5e76\u3002</p> <p>Parameters:</p> Name Type Description Default <code>other_hunter</code> <code>Hunter</code> <p>\u53e6\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u3002</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u88ab\u5408\u5e76\u4e86\u3002</p> Source code in <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef merge(self, other_hunter: Hunter) -&gt; bool:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5408\u5e76\u3002\n\n    Parameters:\n        other_hunter: \u53e6\u4e00\u4e2a\u72e9\u730e\u91c7\u96c6\u8005\u3002\n\n    Returns:\n        \u662f\u5426\u88ab\u5408\u5e76\u4e86\u3002\n    \"\"\"\n    size = max(other_hunter.size + self.size, other_hunter.get(\"lim_h\"))\n    other_hunter.size = size\n    self.die()\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.move_one","title":"<code>move_one(radius=1, cell_now=None)</code>","text":"<p>\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002</p> Note <p>\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002 \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002 \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002</p> <p>Parameters:</p> Name Type Description Default <code>radius</code> <code>int</code> <p>\u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c</p> <code>1</code> <p>Returns:</p> Type Description <code>None</code> <p>\u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de <code>True</code>\uff0c\u5426\u5219\u8fd4\u56de <code>False</code>\u3002</p> Source code in <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef move_one(self, radius: int = 1, cell_now: Optional[PatchCell] = None) -&gt; None:\n    \"\"\"\u6709\u79fb\u52a8\u80fd\u529b\u624d\u80fd\u79fb\u52a8\uff0c\u5728\u5468\u56f4\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u683c\u5b50\u79fb\u52a8\u3002\n\n    Note:\n        *\u5173\u4e8e\u79fb\u52a8\u529b\u5927\u5c0f\u7684\u8ba8\u8bba\u5c3a\u5ea6\u90fd\u592a\u5c0f\uff0c\u6216\u8bb8\u53ef\u4ee5\u7b80\u5316\u4e3a1\u6b21\u79fb\u52a81\u683c\u3002\n        \u628a\u5dee\u5f02\u843d\u5728\u72e9\u730e\u91c7\u96c6\u8005\u662f\u5426\u5b9a\u5c45\uff0c\u5373\u4e27\u5931\u79fb\u52a8\u529b\u3002\n        \u540e\u8005\u53ef\u5927\u81f4\u8bbe\u5b9a\u4e3asize_h\u5927\u4e8e100\uff08Kelly 2013: 171\uff09\u3002*\n\n    Args:\n        radius (int): \u641c\u7d22\u7684\u534a\u5f84\u8303\u56f4\uff0c\u5728\u5468\u56f4\u4e00\u683c\n\n    returns:\n        \u5982\u679c\u6210\u529f\u79fb\u52a8\uff0c\u8fd4\u56de `True`\uff0c\u5426\u5219\u8fd4\u56de `False`\u3002\n    \"\"\"\n    if self.is_complex:\n        return False\n    # \u5982\u679c\u6ca1\u6709\u6307\u5b9a\u5f53\u524d\u7684\u683c\u5b50\uff0c\u5c31\u4f7f\u7528\u5f53\u524d\u7684\u683c\u5b50\n    if cell_now is None:\n        cell_now = self.at\n    if new_cell := search_cell(self, cell_now, radius=radius):\n        self.move.to(new_cell)\n        return True\n    return False\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.moving","title":"<code>moving(cell)</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u8981\u53bb\u7684\u683c\u5b50\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u4e3b\u4f53\uff0c\u5c31\u4f1a\u4e0e\u4ed6\u7ade\u4e89</p> <p>Parameters:</p> Name Type Description Default <code>cell</code> <code>PatchCell | None</code> <p>\u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u3002</p> required Source code in <code>src/api/hunter.py</code> <pre><code>@alive_required\ndef moving(self, cell: PatchCell) -&gt; bool:\n    \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u8981\u53bb\u7684\u683c\u5b50\u5982\u679c\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u4e3b\u4f53\uff0c\u5c31\u4f1a\u4e0e\u4ed6\u7ade\u4e89\n\n    Args:\n        cell (PatchCell | None): \u72e9\u730e\u91c7\u96c6\u8005\u653e\u5230\u7684\u683c\u5b50\u3002\n    \"\"\"\n    other = cell.agents.item(\"item\")\n    if other is None:\n        return True\n    if other.breed in (\"Farmer\", \"RiceFarmer\"):\n        while other.alive and self.alive:\n            result = self.compete(other)\n        return result\n    if other.breed == \"Hunter\":\n        # \u5982\u679c\u5408\u5e76\uff0c\u5c31\u4e0d\u518d\u7ee7\u7eed\u524d\u5f80\u4e86\uff08\u5df2\u6b7b\uff09\n        self.merge(other)\n        return False\n    raise TypeError(f\"Unknown breed {other.breed}.\")\n</code></pre>"},{"location":"api/hunter/#src.api.hunter.Hunter.step","title":"<code>step()</code>","text":"<p>step of a hunter.</p> Source code in <code>src/api/hunter.py</code> <pre><code>def step(self):\n    \"\"\"step of a hunter.\"\"\"\n    super().step()\n    self.move_one()\n</code></pre>"},{"location":"api/model/","title":"\u6a21\u578b\u5de5\u4f5c\u6d41","text":"<p>               Bases: <code>MainModel</code></p> <p>\u8fd0\u884c\u7684\u6a21\u578b</p> Source code in <code>src/core/model.py</code> <pre><code>class Model(MainModel):\n    \"\"\"\u8fd0\u884c\u7684\u6a21\u578b\"\"\"\n\n    def __getattr__(self, name: str):\n        # \u65ad\u70b9\u8bc6\u522b\n        if re.match(BKP, name):\n            return self.detect_breakpoints(name.replace(\"bkp_\", \"\"))\n        # \u8ba1\u7b97\u65ad\u70b9\u4e4b\u524d\u7684\u589e\u957f\u7387\n        if re.match(PRE, name):\n            return self.calc_rate(name.replace(\"pre_\", \"\"))[0]\n        # \u8ba1\u7b97\u65ad\u70b9\u4e4b\u540e\u7684\u589e\u957f\u7387\n        if re.match(POST, name):\n            return self.calc_rate(name.replace(\"post_\", \"\"))[1]\n        # \u8ba1\u6570\n        if kwargs := clean_name(name):\n            return counting(model=self, **kwargs)\n        return super().__getattribute__(name)\n\n    @property\n    def farmers(self) -&gt; ActorsList:\n        \"\"\"\u519c\u6c11\u5217\u8868\"\"\"\n        return self.agents(\"Farmer\")\n\n    @property\n    def hunters(self) -&gt; ActorsList:\n        \"\"\"\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868\"\"\"\n        return self.agents(\"Hunter\")\n\n    @property\n    def rice(self) -&gt; ActorsList:\n        \"\"\"\u79cd\u6c34\u7a3b\u7684\u519c\u6c11\u5217\u8868\"\"\"\n        return self.agents(\"RiceFarmer\")\n\n    @lru_cache\n    def get_data_col(self, actor: ActorType) -&gt; pd.Series:\n        \"\"\"\u83b7\u53d6\u4e3b\u4f53\u7684\u6570\u636e\u5217\"\"\"\n        data = self.datacollector.get_model_vars_dataframe()\n        col_by = self.p.get(\"detect_bkp_by\", \"size\")\n        col = COL_NAMES[col_by].replace(\"breed\", actor)\n        return data[col]\n\n    @lru_cache\n    def detect_breakpoints(self, actor: ActorType) -&gt; int:\n        \"\"\"\u68c0\u6d4b\u67d0\u4e2a\u4e3b\u4f53\u6570\u91cf\u53d1\u5c55\u4e2d\u7684\u62d0\u70b9\u3002\n        Parameters:\n            actor: str\n                \u4e3b\u4f53\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f \"farmers\", \"hunters\", \"rice\" \u4e4b\u4e00\n\n        Returns:\n            int\n                \u62d0\u70b9\u7684\u7d22\u5f15\u3002\n        \"\"\"\n        n_bkps = self.p.get(\"n_bkps\", 1)\n        if n_bkps != 1:\n            raise NotImplementedError(\"Only support one breakpoint detection so far.\")\n        data = self.get_data_col(actor)\n        return detect_breakpoints(data, n_bkps=n_bkps)\n\n    @lru_cache\n    def calc_rate(self, actor: ActorType) -&gt; Tuple[float, float]:\n        \"\"\"\u8ba1\u7b97\u67d0\u4e2a\u4e3b\u4f53\u5728\u65ad\u70b9\u524d\u540e\u7684\u7ebf\u6027\u589e\u957f\u7387\uff08\u659c\u7387\uff09\u3002\"\"\"\n        data = self.get_data_col(actor)\n        bkp = self.detect_breakpoints(actor)\n\n        def calculate_slope(series: pd.Series) -&gt; float:\n            if len(series) &lt;= 1:\n                return 0\n            x = np.arange(len(series))\n            slope, _, _, _, _ = stats.linregress(x, series)\n            return slope\n\n        before_rate = calculate_slope(data[: bkp + 1])\n        after_rate = calculate_slope(data[bkp:])\n\n        return before_rate, after_rate\n\n    def _inspect_sources(self, breed: str) -&gt; Dict[str, int]:\n        \"\"\"\u83b7\u53d6\u6765\u6e90\u4e8e\u67d0\u79cd\u4eba\u7684\u8f6c\u6362\u7ed3\u679c\"\"\"\n        if breed not in {\"Farmer\", \"RiceFarmer\", \"Hunter\"}:\n            raise TypeError(f\"Invalid breed {breed}.\")\n        total = self.agents.select({\"source\": breed})\n        farmers = total.select(\"Farmer\")\n        hunters = total.select(\"Hunter\")\n        rice = total.select(\"RiceFarmer\")\n        return {\n            \"farmers_end\": len(farmers),\n            \"hunters_end\": len(hunters),\n            \"rice_end\": len(rice),\n            \"total_end\": len(total),\n        }\n\n    def export_conversion_data(self) -&gt; None:\n        \"\"\"\u5bfc\u51fa\u8f6c\u6362\u8fc7\u7a0b\"\"\"\n        return pd.DataFrame(\n            {\n                \"farmer_init\": self._inspect_sources(\"Farmer\"),\n                \"hunter_init\": self._inspect_sources(\"Hunter\"),\n                \"rice_init\": self._inspect_sources(\"RiceFarmer\"),\n            }\n        ).to_csv(self.outpath / f\"repeat_{self.run_id}_conversion.csv\")\n\n    def end(self):\n        \"\"\"\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n        self.plot.dynamic()\n        self.plot.heatmap()\n        self.actors.plot.hist(\n            attr=\"size\", savefig=self.outpath / f\"repeat_{self.run_id}_hist.jpg\"\n        )\n        self.export_conversion_data()\n\n    @property\n    def plot(self) -&gt; ModelViz:\n        \"\"\"\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n        save_fig = self.params.get(\"save_plots\", False)\n        path = self.outpath if save_fig else None\n        return ModelViz(model=self, save_path=path)\n</code></pre>"},{"location":"api/model/#src.core.model.Model.farmers","title":"<code>farmers: ActorsList</code>  <code>property</code>","text":"<p>\u519c\u6c11\u5217\u8868</p>"},{"location":"api/model/#src.core.model.Model.hunters","title":"<code>hunters: ActorsList</code>  <code>property</code>","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u5217\u8868</p>"},{"location":"api/model/#src.core.model.Model.plot","title":"<code>plot: ModelViz</code>  <code>property</code>","text":"<p>\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316</p>"},{"location":"api/model/#src.core.model.Model.rice","title":"<code>rice: ActorsList</code>  <code>property</code>","text":"<p>\u79cd\u6c34\u7a3b\u7684\u519c\u6c11\u5217\u8868</p>"},{"location":"api/model/#src.core.model.Model.calc_rate","title":"<code>calc_rate(actor)</code>  <code>cached</code>","text":"<p>\u8ba1\u7b97\u67d0\u4e2a\u4e3b\u4f53\u5728\u65ad\u70b9\u524d\u540e\u7684\u7ebf\u6027\u589e\u957f\u7387\uff08\u659c\u7387\uff09\u3002</p> Source code in <code>src/core/model.py</code> <pre><code>@lru_cache\ndef calc_rate(self, actor: ActorType) -&gt; Tuple[float, float]:\n    \"\"\"\u8ba1\u7b97\u67d0\u4e2a\u4e3b\u4f53\u5728\u65ad\u70b9\u524d\u540e\u7684\u7ebf\u6027\u589e\u957f\u7387\uff08\u659c\u7387\uff09\u3002\"\"\"\n    data = self.get_data_col(actor)\n    bkp = self.detect_breakpoints(actor)\n\n    def calculate_slope(series: pd.Series) -&gt; float:\n        if len(series) &lt;= 1:\n            return 0\n        x = np.arange(len(series))\n        slope, _, _, _, _ = stats.linregress(x, series)\n        return slope\n\n    before_rate = calculate_slope(data[: bkp + 1])\n    after_rate = calculate_slope(data[bkp:])\n\n    return before_rate, after_rate\n</code></pre>"},{"location":"api/model/#src.core.model.Model.detect_breakpoints","title":"<code>detect_breakpoints(actor)</code>  <code>cached</code>","text":"<p>\u68c0\u6d4b\u67d0\u4e2a\u4e3b\u4f53\u6570\u91cf\u53d1\u5c55\u4e2d\u7684\u62d0\u70b9\u3002 Parameters:     actor: str         \u4e3b\u4f53\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f \"farmers\", \"hunters\", \"rice\" \u4e4b\u4e00</p> <p>Returns:</p> Type Description <code>int</code> <p>int \u62d0\u70b9\u7684\u7d22\u5f15\u3002</p> Source code in <code>src/core/model.py</code> <pre><code>@lru_cache\ndef detect_breakpoints(self, actor: ActorType) -&gt; int:\n    \"\"\"\u68c0\u6d4b\u67d0\u4e2a\u4e3b\u4f53\u6570\u91cf\u53d1\u5c55\u4e2d\u7684\u62d0\u70b9\u3002\n    Parameters:\n        actor: str\n            \u4e3b\u4f53\u7c7b\u578b\uff0c\u53ef\u4ee5\u662f \"farmers\", \"hunters\", \"rice\" \u4e4b\u4e00\n\n    Returns:\n        int\n            \u62d0\u70b9\u7684\u7d22\u5f15\u3002\n    \"\"\"\n    n_bkps = self.p.get(\"n_bkps\", 1)\n    if n_bkps != 1:\n        raise NotImplementedError(\"Only support one breakpoint detection so far.\")\n    data = self.get_data_col(actor)\n    return detect_breakpoints(data, n_bkps=n_bkps)\n</code></pre>"},{"location":"api/model/#src.core.model.Model.end","title":"<code>end()</code>","text":"<p>\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316</p> Source code in <code>src/core/model.py</code> <pre><code>def end(self):\n    \"\"\"\u6a21\u578b\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5c06\u81ea\u52a8\u7ed8\u5236\u72e9\u730e\u91c7\u96c6\u8005\u548c\u519c\u6c11\u7684\u6570\u91cf\u53d8\u5316\"\"\"\n    self.plot.dynamic()\n    self.plot.heatmap()\n    self.actors.plot.hist(\n        attr=\"size\", savefig=self.outpath / f\"repeat_{self.run_id}_hist.jpg\"\n    )\n    self.export_conversion_data()\n</code></pre>"},{"location":"api/model/#src.core.model.Model.export_conversion_data","title":"<code>export_conversion_data()</code>","text":"<p>\u5bfc\u51fa\u8f6c\u6362\u8fc7\u7a0b</p> Source code in <code>src/core/model.py</code> <pre><code>def export_conversion_data(self) -&gt; None:\n    \"\"\"\u5bfc\u51fa\u8f6c\u6362\u8fc7\u7a0b\"\"\"\n    return pd.DataFrame(\n        {\n            \"farmer_init\": self._inspect_sources(\"Farmer\"),\n            \"hunter_init\": self._inspect_sources(\"Hunter\"),\n            \"rice_init\": self._inspect_sources(\"RiceFarmer\"),\n        }\n    ).to_csv(self.outpath / f\"repeat_{self.run_id}_conversion.csv\")\n</code></pre>"},{"location":"api/model/#src.core.model.Model.get_data_col","title":"<code>get_data_col(actor)</code>  <code>cached</code>","text":"<p>\u83b7\u53d6\u4e3b\u4f53\u7684\u6570\u636e\u5217</p> Source code in <code>src/core/model.py</code> <pre><code>@lru_cache\ndef get_data_col(self, actor: ActorType) -&gt; pd.Series:\n    \"\"\"\u83b7\u53d6\u4e3b\u4f53\u7684\u6570\u636e\u5217\"\"\"\n    data = self.datacollector.get_model_vars_dataframe()\n    col_by = self.p.get(\"detect_bkp_by\", \"size\")\n    col = COL_NAMES[col_by].replace(\"breed\", actor)\n    return data[col]\n</code></pre>"},{"location":"tech/breakpoint/","title":"\u65ad\u70b9\u68c0\u6d4b","text":""},{"location":"tech/breakpoint/#_1","title":"\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5","text":"<p>\u65ad\u70b9\u68c0\u6d4b\u4f7f\u7528[<code>ruptures</code>]\u5e93\u5b9e\u73b0\u3002</p> <p>\u672c\u6a21\u578b\u4e2d\uff0c\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5 <code>detect_breakpoints</code> \u9ed8\u8ba4\u8c03\u7528 [<code>Dynp</code> \u7b97\u6cd5]\uff0c\u7528\u6237\u5fc5\u987b\u6307\u5b9a <code>n_bkps</code> \u53c2\u6570\uff0c\u5373\u671f\u671b\u6709\u591a\u5c11\u4e2a\u65ad\u70b9\uff0c\u5728\u8fd9\u91cc\u9ed8\u8ba4 <code>n_bkps=1</code>\uff0c\u5373\u53ea\u68c0\u6d4b\u4e00\u4e2a\u65ad\u70b9\u3002\u540c\u65f6\uff0c\u7528\u6237\u8fd8\u9700\u8981\u6307\u5b9a <code>min_size</code> \u53c2\u6570\uff0c\u5373\u6bcf\u4e2a\u65ad\u70b9\u4e4b\u95f4\u81f3\u5c11\u5305\u542b\u591a\u5c11\u4e2a\u6570\u636e\u70b9\uff0c\u5728\u8fd9\u91cc\u9ed8\u8ba4 <code>min_size=5</code>\uff0c\u8fd9\u610f\u5473\u7740\u5728\u68c0\u6d4b\u65ad\u70b9\u65f6\u82e5\u5c11\u4e8e5\u4e2a\u6570\u636e\u70b9\uff08\u6bd4\u5982\u6a21\u578b\u53ea\u8fd0\u884c\u4e864\u5e74\uff09\uff0c\u5219\u4e0d\u8fdb\u884c\u65ad\u70b9\u68c0\u6d4b\u3002</p> <p>\u53ef\u66ff\u4ee3\u7684\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5\u5305\u62ec\uff1a</p> <ul> <li><code>Dynp</code> \u7b97\u6cd5</li> <li><code>Binseg</code> \u7b97\u6cd5</li> <li><code>BottomUp</code> \u7b97\u6cd5</li> <li><code>Window</code> \u7b97\u6cd5</li> </ul> <p>\u68c0\u67e5\u5e8f\u5217\u6570\u636e\u7684\u53d8\u5316\u8d8b\u52bf\u95f4\u65ad\u70b9\u3002</p> <p>Parameters:</p> Name Type Description Default <code>series</code> <code>Series</code> <p>\u9700\u8981\u5224\u65ad\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u7d22\u5f15\u662f\u65f6\u95f4\uff0c\u503c\u662f\u5224\u65ad\u8d8b\u52bf\u7684\u503c\u3002</p> required <code>n_bkps</code> <code>int</code> <p>\u9884\u671f\u6709\u591a\u5c11\u4e2a\u95f4\u65ad\u70b9\uff0c\u9ed8\u8ba4\u4e3a1.</p> <code>1</code> <code>algorithm</code> <code>str</code> <p>\u4f9d\u8d56\u4e8e\u5305ruptures\u8fdb\u884c\u5b9e\u73b0\uff0c\u4ece\u4ee5\u4e0b\u56db\u79cd\u7b97\u6cd5\u4e2d\u9009\u62e9\u4e00\u79cd: - \"Dynp\" - \"Binseg\" - \"BottomUp\" - \"Window\" \u9ed8\u8ba4\u9009\u7528 Dynp\u3002</p> <code>'Dynp'</code> <code>min_size</code> <code>int</code> <p>\u5207\u5272\u65f6\u95f4\u5e8f\u5217\u540e\uff0c\u6bcf\u4e00\u6bb5\u6700\u5c0f\u4e0d\u80fd\u5c11\u4e8e\u51e0\u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u9ed8\u8ba4\u4e3a5\u3002</p> <code>5</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>\u5982\u679c\u8f93\u5165\u4e86\u4e0d\u6b63\u786e\u7684\u7b97\u6cd5\u540d\u79f0\u3002</p> <p>Returns:</p> Type Description <code>List[int] | int</code> <p>\u8bc6\u522b\u7684\u65ad\u70b9\u6240\u5728\u7684\u65f6\u95f4\u3002</p> Source code in <code>src/workflow/analysis.py</code> <pre><code>def detect_breakpoints(\n    series: pd.Series, n_bkps: int = 1, algorithm: str = \"Dynp\", min_size: int = 5\n) -&gt; List[int] | int:\n    \"\"\"\u68c0\u67e5\u5e8f\u5217\u6570\u636e\u7684\u53d8\u5316\u8d8b\u52bf\u95f4\u65ad\u70b9\u3002\n\n    Parameters:\n        series:\n            \u9700\u8981\u5224\u65ad\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\uff0c\u7d22\u5f15\u662f\u65f6\u95f4\uff0c\u503c\u662f\u5224\u65ad\u8d8b\u52bf\u7684\u503c\u3002\n        n_bkps:\n            \u9884\u671f\u6709\u591a\u5c11\u4e2a\u95f4\u65ad\u70b9\uff0c\u9ed8\u8ba4\u4e3a1.\n        algorithm:\n            \u4f9d\u8d56\u4e8e\u5305[ruptures](https://centre-borelli.github.io/ruptures-docs/)\u8fdb\u884c\u5b9e\u73b0\uff0c\u4ece\u4ee5\u4e0b\u56db\u79cd\u7b97\u6cd5\u4e2d\u9009\u62e9\u4e00\u79cd:\n            - \"[Dynp](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/dynp-reference/)\"\n            - \"[Binseg](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/binseg-reference/)\"\n            - \"[BottomUp](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/bottomup-reference/)\"\n            - \"[Window](https://centre-borelli.github.io/ruptures-docs/code-reference/detection/window-reference/)\"\n            \u9ed8\u8ba4\u9009\u7528 Dynp\u3002\n        min_size:\n            \u5207\u5272\u65f6\u95f4\u5e8f\u5217\u540e\uff0c\u6bcf\u4e00\u6bb5\u6700\u5c0f\u4e0d\u80fd\u5c11\u4e8e\u51e0\u4e2a\u65f6\u95f4\u5355\u4f4d\uff0c\u9ed8\u8ba4\u4e3a5\u3002\n\n    Raises:\n        ValueError:\n            \u5982\u679c\u8f93\u5165\u4e86\u4e0d\u6b63\u786e\u7684\u7b97\u6cd5\u540d\u79f0\u3002\n\n    Returns:\n        \u8bc6\u522b\u7684\u65ad\u70b9\u6240\u5728\u7684\u65f6\u95f4\u3002\n    \"\"\"\n    valid_algorithms = [\"Dynp\", \"Binseg\", \"BottomUp\", \"Window\"]\n    if algorithm not in valid_algorithms:\n        raise ValueError(\n            f\"Algorithm should be chosen from {valid_algorithms}, got {algorithm} instead.\"\n        )\n    algorithm = getattr(rpt, algorithm, None)\n    algo = algorithm(model=\"l2\", min_size=min_size)\n    algo.fit(series.values)\n    result = algo.predict(n_bkps=n_bkps)\n    breakpoints = [series.index[i] for i in result[:-1]]\n    if n_bkps == 1:\n        return breakpoints[0] if breakpoints else None\n    return breakpoints\n</code></pre>"},{"location":"tech/breakpoint/#_2","title":"\u68c0\u6d4b\u76ee\u6807\u53d8\u91cf","text":"<p>\u68c0\u6d4b\u4f1a\u5bf9\u6240\u6709\u4e09\u7c7b\u4e3b\u4f53\uff08\u72e9\u730e\u91c7\u96c6\u8005\u3001\u519c\u6c11\u3001\u6c34\u7a3b\uff09\u8fdb\u884c\u65ad\u70b9\u68c0\u6d4b\uff0c\u68c0\u6d4b\u76ee\u6807\u53d8\u91cf\u6709\u56db\u79cd\uff0c\u5206\u522b\u662f\uff1a</p> <ol> <li>\u4eba\u53e3\u7edd\u5bf9\u6570\u91cf\uff1asize</li> <li>\u4eba\u53e3\u5360\u603b\u4eba\u53e3\u7684\u76f8\u5bf9\u6bd4\u4f8b\uff1aratio</li> <li>\u4eba\u53e3\u7fa4\u4f53\u6570\u91cf\uff1agroup</li> <li>\u4eba\u53e3\u7fa4\u4f53\u5360\u603b\u4eba\u53e3\u7684\u76f8\u5bf9\u6bd4\u4f8b\uff1agroup_ratio</li> </ol>"},{"location":"usage/config/","title":"\u914d\u7f6e\u6587\u4ef6","text":"<p>\u914d\u7f6e\u6587\u4ef6\u662f\u6a21\u578b\u8fd0\u884c\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u6a21\u578b\u8fd0\u884c\u65f6\uff0c\u4f1a\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u53c2\u6570\u8fdb\u884c\u6a21\u62df\u3002\u914d\u7f6e\u6587\u4ef6\u7684\u683c\u5f0f\u4e3aYAML\uff0c\u7528\u6237\u53ef\u4ee5\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u4fee\u6539\u6a21\u578b\u53c2\u6570\u3002</p> <p>\u914d\u7f6e\u6587\u4ef6\u7684\u9ed8\u8ba4\u4f4d\u7f6e\u4e3a<code>config/config.yaml</code>\uff0c\u7528\u6237\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u6a21\u578b\u65f6\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002\u4f8b\u5982\uff1a</p>"},{"location":"usage/config/#_1","title":"\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784","text":"<p>\u914d\u7f6e\u6587\u4ef6\u4e3b\u8981\u5206\u4e3a\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p>"},{"location":"usage/config/#exp","title":"exp","text":"<p>\u5b9e\u9a8c\u914d\u7f6e\uff0c\u5305\u62ec\u5b9e\u9a8c\u540d\u79f0\u3001\u91cd\u590d\u6b21\u6570\u3001\u8fdb\u7a0b\u6570\u3001\u7ed8\u56fe\u53d8\u91cf\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e name str - \u5b9e\u9a8c\u540d\u79f0 repeats int 1 \u6bcf\u7ec4\u53c2\u6570\u7684\u91cd\u590d\u6b21\u6570 num_process int 1 \u5e76\u884c\u8fd0\u7b97\u7684\u8fdb\u7a0b\u6570 plot_heatmap str - \u7ed8\u5236\u70ed\u56fe\u7684\u53d8\u91cf"},{"location":"usage/config/#model","title":"model","text":"<p>\u6a21\u578b\u914d\u7f6e\uff0c\u5305\u62ec\u6a21\u578b\u53c2\u6570\uff0c\u5982\u7ade\u4e89\u5931\u8d25\u8005\u7684\u4eba\u53e3\u635f\u5931\u7cfb\u6570\u3001\u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e save_plots bool True \u662f\u5426\u4fdd\u5b58\u7ed8\u56fe loss_rate float 0.5 \u7ade\u4e89\u5931\u8d25\u8005\u7684\u4eba\u53e3\u635f\u5931\u7cfb\u6570 n_bkps int 1 \u65ad\u70b9\u6570\u91cf detect_bkp_by str 'size' \u65ad\u70b9\u68c0\u6d4b\u65b9\u6cd5"},{"location":"usage/config/#reports","title":"reports","text":"<p>\u51b3\u5b9a\u4e86\u62a5\u544a\u7684\u8f93\u51fa\u5185\u5bb9\uff0c\u5305\u62ec\u62a5\u544a\u7684\u540d\u79f0\u3001\u62a5\u544a\u7684\u53d8\u91cf\u7b49\u3002\u53d8\u91cf\u547d\u540d\u89c4\u5219\u4e3a <code>{report_type}_{group}_{variable_type}</code>\uff0c\u4f8b\u5982\uff1a</p> <ul> <li><code>len_farmers</code>: \u519c\u6c11\uff0c\u56e2\u4f53\u6570\uff0c\u5360\u603b\u4eba\u53e3\u6bd4\u4f8b</li> <li> <p><code>num_farmers_n</code>: \u519c\u6c11\uff0c\u4eba\u53e3\u6570\uff0c\u7edd\u5bf9\u4eba\u53e3\u6570\u91cf</p> </li> <li> <p>\u62a5\u544a\u540d\u79f0\u5305\u62ec\uff1a</p> </li> <li><code>model</code>: \u6a21\u578b\u62a5\u544a\uff0c\u5355\u6b21\u5b9e\u9a8c\u6bcf\u4e2a\u65f6\u95f4\u6b65\u90fd\u8bb0\u5f55\u7684\u53d8\u91cf</li> <li><code>final</code>: \u5b9e\u9a8c\u62a5\u544a\uff0c\u6bcf\u6b21\u5b9e\u9a8c\u53ea\u5728\u7ed3\u675f\u65f6\u8bb0\u5f55\u7684\u53d8\u91cf</li> <li>\u4e3b\u4f53\u5305\u62ec\uff1a</li> <li><code>farmers</code>: \u519c\u6c11</li> <li><code>hunters</code>: \u72e9\u730e\u91c7\u96c6\u8005</li> <li><code>rice</code>: \u6c34\u7a3b</li> <li>\u53d8\u91cf\u7c7b\u578b\u5305\u62ec\uff1a</li> <li><code>num</code>: \u7edd\u5bf9\u4eba\u53e3\u6570\u91cf</li> <li><code>len</code>: \u56e2\u4f53\u6570</li> <li><code>ratio</code>: \u5360\u603b\u4eba\u53e3\u6bd4\u4f8b\uff08\u4ec0\u4e48\u5c3e\u7f00\u90fd\u6ca1\u52a0\u65f6\u9ed8\u8ba4\u4f7f\u7528\u8fd9\u4e2a\uff09</li> <li><code>bkp</code>: \u65ad\u70b9\u4f4d\u7f6e\uff08\u5e74\u4efd\uff0c\u6216tick\u6570\uff09</li> <li><code>pre</code>: \u65ad\u70b9\u524d\u7684\u4eba\u53e3\u589e\u957f\u7387</li> <li><code>post</code>: \u65ad\u70b9\u540e\u7684\u4eba\u53e3\u589e\u957f\u7387</li> </ul>"},{"location":"usage/config/#env","title":"env","text":"<p>\u73af\u5883\u914d\u7f6e\uff0c\u5305\u62ec\u73af\u5883\u53c2\u6570\uff0c\u5982\u73af\u5883\u5bb9\u91cf\u3001\u73af\u5883\u5bb9\u91cf\u53d8\u5316\u7387\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e lim_h float 31.93 \u73af\u5883\u5bb9\u91cf init_hunters float 0.05 \u521d\u59cb\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u6bd4\u4f8b lam_farmer float 1 \u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387 lam_ricefarmer float 1 \u6c34\u7a3b\u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387 lim_g int 30 \u4e00\u822c\u683c\u5b50\u7684\u4e0a\u9650 tick_farmer int 0 \u519c\u6c11\u52a0\u5165\u4e16\u754c\u7684tick\u6570 tick_ricefarmer int 100 \u6c34\u7a3b\u519c\u6c11\u52a0\u5165\u4e16\u754c\u7684tick\u6570"},{"location":"usage/config/#time","title":"time","text":"<p>\u65f6\u95f4\u914d\u7f6e\uff0c\u5305\u62ec\u65f6\u95f4\u53c2\u6570\uff0c\u5982\u65f6\u95f4\u6b65\u6570\u3001\u65f6\u95f4\u6b65\u957f\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e end int 10 \u65f6\u95f4\u6b65\u6570"},{"location":"usage/config/#farmer","title":"farmer","text":"<p>\u519c\u6c11\u914d\u7f6e\uff0c\u5305\u62ec\u519c\u6c11\u53c2\u6570\uff0c\u5982\u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387\u3001\u519c\u6c11\u52a0\u5165\u4e16\u754c\u7684tick\u6570\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e area int 2 \u519c\u6c11\u6d3b\u52a8\u8303\u56f4 growth_rate float 0.004 \u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387 min_size int 6 \u6700\u5c0f\u519c\u6c11\u7fa4\u4f53\u6570\uff0c\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u65f6\u4f1a\u6b7b\u6389 new_group_size list [30, 60] \u65b0\u519c\u6c11\u7fa4\u4f53\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u6570\u662f\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u6700\u5927\u503c diffuse_prob float 0.05 \u519c\u6c11\u6269\u6563\u6982\u7387\uff0c\u6bcf\u65f6\u95f4\u5355\u4f4d\u6709x\u51e0\u7387\u5411\u5916\u6269\u6563\u65b0\u519c\u6c11\u7fa4\u4f53\u5927\u5c0f\u7684\u519c\u4e1a\u6b96\u6c11\u961f complexity float 0.1 \u590d\u6742\u5316\u540e\u4eba\u53e3\u589e\u52a0\u901f\u7387\u4e0b\u964d\u591a\u5c11 convert_prob dict - \u8f6c\u6362\u6982\u7387\uff0c\u5206\u522b\u5bf9\u5e94\u5411\u72e9\u730e\u91c7\u96c6\u8005\u3001\u6c34\u7a3b\u519c\u6c11\u7684\u8f6c\u6362\u6982\u7387 convert_threshold dict - \u8f6c\u6362\u9608\u503c\uff0c\u5206\u522b\u5bf9\u5e94\u5411\u72e9\u730e\u91c7\u96c6\u8005\uff08\u8d85\u51faxxx\u4eba\u4e0d\u518d\u8f6c\u5316\u4e3a\u72e9\u730e\u91c7\u96c6\uff09\u3001\u6c34\u7a3b\u519c\u6c11\uff08\u8d85\u51faxxx\u4eba\u624d\u80fd\u8f6c\u5316\u4e3a\u6c34\u7a3b\u519c\u6c11\uff09\u7684\u8f6c\u6362\u9608\u503c max_travel_distance int 5 \u6700\u5927\u79fb\u52a8\u8ddd\u79bb capital_area float 0.004 \u4eba\u5747\u8015\u5730\u9762\u79ef loss dict - \u635f\u5931\uff0c\u5206\u522b\u5bf9\u5e94\u635f\u5931\u6982\u7387\u3001\u635f\u5931\u6bd4\u7387"},{"location":"usage/config/#hunter","title":"hunter","text":"<p>\u72e9\u730e\u91c7\u96c6\u8005\u914d\u7f6e\uff0c\u5305\u62ec\u72e9\u730e\u91c7\u96c6\u8005\u53c2\u6570\uff0c\u5982\u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u589e\u957f\u7387\u3001\u72e9\u730e\u91c7\u96c6\u8005\u52a0\u5165\u4e16\u754c\u7684tick\u6570\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e init_size list [0, 35] \u6700\u521d\u5927\u5c0f\u662f\u591a\u5c11\uff0c\u7b2c\u4e00\u4e2a\u6570\u662f\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u6700\u5927\u503c\u3002\u4f46\u6ce8\u610f\u8bbe\u7f6e\u6700\u5c0f\u503c\u82e5\u5c0f\u4e8e\u7fa4\u4f53\u80fd\u591f\u751f\u5b58\u7684\u6700\u5c0f\u503c\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u503c\u4e5f\u4f1a\u81ea\u52a8\u53d8\u6210\u7406\u8bba\u6700\u5c0f\u503c\u3002\u5373\u5bf9\u4e8e\u72e9\u730e\u91c7\u96c6\u8005\u800c\u8a00\uff0c\u8bbe\u7f6e0\u7684\u8bdd\uff0c\u4e5f\u4f1a\u53d8\u6210 min_size \u7684\u53c2\u6570\u503c (\u9ed8\u8ba4\u4e3a6) growth_rate float 0.0008 \u72e9\u730e\u91c7\u96c6\u8005\u4eba\u53e3\u589e\u957f\u7387 min_size int 6 \u6700\u5c0f\u72e9\u730e\u91c7\u96c6\u8005\u7fa4\u4f53\u6570\uff0c\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u65f6\u4f1a\u6b7b\u6389 intensified_coefficient float 1.5 \u72e9\u730e\u91c7\u96c6\u8005\u76f8\u5bf9\u519c\u6c11\u5177\u6709\u4f18\u52bf\uff0c\u5728\u7ade\u4e89\u4e2d\u4f1a\u4e58\u4ee5\u8fd9\u4e2a\u7cfb\u6570 new_group_size list [6, 31] \u65b0\u72e9\u730e\u91c7\u96c6\u8005\u7fa4\u4f53\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u6570\u662f\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u6700\u5927\u503c convert_prob dict - \u8f6c\u6362\u6982\u7387\uff0c\u5206\u522b\u5bf9\u5e94\u5411\u519c\u6c11\u3001\u6c34\u7a3b\u519c\u6c11\u7684\u8f6c\u6362\u6982\u7387 max_travel_distance int 5 \u6700\u5927\u79fb\u52a8\u8ddd\u79bb is_complex int 100 \u8d85\u8fc7\u591a\u5c11\u4e4b\u540e\u72e9\u730e\u91c7\u96c6\u8005\u4e0d\u518d\u79fb\u52a8"},{"location":"usage/config/#ricefarmer","title":"ricefarmer","text":"<p>\u6c34\u7a3b\u519c\u6c11\u914d\u7f6e\uff0c\u5305\u62ec\u6c34\u7a3b\u519c\u6c11\u53c2\u6570\uff0c\u5982\u6c34\u7a3b\u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387\u3001\u6c34\u7a3b\u519c\u6c11\u52a0\u5165\u4e16\u754c\u7684tick\u6570\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e area int 2 \u6c34\u7a3b\u519c\u6c11\u6d3b\u52a8\u8303\u56f4 growth_rate float 0.005 \u6c34\u7a3b\u519c\u6c11\u4eba\u53e3\u589e\u957f\u7387 min_size int 6 \u6700\u5c0f\u6c34\u7a3b\u519c\u6c11\u7fa4\u4f53\u6570\uff0c\u5c0f\u4e8e\u8fd9\u4e2a\u6570\u65f6\u4f1a\u6b7b\u6389 new_group_size list [200, 300] \u65b0\u6c34\u7a3b\u519c\u6c11\u7fa4\u4f53\u5927\u5c0f\uff0c\u7b2c\u4e00\u4e2a\u6570\u662f\u6700\u5c0f\u503c\uff0c\u7b2c\u4e8c\u4e2a\u6570\u662f\u6700\u5927\u503c diffuse_prob float 0.05 \u6c34\u7a3b\u519c\u6c11\u6269\u6563\u6982\u7387\uff0c\u6bcf\u65f6\u95f4\u5355\u4f4d\u6709x\u51e0\u7387\u5411\u5916\u6269\u6563\u65b0\u6c34\u7a3b\u519c\u6c11\u7fa4\u4f53\u5927\u5c0f\u7684\u6c34\u7a3b\u519c\u6c11\u6b96\u6c11\u961f complexity float 0.1 \u590d\u6742\u5316\u540e\u4eba\u53e3\u589e\u52a0\u901f\u7387\u4e0b\u964d\u591a\u5c11 convert_prob dict - \u8f6c\u6362\u6982\u7387\uff0c\u5411\u519c\u6c11\u8f6c\u6362\u6982\u7387\uff0c\u4e0d\u80fd\u5411\u72e9\u730e\u91c7\u96c6\u8005\u8f6c\u6362 convert_threshold dict - \u8f6c\u6362\u9608\u503c\uff0c\u5373\u8d85\u51faxxx\u4eba\u4e0d\u518d\u8f6c\u5316\u4e3a\u519c\u6c11 max_travel_distance int 5 \u6700\u5927\u79fb\u52a8\u8ddd\u79bb capital_area float 0.002 \u4eba\u5747\u8015\u5730\u9762\u79ef loss dict - \u635f\u5931\uff0c\u5206\u522b\u5bf9\u5e94\u635f\u5931\u6982\u7387\u3001\u635f\u5931\u6bd4\u7387"},{"location":"usage/config/#db","title":"db","text":"<p>\u6570\u636e\u5e93\u914d\u7f6e\uff0c\u5305\u62ec\u6570\u636e\u5e93\u53c2\u6570\uff0c\u5982\u6570\u636e\u5e93\u8def\u5f84\u3001\u6570\u636e\u5e93\u7c7b\u578b\u7b49\u3002</p> \u53c2\u6570\u540d \u7c7b\u578b \u9ed8\u8ba4\u503c \u8bf4\u660e dem str - \u6570\u5b57\u9ad8\u7a0b\u6a21\u578b\u8def\u5f84 slo str - \u571f\u58e4\u7c7b\u578b\u8def\u5f84 asp str - \u5761\u5ea6\u8def\u5f84 farmland str - \u8015\u5730\u8def\u5f84 lim_h str - \u73af\u5883\u5bb9\u91cf\u8def\u5f84"},{"location":"usage/plots/","title":"\u5b9e\u9a8c\u7ed3\u679c\u7684\u5c55\u793a","text":""},{"location":"usage/plots/#_1","title":"\u7ed8\u5236\u70ed\u56fe","text":"<p>\u901a\u8fc7\u8c03\u6574\u7ed8\u5236\u70ed\u56fe\u7684\u53d8\u91cf\u53c2\u6570<code>plot_heatmap</code>\uff0c\u53ef\u4ee5\u7ed8\u5236\u4e0d\u540c\u7684\u6a21\u62df\u7ed3\u679c\uff1a</p> <ul> <li>\u5f53<code>plot_heatmap</code>\u4e3a<code>None</code>\u65f6\uff0c\u4e0d\u7ed8\u5236\u70ed\u56fe\u3002</li> <li>\u5f53<code>plot_heatmap</code>\u4e3a<code>bkp_farmer</code>\u65f6\uff0c\u7ed8\u5236[\u519c\u6c11]\u7684\u65ad\u70b9\u5e73\u5747\u6240\u5728\u4f4d\u7f6e\u3002</li> <li>... \u8fd8\u53ef\u4ee5\u8bbe\u7f6e\u4e3a\u8fd0\u884c\u7ed3\u675f\u65f6\u4fdd\u5b58\u7684\u5176\u5b83\u53ef\u7528\u53d8\u91cf\uff0c\u5982<code>bkp_rice</code>\u3001<code>len_farmers</code>\u3001<code>len_rice</code>\u7b49\u3002</li> </ul> <p>\u5982\u4e0b\u56fe\u4e2d\uff0c\u70ed\u529b\u56fe\u4ee3\u8868[\u519c\u6c11]\u7684\u65ad\u70b9\u5e73\u5747\u6240\u5728\u4f4d\u7f6e\uff0c\u65e0\u8bba <code>env.lam_farmer</code> \u548c <code>env.init_hunters</code> \u4e24\u4e2a\u5b9e\u9a8c\u7684\u53c2\u6570\u503c\u600e\u6837\u53d8\u5316\uff0c\u65ad\u70b9\u5e73\u5747\u4f4d\u7f6e\uff08\u8bb0\u4f4f\u6bcf\u4e2a\u5b9e\u9a8c\u91cd\u590d5\u6b21\uff09\u57fa\u672c\u4e0d\u53d8\uff0c\u90fd\u51fa\u73b0\u5728 <code>tick=5</code> \u9644\u8fd1\u3002</p> <p>&lt;img src=\"https://songshgeo-picgo-1302043007.cos.ap-beijing.myqcloud.com/uPic/WechatIMG6621.jpg\" alt=\"Drawing\" style=\"width: 400px;\u201d/&gt;</p>"},{"location":"usage/quick_start/","title":"\u5feb\u901f\u5f00\u59cb","text":""},{"location":"usage/quick_start/#_1","title":"\u5feb\u901f\u5f00\u59cb","text":"<p>\u672c\u6a21\u578b\u7684\u4e3b\u8981\u5de5\u4f5c\u6d41\u7a0b\u5df2\u7ecf\u96c6\u6210\u5b8c\u6bd5\u3002\u7528\u6237\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u8fd0\u884c\u6a21\u578b\u3002</p> <ul> <li>\u5feb\u901f\u5f00\u59cb</li> <li>\u73af\u5883\u914d\u7f6e</li> <li>\u8fd0\u884c\u6a21\u578b</li> <li>\u6570\u636e\u8f93\u51fa\u4e0e\u5206\u6790<ul> <li>\u591a\u6b21\u5b9e\u9a8c</li> <li>\u5355\u6b21\u5b9e\u9a8c</li> </ul> </li> </ul>"},{"location":"usage/quick_start/#_2","title":"\u73af\u5883\u914d\u7f6e","text":"<p>Note</p> <p>\u672c\u6a21\u578b\u4f9d\u8d56<code>Python &gt; 3.9</code>\u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u8bf7\u5148\u5b89\u88c5\u597d<code>Python</code>\uff0c\u5e76\u5b89\u88c5\u597d<code>poetry</code>\u6216<code>pip</code>\u3002</p> <p>\u9996\u5148\u5c06\u672c\u6a21\u578b\u514b\u9686\u5230\u672c\u5730\uff0c\u6ce8\u610f\u66ff\u6362<code>&lt;your folder name&gt;</code>\u4e3a\u4f60\u559c\u6b22\u7684\u6587\u4ef6\u5939\u540d\u79f0\uff1a</p> <pre><code>git clone https://github.com/SongshGeo/SC-20230710-SCE.git &lt;your folder name&gt;\n</code></pre> <p>\u7136\u540e\u5728\u7ec8\u7aef\u8fdb\u5165\u6a21\u578b\u6240\u5728\u6587\u4ef6\u5939\uff1a</p> <pre><code>cd &lt;your folder name&gt;\n</code></pre> <p>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <p>\u9009\u98791: \u4f7f\u7528<code>poetry</code>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>make setup\n</code></pre> <p>\u9009\u98792: \u4f7f\u7528<code>pip</code>\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"usage/quick_start/#_3","title":"\u8fd0\u884c\u6a21\u578b","text":"<p>\u60a8\u53ef\u4ee5\u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u53c2\u6570\uff0c\u8ba9\u5b9e\u9a8c\u7ed3\u679c\u66f4\u7b26\u5408\u60a8\u7684\u9884\u671f\uff0c\u6216\u8fdb\u884c\u591a\u7ec4\u5b9e\u9a8c\u3002\u53c2\u6570\u540d\u79f0\u4e00\u822c\u90fd\u5f88\u76f4\u89c2\uff0c\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u4fee\u6539\u3002\u8bf7\u6ce8\u610f\u4fdd\u6301\u53c2\u6570\u540d\u79f0\u524d\u7684\u7f29\u8fdb\uff0c\u4e0d\u8981\u8f7b\u6613\u4fee\u6539\u53c2\u6570\u540d\uff0c\u5e76\u5c0f\u5fc3\u4fdd\u6301YAML\u683c\u5f0f\u7684\u6b63\u786e\u6027\u3002</p> <p>\u4e3a\u4e86\u65b9\u4fbf\u8fdb\u884c\u591a\u7ec4\u5b9e\u9a8c\uff0c\u60a8\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u914d\u7f6e\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u5728\u4e00\u4e2a\u6587\u4ef6\u4e2d\u53cd\u590d\u4fee\u6539\u3002\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u5728\u9879\u76ee\u76ee\u5f55\u4e0b\u7684<code>config</code>\u6587\u4ef6\u5939\u4e2d\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u914d\u7f6e\u6587\u4ef6<code>config_2.yaml</code>\u3002\u7136\u540e\u5728\u8fd0\u884c\u6a21\u578b\u65f6\uff0c\u9009\u62e9\u5bf9\u5e94\u7684\u53c2\u6570\u6587\u4ef6\uff1a</p> <pre><code>python main.py --config-name config_2\n</code></pre> <p>\u5982\u679c\u60a8\u7684\u914d\u7f6e\u6587\u4ef6\u4f4d\u4e8e\u4e0d\u540c\u7684\u6587\u4ef6\u5939\u4e2d\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b8c\u6574\u8def\u5f84\uff1a</p> <pre><code>python main.py --config-name config/custom/config_2\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8986\u76d6\u7279\u5b9a\u7684\u53c2\u6570\u503c\uff1a</p> <pre><code>python main.py --config-name config_2 model.parameter1=new_value\n</code></pre> <p>\u60a8\u8fd8\u53ef\u4ee5\u5728\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6\u540e\uff0c\u6307\u5b9a\u53c2\u6570\u8fdb\u884c\u6279\u91cf\u8fd0\u884c\u7684\u5b9e\u9a8c\uff1a</p> <pre><code>python main.py --config-name config_2 model.parameter1=v1,v2,v3 model.parameter2=a1,a2\n</code></pre> <p>\u6279\u91cf\u8fd0\u884c\u5b9e\u9a8c\u65f6\uff0c\u6240\u6709\u53c2\u6570\u7684\u7b1b\u5361\u5c14\u79ef\u7ec4\u5408\u90fd\u4f1a\u88ab\u8fd0\u884c\u3002\u5373\u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u5982\u679c <code>model.parameter1</code> \u67093\u4e2a\u53d6\u503c\uff0c<code>model.parameter2</code> \u67092\u4e2a\u53d6\u503c\uff0c\u90a3\u4e48\u6700\u7ec8\u4f1a\u8fd0\u884c <code>3 * 2 = 6</code> \u7ec4\u53c2\u6570\u5b9e\u9a8c\uff0c\u800c\u4e14\u6bcf\u6b21\u5b9e\u9a8c\u90fd\u4f1a\u8fdb\u884c <code>exp.repeat</code> \u6b21\u91cd\u590d\u5b9e\u9a8c\uff08\u9ed8\u8ba4\u4e3a5\u6b21\uff09\u3002</p>"},{"location":"usage/quick_start/#_4","title":"\u6570\u636e\u8f93\u51fa\u4e0e\u5206\u6790","text":"<p>\u6a21\u578b\u6216\u5b9e\u9a8c\u8fd0\u884c\u540e\uff0c\u901a\u5e38\u4f1a\u81ea\u52a8\u8f93\u51fa\u60a8\u53ef\u4ee5\u4f7f\u7528\u7684\u6570\u636e\u5e76\u7ed8\u5236\u76f8\u5e94\u56fe\u8868\uff0c\u5177\u4f53\u5305\u62ec\uff1a</p>"},{"location":"usage/quick_start/#_5","title":"\u591a\u6b21\u5b9e\u9a8c","text":"<p>\u8fd0\u884c\u4e00\u6b21\u5b9e\u9a8c\u540e\uff0c\u5728<code>out/&lt;model name&gt;/&lt;date&gt;/&lt;time&gt;</code>\u8def\u5f84\u4e0b\u4f1a\u4fdd\u5b58\u672c\u6b21\u5b9e\u9a8c\u7684\u6240\u6709\u8f93\u51fa\u7ed3\u679c\u3002\u5176\u4e2d <code>&lt;model name&gt;</code> \u662f\u60a8\u5728\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bbe\u7f6e\u7684\u6a21\u578b\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a <code>south_china_evolution</code>\uff09\uff0c<code>&lt;date&gt;</code> \u662f\u5b9e\u9a8c\u8fd0\u884c\u7684\u65e5\u671f\uff0c<code>&lt;time&gt;</code> \u662f\u5b9e\u9a8c\u8fd0\u884c\u7684\u65f6\u95f4\uff0c\u6bcf\u4e2a\u6587\u4ef6\u5939\u4e2d\u5305\u62ec\uff1a</p> <ul> <li><code>multirun.yaml</code>\uff1a\u5b9e\u9a8c\u914d\u7f6e\u6587\u4ef6\uff0c\u8bb0\u5f55\u4e86\u5b9e\u9a8c\u7684\u53c2\u6570\u8bbe\u7f6e\uff0c\u6709\u54ea\u4e9b\u53c2\u6570\u88ab\u4fee\u6539\u8fc7\uff0c\u53d6\u503c\u8303\u56f4\u7b49\uff1b</li> <li>\u6587\u4ef6\u5939 <code>&lt;job.id&gt;_&lt;config&gt;</code>\uff1a\u8bb0\u5f55\u4e86\u5f53\u524d <code>&lt;config&gt;</code> \u914d\u7f6e\u4e0b\uff0c\u6240\u6709\u5355\u6b21\u5b9e\u9a8c\u7684\u8f93\u51fa\u7ed3\u679c\uff1b<code>&lt;job.id&gt;</code> \u662f\u5b50\u5b9e\u9a8c\u7684\u552f\u4e00\u6807\u8bc6\u7b26\uff0c\u5373\u8be5\u7ec4\u53c2\u6570\u914d\u7f6e\u76f8\u540c\u3002</li> <li><code>breakpoints.jpg</code>: \u4e00\u4e2a <code>3 * &lt;jobs&gt;</code> \u7684\u77e9\u9635\u56fe\uff0c\u5bf9\u6bcf\u7ec4\u53c2\u6570\u914d\u7f6e\uff08\u552f\u4e00\u7684 <code>&lt;job.id&gt;</code>\uff09\uff0c\u7ed8\u5236\u4e86\u8be5\u7ec4\u53c2\u6570\u4e0b\uff0c\u6240\u6709\u5b50\u5b9e\u9a8c\u7684 <code>breakpoint</code> \u5206\u5e03\u56fe\u3002</li> <li><code>heatmap.jpg</code>: \u4e00\u4e2a <code>x * y</code> \u7684\u77e9\u9635\u56fe\uff0c\u5e94\u6ee1\u8db3 <code>x * y = jobs</code>\uff0c\u5c55\u793a2\u7ef4\u53c2\u6570\u914d\u7f6e\u4fe9\u4fe9\u7ec4\u5408\u4e0b\uff0c\u5b9e\u9a8c\u67d0\u53d8\u91cf\u7684\u5e73\u5747\u8f93\u51fa\u7ed3\u679c\u3002</li> <li><code>len_&lt;breed&gt;_&lt;ratio&gt;.jpg</code>: \u6bcf\u7ec4\u53c2\u6570\u914d\u7f6e\u4e0b\uff0c\u6240\u6709\u5b50\u5b9e\u9a8c <code>&lt;breed&gt;</code> \u8fd9\u79cd\u4e3b\u4f53\u7684\u7fa4\u4f53\u6570\u5360\u5168\u90e8\u7fa4\u4f53\u6570\u7684\u6bd4\u4f8b\u53d8\u5316\u56fe\u3002</li> <li><code>num_&lt;breed&gt;_&lt;ratio&gt;.jpg</code>: \u6bcf\u7ec4\u53c2\u6570\u914d\u7f6e\u4e0b\uff0c\u6240\u6709\u5b50\u5b9e\u9a8c <code>&lt;breed&gt;</code> \u8fd9\u79cd\u4e3b\u4f53\u7684\u4e2a\u4f53\u6570\u5360\u5168\u90e8\u7fa4\u4f53\u6570\u7684\u6bd4\u4f8b\u53d8\u5316\u56fe\u3002</li> <li>summary.csv: \u5bf9\u672c\u6b21\u5b9e\u9a8c\u7684\u603b\u7ed3\uff0c\u6bcf\u4e2a\u53c2\u6570\u914d\u7f6e\u4e0b\u6bcf\u6b21\u91cd\u590d\u7684\u6700\u7ec8\u7ed3\u679c\u3002</li> </ul>"},{"location":"usage/quick_start/#_6","title":"\u5355\u6b21\u5b9e\u9a8c","text":"<ul> <li><code>ABSESpyExp.log</code>\uff1a\u5b9e\u9a8c\u65e5\u5fd7</li> <li><code>repeat_&lt;x&gt;_&lt;figure&gt;.png/jpg</code>\uff1a\u5b9e\u9a8c\u56fe\u8868\uff0c<code>&lt;x&gt;</code>\u4e3a\u5b9e\u9a8c\u5e8f\u53f7\uff0c<code>&lt;figure&gt;</code>\u4e3a\u56fe\u8868\u540d\u79f0\uff0c\u5305\u62ec\uff1a<ol> <li><code>hist.jpg</code>: \u4eba\u53e3\u548c\u65cf\u7fa4\u6570\u91cf\u7684\u5206\u5e03</li> <li><code>dynamic.jpg</code>: \u4eba\u53e3\u548c\u65cf\u7fa4\u6570\u91cf\u7684\u53d8\u5316\u8d8b\u52bf</li> <li><code>heatmap.jpg</code>: \u4eba\u53e3\u7a7a\u95f4\u5206\u5e03\u70ed\u529b\u56fe\uff08\u5730\u56fe\uff09</li> </ol> </li> <li><code>repeat_&lt;x&gt;_conversion.csv</code>: \u4eba\u53e3\u8f6c\u5316\u60c5\u51b5\uff0c\u8bb0\u5f55\u6bcf\u79cd\u4e3b\u4f53\u7684\u8f6c\u5316\u60c5\u51b5</li> </ul> <p>\u5982\u679c\u60a8\u9047\u5230\u4efb\u4f55\u95ee\u9898\u6216\u6709\u6539\u8fdb\u5efa\u8bae\uff0c\u6b22\u8fce\u5728 GitHub \u4e0a\u63d0\u51fa issue \u6216\u8d21\u732e\u4ee3\u7801\u3002</p> <p>\u795d\u60a8\u4f7f\u7528\u6109\u5feb\uff01</p>"},{"location":"usage/workflow/","title":"\u6a21\u578b\u5de5\u4f5c\u6d41","text":"<p>\u5178\u578b\u7684\u591a\u4e3b\u4f53\u6a21\u578b\u5b9e\u9a8c\u62e5\u6709\u4e0b\u56fe\u6240\u793a\u7684\u7ed3\u6784\uff0c\u5de6\u4fa7\u662f\u5b9e\u9a8c\u6d41\u7a0b\uff0c\u53f3\u4fa7\u662f\u6a21\u578b\u6d41\u7a0b\u3002</p> <p></p>"},{"location":"usage/workflow/#_1","title":"\u5b9e\u9a8c\u6d41\u7a0b","text":"<p>\u5728\u6bcf\u4e00\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u672c\u5e93\u4f1a\u81ea\u52a8\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u83b7\u53d6\u4e0d\u540c\u53c2\u6570\u7684\u7ec4\u5408\uff0c\u786e\u5b9a\u5b9e\u9a8c\u914d\u7f6e\u7ec4\u6570\uff08jobs\uff09</li> <li>\u6279\u91cf\u8fd0\u884c\u6a21\u578b\uff0c\u6bcf\u6b21\u8fd0\u884c(run)\u90fd\u4fdd\u5b58\u8fd0\u884c\u7684\u7ed3\u679c</li> <li>\u7ed8\u5236\u6240\u6709job\u7684\u5bf9\u6bd4\u7ed3\u679c\u56fe\uff08[\u70ed\u529b\u56fe]\u3001[\u65ad\u70b9\u56fe]\u3001[\u52a8\u6001\u56fe]\uff09</li> <li>\u5b58\u50a8[\u603b\u7ed3\u6570\u636e]\uff08<code>summary.csv</code>\uff09</li> </ol>"},{"location":"usage/workflow/#_2","title":"\u6a21\u578b\u6d41\u7a0b","text":"<p>\u5728\u6bcf\u4e00\u6b21\u5b9e\u9a8c\u4e2d\uff0c\u672c\u5e93\u4f1a\u5bf9\u6bcf\u4e2a\u8fd0\u884c\uff08Run\uff09\u81ea\u52a8\u5b8c\u6210\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p>"},{"location":"usage/workflow/#initialize","title":"\u521d\u59cb\u5316\uff08Initialize\uff09","text":"<p>\u73af\u5883\uff08Environment\uff09\u4f1a\u6839\u636e\u53c2\u6570<code>env</code>\u521d\u59cb\u5316\uff0c\u5305\u62ec\u52a0\u8f7d\u6570\u636e\uff1a</p> <ol> <li>\u52a0\u8f7d\u5730\u5f62\u6570\u636e\uff08DEM\uff09</li> <li>\u52a0\u8f7d\u5761\u5ea6\u6570\u636e\uff08SLO\uff09</li> <li>\u52a0\u8f7d\u9650\u5236\u72e9\u730e\u91c7\u96c6\u8005\u6570\u91cf\u7684\u6805\u683c\u6570\u636e\uff08LIM_H\uff09</li> </ol>"},{"location":"usage/workflow/#setup","title":"\u8bbe\u7f6e\uff08Setup\uff09","text":"<p>\u6dfb\u52a0\u521d\u59cb\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff08Hunter\uff09\uff0c\u6839\u636e\u53c2\u6570<code>env.init_hunters</code>\u8bbe\u7f6e\u7684\u6bd4\u4f8b\uff0c\u5728\u53ef\u5229\u7528\u7684\u683c\u5b50\u4e2d\u968f\u673a\u9009\u62e9\u3002</p> <p>Example</p> <p>\u5982\u679c<code>env.init_hunters=0.05</code>\uff0c\u5219\u4f1a\u5728\u53ef\u5229\u7528\u7684\u683c\u5b50\u4e2d\u968f\u673a\u9009\u62e95%\u7684\u683c\u5b50\uff08\u53d6\u6574\uff09\uff0c\u5e76\u5728\u6240\u6709\u88ab\u9009\u4e2d\u7684\u683c\u5b50\u91cc\u6dfb\u52a0\u4e00\u4e2a\u65b0\u751f\u6210\u7684\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u8be5\u72e9\u730e\u91c7\u96c6\u8005\u7fa4\u4f53\u7684\u521d\u59cb\u5927\u5c0f\u6839\u636e\u53c2\u6570<code>env.init_hunters_size</code>\u8bbe\u7f6e\u7684\u4e0a\u4e0b\u9650\uff0c\u6309\u5747\u5300\u5206\u5e03\u968f\u673a\u53d6\u503c\u3002</p>"},{"location":"usage/workflow/#step","title":"\u6b65\u9aa4\uff08Step\uff09","text":"<p>\u968f\u7740\u8fd0\u884c\u6b65\u6570(tick)\u7684\u589e\u52a0\uff0c\u6a21\u578b\u4f1a\u4e0d\u65ad\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa4\uff1a</p> <ol> <li>\u6839\u636e\u53c2\u6570\u6dfb\u52a0\u519c\u6c11\u7684\u671f\u671b\uff08<code>env.lam_farmer</code>\uff09\u6dfb\u52a0\u65b0\u7684\u666e\u901a\u519c\u6c11\uff08Farmer\uff09</li> <li>\u6839\u636e\u53c2\u6570\u6dfb\u52a0\u6c34\u7a3b\u519c\u6c11\u7684\u671f\u671b\uff08<code>env.lam_ricefarmer</code>\uff09\u6dfb\u52a0\u65b0\u7684\u6c34\u7a3b\u519c\u6c11\uff08RiceFarmer\uff09</li> <li>\u4f9d\u6b21\u968f\u673a\u9009\u62e9\u72e9\u730e\u91c7\u96c6\u8005\u3001\u519c\u6c11\u3001\u6c34\u7a3b\u519c\u6c11\u4e2d\u7684\u4e00\u4e2a\uff0c\u6267\u884c\u5b83\u7684<code>step</code>\u65b9\u6cd5\u3002\u5bf9\u4e8e\u4e09\u79cd\u4e3b\u4f53\uff0c\u5176<code>step</code>\u65b9\u6cd5\u5927\u540c\u5c0f\u5f02\uff0c\u5747\u5305\u542b\uff1a</li> <li>\u589e\u957f\uff1a\u6839\u636e\u53c2\u6570<code>&lt;breed&gt;.growth_rate</code>\u8bbe\u7f6e\u7684\u589e\u957f\u7387\uff0c\u5728\u73b0\u6709\u79cd\u7fa4\u89c4\u6a21\u7684\u57fa\u7840\u4e0a\u66f4\u65b0\u79cd\u7fa4\u6570\u91cf\u3002</li> <li>\u8f6c\u5316\uff1a\u6839\u636e\u53c2\u6570<code>&lt;breed&gt;.convert_prob</code>\u8bbe\u7f6e\u7684\u8f6c\u5316\u6982\u7387\uff0c\u5c1d\u8bd5\u8f6c\u5316\u4e3a\u5176\u4ed6\u5f62\u5f0f\u7684\u4e3b\u4f53\u3002</li> <li>\u6269\u6563\uff1a\u6839\u636e\u53c2\u6570<code>&lt;breed&gt;.diffuse_prob</code>\u8bbe\u7f6e\u7684\u6269\u6563\u6982\u7387\uff0c\u5c1d\u8bd5\u5efa\u7acb\u65b0\u7684\u79cd\u7fa4\u5e76\u6269\u6563\u5230\u5468\u56f4[\u9002\u5b9c\u5b58\u6d3b]\u7684\u683c\u5b50\uff0c\u5982\u679c\u6269\u6563\u5230</li> <li>\u5982\u679c\u662f\u72e9\u730e\u91c7\u96c6\u8005\uff0c\u5219\u6267\u884c<code>move</code>\u65b9\u6cd5\uff0c\u5c1d\u8bd5\u5728\u5468\u56f4\u4e3b\u52a8\u627e\u5230\u4e00\u4e2a[\u9002\u5b9c\u5b58\u6d3b]\u7684\u683c\u5b50\uff0c\u5e76\u79fb\u52a8\u8fc7\u53bb\u3002\u5982\u679c\u79fb\u52a8</li> <li>\u5982\u679c\u662f\u519c\u6c11\u6216\u6c34\u7a3b\u519c\u6c11\uff0c\u8fd8\u8981\u6267\u884c<code>loss</code>\u65b9\u6cd5\uff0c\u5373\u4ee5\u4e00\u5b9a\u6982\u7387\uff08\u5982\u906d\u9047\u707e\u5bb3\uff09\u964d\u4f4e\u79cd\u7fa4\u6570\u91cf\u3002</li> </ol> <p>\u5728\u6bcf\u4e00\u6b65\u90fd\u4f1a\u68c0\u67e5\u5f53\u524d\u7684\u79cd\u7fa4\u6570\u91cf\u662f\u5426\u4f4e\u4e8e\u4eba\u53e3\u89c4\u6a21\u9608\u503c (\u7531\u53c2\u6570<code>&lt;breed&gt;.min_size</code>\u51b3\u5b9a)\uff0c\u82e5\u4f4e\u4e8e\u5219\u6267\u884c<code>die</code>\u65b9\u6cd5\uff0c\u79cd\u7fa4\u6570\u91cf\u76f4\u63a5\u6e05\u96f6\uff0c\u5373\u4eba\u53e3\u89c4\u6a21\u4e0d\u8db3\u4ee5\u652f\u6491\u8be5\u7fa4\u4f53\u7684\u5ef6\u7eed\u3002</p>"},{"location":"usage/workflow/#end","title":"\u7ed3\u675f\uff08End\uff09","text":"<p>\u7ed3\u675f\u6761\u4ef6\u662f\u5f53\u8bbe\u7f6e\u7684\u8fd0\u884c\u6b65\u6570\u8fbe\u5230\u53c2\u6570<code>time.end</code>\u65f6\uff0c\u6a21\u578b\u4f1a\u4fdd\u5b58\u4ee5\u4e0b\u6570\u636e\u4f9b\u4e0e\u5176\u5b83\u8fd0\u884c\u5bf9\u6bd4\u5206\u6790\uff1a</p> <ol> <li>\u6240\u6709\u4e2a\u4f53\u7684\u4fe1\u606f\uff0c\u5982\u79cd\u7fa4\u6570\u91cf\u3001\u4f4d\u7f6e\u3001\u72b6\u6001\u7b49</li> <li>\u6240\u6709\u4e2a\u4f53\u7684\u4fe1\u606f\uff0c\u5982\u79cd\u7fa4\u6570\u91cf\u3001\u4f4d\u7f6e\u3001\u72b6\u6001\u7b49</li> <li>\u6240\u6709\u4e2a\u4f53\u7684\u4fe1\u606f\uff0c\u5982\u79cd\u7fa4\u6570\u91cf\u3001\u4f4d\u7f6e\u3001\u72b6\u6001\u7b49</li> </ol>"}]}